while <A> [ -1 ] <  4000000 : <blk> <A> . append ( <A> [ -1 ] + <A> [ -2 ] ) </blk>	<A> の末尾要素が 4000000 未満の間、 <A> の末尾要素とその次の要素を足して <A> の末尾に追加する
for <A> in <B> : <blk> if <A> % 2 == 0 : <blk> <C> += <A> </blk> </blk>	<B> の各要素を前から順に <A> として、 <A> が 2 でわりきれるなら、 <C> に <A> を足す
for <A> in <B> : <blk> <C> += <A> </blk>	<B> の各要素を順に <A> として、 <C> に <A> を足す
if <A> == 1 : <blk> return [ 0 ] </blk> <sep> else : <blk> while <B> >  0 : <blk> <C> . append ( <C> [ -1 ] + <C> [ -2 ] ) </blk> </blk>	もし <A> が 1 であれば、 0 のみからなるリストを返す。そうでなければ、 <B> が 0 より大きい間、 <C> の末尾要素とその次の要素を足して <C> の末尾に追加
if 0 <  <A> <= 2 : <blk> return <B> [ <A> - 1 ] </blk>	もし <A> が 0 より大きく、かつ 2 以下であるなら、 <B> の <A> -1 番目の要素を返す
else : <blk> <A> = <B> - 2 <sep> while <A> >  0 : <blk> <C> . append ( <C> [ -1 ] + <C> [ -2 ] ) </blk> </blk>	そうでなければ、 <A> に <B> から 2 を引いた数を代入し、 <A> が 0 より大きい間、 <C> の末尾要素とその次の要素を足して <C> の末尾に追加
while <A> % <B> == 0 : <blk> <A> = <A> / <B> </blk>	<A> が <B> で割り切れる間、 <A> を <B> で割る
while <A> * <A> <  <B> : <blk> <A> = <A> + 1 </blk>	<A> の二乗が <B> 未満の間、 <A> に 1 を足す
for <A> in range ( 100 ) : <blk> <B> *= ( <A> + 1 ) </blk>	100 未満の非負整数を小さい方から順に <A> として、 <B> に <A> + 1 を掛ける
for <A> in <B> : <blk> <C> . append ( int ( <A> ) ) </blk>	<B> の各要素を順に <A> として、 <C> の末尾にに <A> の表す整数を追加
for <A> in range ( <B> ) : <blk> <C> *= ( <A> + 1 ) </blk>	<B> 未満の非負整数を小さい方から順に <A> として、 <C> に <A> + 1 を掛ける
for <A> in <B> : <blk> <C> += int ( <A> ) </blk>	<B> の各要素を順に <A> として、 <C> に <A> の表す整数を足す
for <A> in range ( 1901 , 2001 ) : <blk> for <B> , <C> in enumerate ( <D> ) : <blk> if <E> % 7 == 6 : <blk> <F> += 1 </blk> </blk> </blk>	1901 以上 2001 未満の整数を順に <A> として <C> を <D> の各要素、 <B> をその番号としたとき、もし <E> を 7 で割った余りが 6 であれば <F> に 1 を足す
if ( <A> % 400 == 0 or ( ( not <A> % 100 == 0 ) and <A> % 4 == 0 ) ) and <B> == 1 : <blk> <C> += 1 </blk>	<A> が 400 で割り切れるか、 100 で割り切れずに 4 で割り切れ、さらに <B> が 1 である場合、 <C> に 1 を足す
if <A> <= 2 : <blk> <A> += 12 <sep> <B> -= 1 </blk>	もし <A> が 2 以下であれば、 <A> に 12 を足して <B> から 1 を引く
if 1582 <= <A> : <blk> <B> = -2 * int ( <A> / 100 ) + int ( int ( <A> / 100 ) / 4 ) </blk> <sep> else : <blk> <B> = -1 * int ( <A> / 100 ) + 5 </blk>	もし <A> が 1582 以上であれば <B> に <A> / 100 の整数部分の -2 倍と <A> / 100 の整数部分を 4 で割った整数部分の和を代入し、そうでなければ <B> に <A> を 100 で割った整数部分の -1 倍に 5 を足したものを代入
for <A> in reversed ( range ( len ( <B> ) - 1 ) ) : <blk> for <C> in range ( len ( <B> [ <A> ] ) ) : <blk> <B> [ <A> ] [ <C> ] += max ( <B> [ <A> + 1 ] [ <C> ] , <B> [ <A> + 1 ] [ <C> + 1 ] ) </blk> </blk>	<B> の長さ -1 未満の非負整数を大きい方から <A> 、 <B> の <A> 番目の長さ未満の非負整数を小さい方から <C> として、 <B> [ <A> + 1 ] [ <C> ] と <B> [ <A> + 1 ] [ <C> + 1 ] の大きい方を <B> [ <A> ] [ <C> ] に足す
if <A> != 0 and <A> <= 20 : <blk> <B> += len ( <C> [ <A> ] ) </blk> <sep> elif <A> == 0 : <blk> <B> -= 3 </blk> <sep> else : <blk> <B> += len ( twoword [ int ( <A> / 10 ) ] ) <sep> <B> += len ( <C> [ <A> % 10 ] ) </blk>	もし <A> が 0 でなくて、かつ <A> が 20 以下であれば、 <B> に <C> の <A> 番目の要素の長さを足す。そうでなくて、もし <A> が 0 であれば <B> から 3 を引く。いずれでもなければ <B> に toword の <A> / 10 番目の要素の長さを足し、 <B> に <C> の <A> % 10 番目の要素の長さを足す
while int ( <A> / 10 ) >  0 : <blk> <A> /= 10 <sep> <B> += 1 </blk>	<A> を 10 で割った整数部分が 0 より大きい間、 <A> を 10 で割って <B> に 1 を足す
for <A> in <B> : <blk> <C> += 1 </blk>	<B> 内の各要素を <A> として、 <C> に 1 を足す
while <A> <  <B> : <blk> <C> *= <D> </blk>	<A> が <B> より小さい間、 <C> に <D> を掛ける
for <A> in range ( 20 ) : <blk> <B> [ <A> + 1 ] = <B> [ <A> ] * ( <A> + 1 ) </blk>	20 未満の非負整数を小さい方から順に <A> として、 <B> の <A> + 1 番目に <B> の <A> 番目と <A> + 1 の積を代入
for <A> in range ( <B> - 2 ) : <blk> <C> . insert ( <A> + 1 , <D> [ <A> ] + <D> [ <A> + 1 ] ) </blk>	<B> -2 未満の非負整数 <A> を小さい方から順に調べ、 <C> の <A> + 1 番目に <D> の <A> 番目と <A> + 1 番目の要素の和を追加する
while <A> >= <B> or <C> [ <A> ] == -1 : <blk> <D> . append ( <A> ) </blk>	<A> が <B> 以上か <C> の <A> 番目が -1 である間、 <D> の末尾に <A> を追加
if <A> <  <B> : <blk> <C> [ <A> ] = <D> </blk>	もし <A> が <B> 未満なら、 <C> の <A> 番目を <D> にする
for i in range ( <A> ) : <blk> ret . append ( <B> ) </blk>	et の末尾に <B> を追加する処理を <A> 回繰り返す
for <A> in reversed ( <B> ) : <blk> <C> . append ( <A> ) </blk>	<B> の末尾要素から順に <A> として、 <C> の末尾に <A> を追加する
for <A> in range ( <B> , <C> ) : <blk> <D> . append ( <A> ) </blk>	<B> 以上 <C> 未満の整数を小さい方から <A> として、 <D> の末尾に <A> を追加する
for <A> , <B> in enumerate ( <C> ) : <blk> if <A> <  10 : <blk> <D> += <B> </blk> </blk>	<B> を <C> の各要素、 <A> をその番号として、もし <A> が 10 未満であれば <D> に <B> を追加
for <A> in range ( <B> ) : <blk> <C> += <D> [ <A> ] </blk>	<B> 未満の非負整数を順に <A> として、 <C> に <D> の <A> 番目を足す
while <A> <  500 : <blk> <B> = sum ( range ( 1 , <C> + 1 ) ) </blk>	<A> が 500 未満である間、 <B> に 1 から <C> の総和を代入
if not <A> % 2 : <blk> <B> = ( int ( <A> / 2 ) , <A> + 1 ) </blk> <sep> else : <blk> <B> = ( <A> , int ( ( <A> + 1 ) / 2 ) ) </blk>	もし <A> が 2 で割り切れるなら、 <B> に <A> を 2 で割った商と <A> + 1 の組を代入し、そうでなければ、 <B> に <A> と <A> + 1 を 2 で割った商の組を代入
if len ( <A> ) <  <B> : <blk> <C> = [ 0 ] * ( <B> - len ( <A> ) + 1 ) </blk>	もし <A> の長さが <B> より小さければ、 <C> に 0 を ( <B> - <A> の長さ + 1 ) 回繰り返したリストを代入
if not <A> [ <B> ] : <blk> <C> = 1 </blk>	もし <A> の <B> 番目が偽であれば、 <C> に 1 を代入
if <A> % <B> == 0 : <blk> break </blk>	もし <A> が <B> で割り切れるなら、ループから抜ける
if <A> <= 1 : <blk> <A> = 2 </blk>	もし <A> が 1 以下であれば、 <A> を 2 にする
for <A> in range ( 2 , int ( <B> ** 0.5 ) + 1 ) : <blk> if <B> % <A> == 0 : <blk> break </blk> </blk>	2 から <B> の平方根までの数を順に <A> として、もし <B> が <A> で割り切れるならループを抜ける
while <A> != 0 : <blk> <B> , <A> = <A> , <B> % <A> </blk>	<A> が 0 でない間、 <B> に <A> を、 <A> に <B> を <A> で割った余りを代入
while <A> % <B> == 0 : <blk> <A> /= <B> <sep> <C> += 1 </blk>	<A> が <B> で割り切れる間、 <A> を <B> で割り <C> に 1 を足す
if <A> == " " : <blk> <B> . append ( <C> ) <sep> <C> = "" </blk>	もし <A> が半角スペースなら、 <B> の末尾に <C> を追加し <C> を空文字列にする
else : <blk> <A> += <B> </blk>	そうでなければ <A> に <B> を加える
while <A> <  <B> : <blk> <C> . append ( <A> ) <sep> <A> += <D> </blk>	<A> が <B> より小さい間、 <C> の末尾に <A> を追加し <A> に <D> を足す
for <A> in <B> : <blk> <C> += <A> </blk>	<B> に含まれる各要素を <A> に代入して <C> に <A> を繰り返し足す
if <A> and <B> % <C> == 0 : <blk> <A> = <D> </blk>	もし <A> が真でかつ <B> が <C> で割り切れるなら、 <A> を <D> にする
if <A> [ <B> ] : <blk> <C> . append ( <B> ) </blk>	もし <A> の <B> 番目が真であれば、 <C> の末尾に <B> を追加
for <A> in range ( 2 , 2000000 ) : <blk> if <B> [ <A> ] : <blk> <C> . append ( <A> ) </blk> </blk>	<A> を 2 から 2000000 まで変化させ繰り返した時、もし <B> の <A> 番目が真であれば <C> の末尾に <A> を追加
for i in range ( <A> ) : <blk> <B> += <A> </blk>	<B> に <A> を足す処理を <A> 回繰り返す
for <A> in <B> : <blk> <C> *= <A> </blk>	<B> 内の全要素 <A> について <A> を <C> に掛ける
