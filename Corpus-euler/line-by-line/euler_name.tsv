def <A> ( ) :	関数 <A> の定義
<A> = [ 1 , 2 ]	<A> に 1 と 2 からなるリストを代入
while <A> [ -1 ] <  4000000 :	<A> の末尾要素が 4000000 未満の間繰り返し
<A> . append ( <A> [ -1 ] + <A> [ -2 ] )	<A> の末尾要素とその次の要素を足して <A> の末尾に追加する
<A> = 0	<A> に 0 を代入
for <A> in <B> :	<B> の各要素を前から順に <A> として
if <A> % 2 == 0 :	<A> が 2 でわりきれるなら
<A> += <B>	<A> に <B> を足す
return <A>	<A> を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
return <A> % 2 == 0	<A> が 2 で割り切れる場合 True 、そうでなければ False を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> の定義
return <A> + <B>	<A> と <B> の和を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
<A> = 0	<A> に 0 を代入
for <A> in <B> :	<B> の各要素を順に <A> として
<A> += <B>	<A> に <B> を足す
return <A>	<A> を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
return sum ( <A> )	<A> の全要素の総和を返す
def euler002_n_fibnocci_sequence ( <A> ) :	<A> を引数とする関数 euler002_n_fibonacci_sequence の定義
<A> = [ 0 , 1 ]	<A> に 0 と 1 からなるリストを代入
<A> = <B> - 2	<A> に <B> から 2 を引いた数を代入
if <A> == 1 :	もし <A> が 1 であれば
return [ 0 ]	0 のみからなるリストを返す
else :	そうでなければ
while <A> >  0 :	<A> が 0 より大きい間
<A> . append ( <A> [ -1 ] + <A> [ -2 ] )	<A> の末尾要素とその次の要素を足して <A> の末尾に追加
<A> -= 1	<A> から 1 を引く
return <A>	<A> を返す
def euler002_n_fibnocci_number ( <A> ) :	<A> を引数とする関数 euler002_n_fibonacci_number の定義
<A> = [ 0 , 1 ]	<A> に 0 と 1 からなるリストを代入
if 0 <  <A> <= 2 :	もし <A> が 0 より大きく、かつ 2 以下であるなら
return <A> [ <B> - 1 ]	<A> の <B> -1 番目の要素を返す
else :	そうでなければ
<A> = <B> - 2	<A> に <B> から 2 を引いた数を代入
while <A> >  0 :	<A> が 0 より大きい間
<A> . append ( <A> [ -1 ] + <A> [ -2 ] )	<A> の末尾要素とその次の要素を足して <A> の末尾に追加
<A> -= 1	<A> から 1 を引く
return <A> [ -1 ]	<A> の末尾要素を返す
def <A> ( ) :	関数 <A> の定義
<A> = 600851475143	<A> に 600851475143 を代入
<A> = 2	<A> に 2 を代入
while <A> * <A> <  <B> :	<A> の自乗が <B> 未満の間
while <A> % <B> == 0 :	<A> が <B> で割り切れる間
<A> = <A> / <B>	<A> を <B> で割る
<A> = <A> + 1	<A> に 1 を足す
return int ( <A> )	<A> を整数にした結果を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> の定義
return <A> * <A> <  <B>	<A> の自乗が <B> より小さければ True 、そうでなければ False を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> の定義
while <A> % <B> == 0 :	<A> が <B> で割り切れる間
<A> /= <B>	<A> を <B> で割る
return int ( <A> )	<A> を整数にした結果を返す
def <A> ( ) :	関数 <A> の定義
<A> = 0	<A> に 0 を代入
for <A> in range ( 999 , 99 , -1 ) :	99 より大きく 999 以下の整数を大きい方から順に <A> として
for <A> in range ( 999 , 99 , -1 ) :	99 より大きく 999 以下の整数を大きい方から順に <A> として
<A> = ( str ) ( <B> * <C> )	<A> に <B> と <C> の積の文字列表現を代入
<A> = ""	<A> に空文字列を代入
<A> = ""	<A> に空文字列を代入
<A> = ( int ) ( len ( <B> ) / 2 ) + ( len ( <B> ) % 2 )	<A> に <B> の長さを 2 で割った商と <B> を 2 で割った余りの和を代入
for <A> in range ( <B> ) :	<B> 未満の非負整数を順に <A> として
<A> += <B> [ <C> ]	<A> に <B> の <C> 番目の要素を足す
<A> += <B> [ len ( <B> ) - <C> - 1 ]	<A> に <B> の後ろから <C> 番目の要素を足す
if <A> == <B> :	もし <A> と <B> が等しければ
<A> = max ( <A> , <B> * <C> )	<A> と、 <B> と <C> の積の大きい方を新しい <A> とする
return <A>	<A> を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> の定義
<A> = ""	<A> に空文字列を代入
for <A> in range ( <B> ) :	<B> 未満の非負整数を順に <A> として
<A> += <B> [ <C> ]	<A> に <B> の <C> 番目の要素を足す
return <A>	<A> を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> の定義
<A> = ""	<A> に空文字列を代入
for <A> in range ( <B> ) :	<B> 未満の非負整数を順に <A> として
<A> += <B> [ len ( <B> ) - 1 - <C> ]	<A> に <B> の後ろから <C> 番目の要素を足す
return <A>	<A> を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> の定義
return <A> == <B>	<A> と <B> が等しければ True 、そうでなければ False を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
<A> = ( str ) ( <B> )	<A> に <B> の文字列表現を代入
<A> = len ( <B> )	<A> に <B> の長さを代入
return ( int ) ( <A> / 2 ) + ( <A> % 2 )	<A> を 2 で割った商と s を 2 で割った余りの和を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> を定義
return <A> * <B>	<A> と <B> の積を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> の定義
<A> = 0	<A> に 0 を代入
for i in range ( <A> ) :	以下の処理を <A> 回繰り返す
<A> += <B>	<A> に <B> を足す
return <A>	<A> を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
<A> = ""	<A> に空文字列を代入
for <A> in reversed ( <B> ) :	<B> の各要素を後ろから順に <A> として
<A> += <B>	<A> に <B> を足す
return <A>	<A> を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
<A> = ""	<A> に空文字列を代入
for <A> in reversed ( <B> ) :	<B> の各要素を後ろから順に <A> として
<A> += <B>	<A> に <B> を足す
return <A> == <B>	<A> と <B> が等しければ True 、そうでなければ False を返す
def <A> ( ) :	関数 <A> の定義
<A> = [ ]	<A> に空のリストを代入
for <A> in range ( 2 , 20 ) :	2 から 20 未満の整数を順に <A> として
<A> = [ ]	<A> に空リストを代入
for <A> in <B> :	<B> の各要素を <A> として
if <A> % <B> == 0 :	もし <A> が <B> で割り切れるなら
<A> . append ( <B> )	<A> に <B> を追加する
if len ( <A> ) == 0 :	もし <A> の長さが 0 であれば
<A> . append ( <B> )	<A> に <B> を追加する
<A> = 1	<A> に 1 を代入
for <A> in <B> :	<B> の各要素を <A> として
for <A> in range ( int ( 20 ** ( 1 / <B> ) ) ) :	20 の 1 / <B> 乗未満の非負整数を順に <A> として
<A> = <A> * <B>	<A> に <B> を掛ける
return <A>	<A> を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
<A> = [ ]	<A> に空リストを代入
for <A> in range ( 2 , <B> + 1 ) :	2 から <B> までの各整数を順に <A> として
<A> = <B>	<A> に <B> を代入
for <A> in <B> :	<B> 内の各要素を <A> として
if <A> % <B> == 0 :	<A> が <B> で割り切れるなら
<A> = <B>	<A> を <B> にする
break	ループから抜ける
if <A> :	<A> が True であれば
<A> . append ( <B> )	<A> に <B> を追加する
return <A>	<A> を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
<A> = [ ]	<A> を空リストとする
for <A> in range ( 2 , <B> + 1 ) :	2 から <B> までの各整数を順に <A> として
if <A> == 2 :	<A> が 2 であれば
<A> . append ( <B> )	<A> に <B> を追加する
else :	そうでなければ
for <A> in range ( 2 , int ( <B> ** 0.5 ) + 1 ) :	2 から <B> の平方根までの整数を <A> として
if <A> % <B> == 0 :	<A> が <B> で割り切れるなら
break	ループを抜ける
else :	ループが正常に終了した場合
<A> . append ( <B> )	<A> に <B> を追加する
return <A>	<A> を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
<A> = [ <B> ] * ( <C> + 1 )	<A> を <B> が <C> + 1 個繋がったリストとする
<A> = [ ]	<A> を空リストとする
for <A> in range ( 2 , int ( <B> ** 0.5 ) + 1 ) :	2 から <B> の平方根までの整数を <A> として
if <A> [ <B> ] :	もし <A> の <B> 番目が True であれば
for <A> in range ( <B> + <B> , <C> + 1 , <B> ) :	<B> の自乗から <C> までの <B> 個飛ばしの整数を <A> として
<A> [ <B> ] = <C>	<A> の <B> 番目を <C> にする
for <A> in range ( 2 , <B> + 1 ) :	2 から <B> + 1 までの整数を順に <A> として
if <A> [ <B> ] :	もし <A> の <B> 番目が True であれば
<A> . append ( <B> )	<A> に <B> を追加する
return <A>	<A> を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> の定義
<A> = 1	<A> に 1 を代入
while <A> <  <B> :	<A> が <B> より小さい間
<A> *= <B>	<A> に <B> を掛ける
return int ( <A> / <B> )	<A> 割る <B> の整数部分を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> の定義
return <A> ** int ( <B> ** ( 1 / <A> ) )	<A> の ( <B> の <A> 乗根の整数部分 ) 乗を返す
def <A> ( ) :	関数 <A> の定義
<A> = 0	<A> に 0 を代入
for <A> in range ( 100 ) :	100 未満の非負整数を小さい方から順に <A> として
<A> += ( <B> + 1 ) * ( <B> + 1 )	<A> に <B> + 1 の自乗を足す
<A> = 101 * 50	<A> に 101 と 50 の積を代入
return <A> - <B>	<A> と <B> の差を返す
def <A> ( <B> , <C> , <D> ) :	<B> と <C> と <D> を引数とする関数 <A> の定義
<A> = [ <B> ]	<A> に <B> のみからなるリストを代入
for i in range ( <A> - 1 ) :	以下の処理を <A> -1 回繰り返す
<A> . append ( <A> [ -1 ] + <B> )	<A> の末尾要素に <B> を加えたものを <A> の末尾に追加する
return <A>	<A> を返す
def euler006_make_common_diff_sequence_a ( <A> , <B> , <C> ) :	<A> と <B> と <C> を引数とする関数 euler006_make_common_dif_sequence_a の定義
<A> = [ ]	<A> を空リストとする
for <A> in range ( <B> , <B> + ( <C> * <D> ) , <C> ) :	<B> から <C> 個飛ばしで <D> 個の整数を <A> として
<A> . append ( <B> )	<A> に <B> を追加
return <A>	<A> を返す
def euler006_n_square ( <A> ) :	<A> を引数とする関数 euler006_n_sequence の定義
return <A> * <A>	<A> の自乗を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
<A> = 0	<A> に 0 を代入
for i in range ( <A> ) :	以下の処理を <A> 回繰り返す
<A> += <B>	<A> に <B> を足す
return <A>	<A> を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> の定義
<A> = 0	<A> に 0 を代入
while <A> <  <B> :	<A> が <B> より小さい間
<A> += <B>	<A> に <B> を足す
<A> += 1	<A> に 1 を足す
return <A>	<A> を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> の定義
return sum ( range ( <A> , <B> ) )	<A> 以上 <B> 未満の整数の総和を返す
def <A> ( ) :	関数 <A> の定義
<A> = 0	<A> を 0 とする
<A> = 1	<A> を 1 とする
<A> = [ ]	<A> を空のリストとする
while <A> <  10001 :	<A> が 10001 未満である間
<A> += 1	<A> に 1 を足す
<A> = [ <B> for <B> in range ( 2 , int ( math . sqrt ( <C> ) ) + 1 ) if <C> % <B> == 0 ]	2 から <C> の平方根までの整数 <B> のうち、 <C> を割り切ることができるもののリストを <A> に代入
if len ( <A> ) == 0 :	もし <A> が空なら
<A> += 1	<A> に 1 を足す
return <A>	<A> を返す
def euler007_n_division ( <A> , <B> ) :	<A> と <B> を引数とする関数 euler007_n_difision の定義
return <A> % <B> == 0	<A> が <B> で割り切れるなら True 、そうでないなら False を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> の定義
while <A> >  0 :	<A> が 0 より大きい間
<A> -= <B>	<A> から <B> を引く
return <A> == 0	<A> が 0 であれば True 、そうでなければ False を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
<A> = [ ]	<A> を空リストとする
for <A> in range ( 2 , <B> ) :	2 以上 <B> 未満の整数を順に <A> として
if <A> % <B> == 0 :	<A> が <B> で割り切れるなら
<A> . append ( <B> )	<A> に <B> を追加
return len ( <A> ) == 0	<A> が空であれば True 、そうでなければ False を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
if <A> <  2 :	もし <A> が 2 未満であれば
return <A>	<A> を返す
elif <A> == 2 :	そうでなく、もし <A> が 2 であれば
return <A>	<A> を返す
else :	いずれでもなければ
for <A> in range ( 2 , int ( <B> ** 0.5 ) + 1 ) :	2 から <B> の平方根までの整数を順に <A> として
if <A> % <B> == 0 :	もし <A> が <B> で割り切れれば
return <A>	<A> を返す
return <A>	<A> を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
return <A> + 1	<A> に 1 を足した数を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> の定義
return <A> <  <B>	<A> が <B> より小さければ True 、そうでなければ False を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
return <A> == 0	<A> が 0 であれば True 、そうでなければ False を返す
def <A> ( ) :	関数 <A> の定義
<A> = [ ]	<A> を空リストとする
for <A> in range ( 5 ) :	5 未満の非負整数 <A> について
<A> . append ( int ( <B> [ <C> ] ) )	<A> に <B> の <C> 番目の要素の表す整数を追加
<A> = 1	<A> を 1 とする
for <A> in <B> :	<B> 内の各要素を <A> として
<A> *= <B>	<A> に <B> を掛ける
for <A> in range ( 5 , len ( <B> ) ) :	5 から <B> の要素数未満の整数 <A> について
<A> . append ( int ( <B> [ <C> ] ) )	<A> に <B> の <C> 番目の要素の表す整数を追加
<A> . pop ( 0 )	<A> の最初の要素を削除する
<A> = 1	<A> を 1 とする
for <A> in <B> :	<B> 内の各要素を <A> として
<A> *= <B>	<A> に <B> を掛ける
<A> = max ( <A> , <B> )	<A> と <B> の大きい方を新しい <A> とする
return <A>	<A> を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
<A> = 1	<A> を 1 とする
for <A> in <B> :	<B> 内の全ての要素 <A> について
<A> *= <B>	<A> に <B> を掛ける
return <A>	<A> を返す
def <A> ( <B> , <C> , <D> ) :	<B> と <C> と <D> を引数とする関数 <A> の定義
<A> = [ ]	<A> を空のリストとする
for <A> in range ( <B> ) :	<B> 未満の非負整数 <A> について
<A> . append ( <B> [ <C> + <D> ] )	<B> の <C> + <D> 番目の要素を <A> に追加する
return <A>	<A> を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> の定義
return <A> if <B> <  <A> else <B>	<A> が <B> より大きければ <A> 、そうでなければ <B> を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> の定義
return max ( <A> , <B> )	<A> と <B> の大きい方を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> の定義
<A> = [ <B> ]	<A> を <B> のみからなるリストとする
<A> += <B>	<A> の末尾に <B> を結合する
return <A>	<A> を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> の定義
<A> . append ( <B> )	<A> の末尾に <B> を追加する
return <A>	<A> を返す
def <A> ( ) :	関数 <A> の定義
for <A> in range ( 1 , 1000 ) :	1 以上 1000 未満の整数 <A> について
for <A> in range ( <B> , 1000 ) :	<B> 以上 1000 未満の整数 <A> について
for <A> in range ( <B> , 1000 ) :	<B> 以上 1000 未満の整数 <A> について
<A> = <B> * <B> + <C> * <C>	<A> に <B> の自乗と <C> の自乗の和を代入
if <A> == <B> * <B> and <C> + <D> + <B> == 1000 :	もし <A> が <B> の自乗と等しく、かつ <C> と <D> と <B> の和が 1000 であれば
return <A> * <B> * <C>	<A> と <B> と <C> の積を返す
def <A> ( <B> , <C> , <D> ) :	<B> と <C> と <D> を引数とする関数 <A> の定義
return <A> * <A> + <B> * <B> == <C> * <C>	<A> の自乗と <B> の自乗が <C> の自乗と等しければ True 、そうでなければ False を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
return <A> * <A>	<A> の自乗を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
<A> = 0	<A> に 0 を代入する
for i in range ( <A> ) :	以下の処理を <A> 回繰り返す
<A> += <B>	<A> に <B> を足す
return <A>	<A> を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
<A> = 0	<A> に 0 を代入
for <A> in <B> :	<B> の各要素を <A> として
<A> += <B>	<A> に <B> を足す
return <A> == 1000	<A> が 1000 ならば True 、そうでなければ False を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
return sum ( <A> ) == 1000	<A> の各要素の総和が 1000 と等しければ True 、そうでなければ False を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
<A> = 1	<A> を 1 とする
for <A> in <B> :	<B> 内の全要素 <A> について
<A> *= <B>	<B> を <A> に掛ける
return <A>	<A> を返す
def <A> ( ) :	関数 <A> の定義
<A> = [ <B> ] * 2000000	<A> に <B> のみからなるリストを代入
for <A> in range ( 2 , int ( 2000000 ** 0.5 ) + 1 ) :	<A> を 2 から 2000000 の 0.5 乗までの間で変化させて繰り返し
if <A> [ <B> ] :	もし <A> の <B> 番目が真であれば
for <A> in range ( 2 * <B> , len ( <C> ) , <B> ) :	<A> を <B> の 2 倍から <C> の長さ未満まで <B> ごとに変化させて繰り返し
<A> [ <B> ] = <C>	<A> の <B> 番目に <C> を代入
<A> = [ ]	<A> に空のリストを代入
for <A> in range ( 2 , 2000000 ) :	<A> を 2 から 2000000 まで変化させて繰り返し
if <A> [ <B> ] :	もし <A> の <B> 番目が真であれば
<A> . append ( <B> )	<A> の末尾に <B> を追加
return sum ( <A> )	<A> の要素の総和を返す
def <A> ( <B> ) :	引数 <B> を取る関数 <A> の定義
<A> = [ <B> ] * <C>	<B> が <C> 個並んでいるリストを <A> に代入
for <A> in range ( 2 , int ( <B> ** 0.5 ) + 1 ) :	<A> を 2 から <B> の平方根の範囲で変化させて繰り返し
if <A> [ <B> ] :	<A> の <B> 番目が真であれば
for <A> in range ( 2 * <B> , len ( <C> ) , <B> ) :	<A> を <B> の 2 倍から <C> の長さまで <B> 単位で変化させて繰り返し
<A> [ <B> ] = <C>	<A> の <B> 番目を <C> にする
<A> = [ ]	<A> に空のリストを代入
for <A> in range ( 2 , <B> ) :	<A> を 2 以上 <B> 未満の間で増加させながら繰り返し
if <A> [ <B> ] :	もし <A> の <B> 番目が真であれば
<A> . append ( <B> )	<A> の末尾に <B> を追加
return <A>	<A> を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
<A> = <B>	<A> に <B> を代入
if <A> <  2 :	もし <A> が 2 より小さければ
return <A>	<A> を返す
elif <A> == 2 :	そうでなくて、もし <A> が 2 であれば
return <A>	<A> を返す
for <A> in range ( 2 , int ( <B> ** 0.5 ) + 1 ) :	<A> を 2 以上 <B> の平方根以下の間で繰り返し
if <A> and <B> % <C> == 0 :	もし <A> が真でかつ <B> が <C> で割り切れるなら
<A> = <B>	<A> を <B> にする
return <A>	<A> を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
<A> = 0	<A> に 0 を代入
for <A> in <B> :	<B> に含まれる各要素を <A> に代入して繰り返し
<A> += <B>	<A> に <B> を足す
return <A>	<A> を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
return sum ( <A> )	<A> 内の要素の総和を返す
def <A> ( <B> , <C> , <D> ) :	<B> , <C> , <D> を引数とする関数 <A> の定義
<A> = [ ]	<A> に空のリストを代入
while <A> <  <B> :	<A> が <B> より小さい間繰り返し
<A> . append ( <B> )	<A> の末尾に <B> を追加する
<A> += <B>	<A> に <B> を足す
return <A>	<A> を返す
def euler011 ( ) :	関数 euler001 の定義
<A> = "" "" "" . split ( )	<A> に文字列を空白文字で分割したリストを代入
<A> = [ ]	<A> に空リストを代入
for <A> in <B> :	<B> 中の各要素を順に <A> として
<A> . append ( int ( <B> ) )	<A> の末尾に <B> の表す数値を追加
<A> = 0	<A> を 0 にする
for <A> in range ( 20 ) :	0 から 20 未満の整数を順に <A> として
for <A> in range ( 20 ) :	0 から 20 未満の整数を順に <A> として
if <A> <= 16 :	もし <A> が 16 以下であれば
<A> = max ( <A> , <B> [ <C> * 20 + <D> ] * <B> [ <C> * 20 + <D> + 1 ] * <B> [ <C> * 20 + <D> + 2 ] * <B> [ <C> * 20 + <D> + 3 ] )	現在の <A> と ( <B> [ <C> * 20 + <D> ] * <B> [ <C> * 20 + <D> + 1 ] * <B> [ <C> * 20 + <D> + 2 ] * <B> [ <C> * 20 + <D> + 3 ] ) のうち大きい方を新しい <A> とする
if <A> <= 16 :	もし <A> が 16 以下であれば
<A> = max ( <A> , <B> [ <C> * 20 + <D> ] * <B> [ ( <C> + 1 ) * 20 + <D> + 1 ] * <B> [ ( <C> + 2 ) * 20 + <D> + 2 ] * <B> [ ( <C> + 3 ) * 20 + <D> + 3 ] )	現在の <A> と ( <B> [ <C> * 20 + <D> ] * <B> [ ( <C> + 1 ) * 20 + <D> + 1 ] * <B> [ ( <C> + 2 ) * 20 + <D> + 2 ] * <B> [ ( <C> + 3 ) * 20 + <D> + 3 ] ) のうち大きい方を新しい <A> とする
if 4 <= <A> and <B> <= 16 :	もし <A> が 4 以上で <B> が 16 以下であれば
<A> = max ( <A> , <B> [ <C> * 20 + <D> ] * <B> [ ( <C> + 1 ) * 20 + <D> -1 ] * <B> [ ( <C> + 2 ) * 20 + <D> -2 ] * <B> [ ( <C> + 3 ) * 20 + <D> -3 ] )	現在の <A> と ( <B> [ <C> * 20 + <D> ] * <B> [ ( <C> + 1 ) * 20 + <D> -1 ] * <B> [ ( <C> + 2 ) * 20 + <D> -2 ] * <B> [ ( <C> + 3 ) * 20 + <D> -3 ] ) のうち大きい方を新しい <A> とする
if <A> <= 16 :	もし <A> が 16 以下であれば
<A> = max ( <A> , <B> [ <C> * 20 + <D> ] * <B> [ ( <C> + 1 ) * 20 + <D> ] * <B> [ ( <C> + 2 ) * 20 + <D> ] * <B> [ ( <C> + 3 ) * 20 + <D> ] )	現在の <A> と ( <B> [ <C> * 20 + <D> ] * <B> [ ( <C> + 1 ) * 20 + <D> ] * <B> [ ( <C> + 2 ) * 20 + <D> ] * <B> [ ( <C> + 3 ) * 20 + <D> ] ) のうち大きい方を新しい <A> とする
return <A>	<A> を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> の定義
return <A> <= <B>	<A> が <B> 以下であれば True 、そうでなければ False を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> の定義
<A> = <B> - <C>	<A> に <B> と <C> の差を代入
return <A> >= 0	<A> が 0 以上であれば True 、そうでなければ False を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> の定義
return <A> <= <B>	<A> が <B> 以下であれば True 、そうでなければ False を返す
def euler011_over_or_equal_a ( <A> , <B> ) :	<A> と <B> を引数とする関数 euler011_ver_or_equal_a の定義
<A> = <B> - <C>	<A> に <B> と <C> の差を代入
return <A> <= 0	<A> が 0 以下であれば True 、そうでなければ False を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
<A> = [ ]	<A> に空リストを代入
<A> = ""	<A> に空文字列を代入
for <A> in <B> :	<B> 内の全ての要素を順に <A> として
if <A> == " " :	もし <A> が半角スペースなら
<A> . append ( <B> )	<A> の末尾に <B> を追加
<A> = ""	<A> を空文字列にする
else :	そうでなければ
<A> += <B>	<A> に <B> を加える
<A> . append ( <B> )	<A> の末尾に <B> を追加
return <A>	<A> を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
<A> = [ ]	<A> に空リストを代入
<A> = 0	<A> に 0 を代入
while <A> <  <B> :	<A> が <B> 未満の間
<A> . append ( <B> )	<A> の末尾に <B> を追加
<A> += 1	<A> に 1 を足す
return <A>	<A> を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
return list ( range ( <A> ) )	0 から <A> -1 までを順に要素として持つリストを返す
def <A> ( <B> , <C> ) :	<B> , <C> を引数とする関数 <A> の定義
return ( <A> , <B> - 1 )	<A> と <B> -1 の組を返す
def <A> ( <B> , <C> ) :	<B> , <C> を引数とする関数 <A> の定義
return ( <A> , <B> + 1 )	<A> と <B> + 1 の組を返す
def <A> ( <B> , <C> ) :	<B> , <C> を引数とする関数 <A> の定義
return ( <A> - 1 , <B> )	<A> -1 と <B> の組を返す
def <A> ( <B> , <C> ) :	<B> , <C> を引数とする関数 <A> の定義
return ( <A> + 1 , <B> )	<A> + 1 と <B> の組を返す
def <A> ( <B> , <C> ) :	<B> , <C> を引数とする関数 <A> の定義
return ( <A> - 1 , <B> - 1 )	<A> -1 と <B> -1 の組を返す
def <A> ( <B> , <C> ) :	<B> , <C> を引数とする関数 <A> の定義
return ( <A> + 1 , <B> - 1 )	<A> + 1 と <B> -1 の組を返す
def <A> ( <B> , <C> ) :	<B> , <C> を引数とする関数 <A> の定義
return ( <A> - 1 , <B> + 1 )	<A> -1 と <B> + 1 の組を返す
def <A> ( <B> , <C> ) :	<B> , <C> を引数とする関数 <A> の定義
return ( <A> + 1 , <B> + 1 )	<A> + 1 と <B> + 1 の組を返す
def <A> ( ) :	関数 <A> の定義
<A> = 1	<A> に 1 を代入
<A> = 0	<A> に 0 を代入
<A> = [ 2 ]	<A> に 2 のみからなるリストを代入
<A> = [ 1 ] * 4 + [ 0 ] * 96	<A> に 1 が 4 個と 0 が 96 個繋がったリストを代入
while <A> <  500 :	<A> が 500 未満である間
<A> = sum ( range ( 1 , <B> + 1 ) )	<A> に 1 から <B> の総和を代入
if not <A> % 2 :	もし <A> が 2 で割り切れるなら
<A> = ( int ( <B> / 2 ) , <B> + 1 )	<A> に <B> を 2 で割った商と <B> + 1 の組を代入
else :	そうでなければ
<A> = ( <B> , int ( ( <B> + 1 ) / 2 ) )	<A> に <B> と <B> + 1 を 2 で割った商の組を代入
<A> = 1	<A> に 1 を代入
for <A> in <B> :	<B> 内の各要素を <A> として
if len ( <A> ) <  <B> :	もし <A> の長さが <B> より小さければ
<A> = [ 0 ] * ( <B> - len ( <C> ) + 1 )	<A> に 0 を ( <B> - <C> の長さ + 1 ) 回繰り返したリストを代入
<A> += <B>	<A> に <B> を代入
if not <A> [ <B> ] :	もし <A> の <B> 番目が偽であれば
<A> = 1	<A> に 1 を代入
for <A> in range ( <B> [ -1 ] , <C> + 1 ) :	<B> の末尾要素から <C> までの数を順に <A> として
for <A> in range ( 2 , int ( <B> ** 0.5 ) + 1 ) :	2 から <B> の平方根までの数を順に <A> として
if <A> % <B> == 0 :	もし <A> が <B> で割り切れるなら
break	ループから抜ける
else :	ループが最後まで処理された場合
if not <A> in <B> :	<B> に <A> が含まれていなければ
<A> . append ( <B> )	<A> に <B> を追加する
for <A> in <B> :	<B> 内の各要素を <A> として
if <A> >  int ( <B> / 2 ) :	もし <A> が <B> の半分よりも大きければ
break	ループから抜ける
if <A> % <B> == 0 :	もし <A> が <B> で割り切れるなら
<A> = 1	<A> を 1 にする
<A> = <B>	<A> を <B> にする
while <A> % <B> == 0 :	<A> が <B> で割り切れる間
<A> /= <B>	<A> を <B> で割る
<A> += 1	<A> に 1 を足す
else :	ループが正常に終了した場合
<A> *= <B>	<A> に <B> を掛ける
<A> [ <B> ] = <C>	<A> の <B> 番目の要素を <C> にする
<A> *= <B> [ <C> ]	<A> に <B> の <C> 番目の要素を掛ける
<A> += 1	<A> に 1 を足す
<A> = <B>	<A> を <B> にする
return <A>	<A> を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> の定義
return <A> <  <B>	<A> が <B> より小さければ True 、そうでなければ False を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> の定義
<A> = [ ]	<A> に空リストを代入
if <A> <= 1 :	もし <A> が 1 以下であれば
<A> = 2	<A> を 2 にする
for <A> in range ( <B> , <C> + 1 ) :	<B> から <C> までの数を順に <A> として
<A> = <B>	<A> に <B> を代入
for <A> in range ( 2 , int ( <B> ** 0.5 ) + 1 ) :	2 から <B> の平方根までの数を順に <A> として
if <A> % <B> == 0 :	もし <A> が <B> で割り切れるなら
break	ループを抜ける
else :	ループが正常に終了した場合
<A> . append ( <B> )	<A> に <B> を追加する
return <A>	<A> を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> の定義
while <A> ! = 0 :	<A> が 0 でない間
<A> , <B> = <B> , <A> % <B>	<A> に <B> を、 <B> に <A> を <B> で割った余りを代入
return <A> == 1	<A> が 1 であれば True 、そうでなければ False を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> の定義
<A> = 0	<A> に 0 を代入
while <A> % <B> == 0 :	<A> が <B> で割り切れる間
<A> /= <B>	<A> を <B> で割る
<A> += 1	<A> に 1 を足す
return <A>	<A> を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
<A> = [ <B> ] * ( <C> + 1 )	<A> に <C> + 1 個の <B> からなるリストを代入
<A> = [ ]	<A> に空リストを代入
for <A> in range ( 2 , int ( <B> ** 0.5 ) + 1 ) :	2 から <B> の平方根までの数を順に <A> として
if <A> [ <B> ] :	もし <A> の <B> 番目が真であれば
for <A> in range ( <B> + <B> , <C> + 1 , <B> ) :	<B> の倍から <C> までの数を <B> 個飛ばしで順に <A> として
<A> [ <B> ] = <C>	<A> の <B> 番目を <C> にする
for <A> in range ( 2 , <B> + 1 ) :	2 から <B> までの数を順に <A> として
if <A> [ <B> ] :	もし <A> の <B> 番目が真なら
<A> . append ( <B> )	<A> の末尾に <B> を追加する
<A> = [ ]	<A> に空リストを代入
for <A> in <B> :	<B> 内の各要素を順に <A> として
if <A> % <B> == 0 :	もし <A> が <B> で割り切れるなら
<A> = <B>	<A> を <B> とする
<A> = 0	<A> を 0 とする
while <A> % <B> == 0 :	<A> が <B> で割り切れる間
<A> /= <B>	<A> を <B> で割る
<A> += 1	<A> に 1 を足す
else :	ループが終了したら
<A> . append ( ( <B> , <C> ) )	<B> と <C> の組を <A> に追加する
return <A>	<A> を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> を定義
return sum ( range ( 1 , <A> + 1 ) )	1 から <A> までの整数の総和を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> を定義
<A> = 0	<A> に 0 を代入
<A> = 1	<A> に 1 を代入
while <A> <= <B> :	<A> が <B> 以下の間繰り返し
<A> += <B>	<A> に <B> を足す
<A> += 1	<A> に 1 を足す
return <A>	<A> を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> を定義
<A> = 1	<A> に 1 を代入
for <A> in <B> :	<B> の各要素を <A> として
<A> *= ( <B> + 1 )	<A> に <B> + 1 を掛ける
return <A>	<A> を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> を定義
return not <A>	<A> が偽であれば True 、そうでなければ False を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> を定義
return len ( <A> ) == 0	<A> の長さが 0 であれば True 、そうでなければ False を返す
def <A> ( ) :	関数 <A> の定義
<A> = [ ]	<A> に空のリストを代入
<A> = str ( sum ( <B> ) )	<A> に <B> の要素の総和の文字列表現を代入
<A> = ""	<A> に空文字列を代入
for <A> , <B> in enumerate ( <C> ) :	<B> を <C> の各要素、 <A> をその番号として
if <A> <  10 :	もし <A> が 10 未満であれば
<A> += <B>	<A> に <B> を追加
return <A>	<A> を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> を定義
<A> = ""	<A> に空文字列を代入
for <A> , <B> in enumerate ( <C> ) :	<B> を <C> の各要素、 <A> をその番号として
if <A> <  <B> :	もし <A> が <B> 未満であれば
<A> += <B>	<A> に <B> を追加
return <A>	<A> を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> を定義
<A> = 0	<A> に 0 を代入
for <A> in range ( <B> ) :	<B> 未満の非負整数を順に <A> として
<A> += <B> [ <C> ]	<A> に <B> の <C> 番目を足す
return <A>	<A> を返す
def <A> ( ) :	関数 <A> の定義
<A> = 10 ** 6	<A> に 10 の 6 乗を代入
<A> = [ -1 ] * <B>	<A> に <B> 個の -1 を要素とするリストを代入
<A> [ 1 ] = 0	<A> の 2 番目の要素を 0 とする
for <A> in range ( 2 , <B> ) :	2 から <B> 未満の各数を順に <A> として
<A> = [ ]	<A> に空リストを代入
while <A> >= <B> or <C> [ <A> ] == -1 :	<A> が <B> 以上か <C> の <A> 番目が -1 である間
<A> . append ( <B> )	<A> の末尾に <B> を追加
<A> = int ( <A> / 2 ) if <A> % 2 == 0 else <A> * 3 + 1	<A> が 2 で割り切れる場合 <A> を 2 で割った商を、そうでない場合 <A> の 3 倍に 1 を足した数を <A> に代入
<A> = <B> [ <C> ]	<A> に <B> の <C> 番目の要素を代入
for <A> in reversed ( <B> ) :	<B> の要素を末尾から順に <A> として繰り返し
<A> += 1	<A> に 1 を足す
if <A> <  <B> :	もし <A> が <B> 未満なら
<A> [ <B> ] = <C>	<A> の <B> 番目を <C> にする
<A> = 0	<A> に 0 を代入
<A> = 0	<A> に 0 を代入
for <A> , <B> in enumerate ( <C> ) :	<C> の各要素を <B> 、 <A> を番号として繰り返し
if <A> <  <B> :	もし <A> が <B> より小さい場合
<A> = <B>	<A> を <B> にする
<A> = <B>	<A> を <B> にする
return <A>	<A> を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> を定義
return int ( <A> / 2 ) if <A> % 2 == 0 else <A> * 3 + 1	<A> が 2 で割り切れるなら <A> を 2 で割った商を、そうでないなら <A> の 3 倍に 1 を足した数を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> を定義
<A> = 0	<A> に 0 を代入
while <A> ! = 1 :	<A> が 1 でない間
<A> = int ( <A> / 2 ) if <A> % 2 == 0 else <A> * 3 + 1	<A> が 2 で割り切れるなら <A> を 2 で割った商を、そうでないなら <A> の 3 倍に 1 を足した数を新しい <A> とする
<A> += 1	<A> に 1 を足す
return <A>	<A> を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> を定義
<A> = [ ]	<A> を空リストとする
for i in range ( <A> ) :	以下の処理を <A> 回繰り返す
<A> . append ( <B> )	<A> の末尾に <B> を追加する
return <A>	<A> を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> を定義
<A> = [ ]	<A> を空リストとする
for <A> in range ( len ( <B> ) ) :	<B> の各要素の番号を順に <A> として
<A> . append ( ( <B> , <C> [ <B> ] ) )	<A> に <B> と <C> の <B> 番目からなる組を追加する
return <A>	<A> を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> を定義
<A> = [ ]	<A> を空リストとする
for <A> in reversed ( <B> ) :	<B> の末尾要素から順に <A> として
<A> . append ( <B> )	<A> の末尾に <B> を追加する
return <A>	<A> を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> を定義
<A> = [ ]	<A> を空とする
for <A> in range ( <B> , <C> ) :	<B> 以上 <C> 未満の整数を小さい方から <A> として
<A> . append ( <B> )	<A> の末尾に <B> を追加する
return <A>	<A> を返す
def <A> ( ) :	関数 <A> の定義
<A> = [ 1 ] * 21	<A> を 21 個の 1 からなるリストとする
for <A> in range ( 20 ) :	20 未満の非負整数を小さい方から順に <A> として
<A> [ <B> + 1 ] = <A> [ <B> ] * ( <B> + 1 )	<A> の <B> + 1 番目に <A> の <B> 番目と <B> + 1 の積を代入
dinomials = [ 0 ] * 21	dinominals を 0 が 21 個並んだリストとする
for <A> in range ( 21 ) :	21 未満の非負整数を小さい方から順に <A> として
dinomials [ <A> ] = int ( <B> [ 20 ] / ( <B> [ <A> ] * <B> [ 20 - <A> ] ) )	<B> の 20 番目の要素を <A> 番目の要素と 20 - <A> 番目の要素の積で割った結果を dinominals の <A> 番目に格納する
for <A> in range ( 20 ) :	20 未満の非負整数 <A> を小さい方から順に調べる
for <A> in range ( 20 ) :	20 未満の非負整数 <A> を小さい方から順に調べる
dinomials [ <A> ] += dinomials [ <A> + 1 ]	dinominals の <A> 番目に <A> + 1 番目の要素を足す
return dinomials [ 0 ]	dinominals の最初の要素を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> の定義
<A> = [ 1 ] * ( <B> + 1 )	<A> を 1 が <B> + 1 個並んだリストとする
for x in range ( <A> ) :	<A> 未満の非負整数 <A> を小さい方から順に
<A> [ <B> + 1 ] = <A> [ <B> ] * ( <B> + 1 )	<A> の <B> + 1 番目の要素に <B> 番目の要素と <B> + 1 の積を代入
return int ( <A> [ <B> ] / ( <A> [ <C> ] * <A> [ <B> - <C> ] ) )	<A> の <B> 番目の要素を <C> 番目と <B> - <C> 番目の要素の積で割った結果を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
<A> = [ 1 ] * ( <B> + 1 )	<A> に 1 が <B> + 1 個繋がったリストを格納
for <A> in range ( <B> ) :	<B> 未満の非負整数 <A> を小さい方から順に
<A> [ <B> + 1 ] = <A> [ <B> ] * ( <B> + 1 )	<A> の <B> + 1 番目の要素に <B> 番目の要素と <B> + 1 積を代入する
return <A>	<A> を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
if <A> == 1 :	もし <A> が 1 と等しければ
return [ 1 ]	1 のみからなるリストを返す
else :	そうでなければ
<A> = <B> ( <C> - 1 )	<B> に <C> -1 を渡した結果を <A> とする
<A> = [ <B> [ 0 ] , <B> [ -1 ] ]	<A> を <B> の最初の要素と末尾の要素からなるリストとする
for <A> in range ( <B> - 2 ) :	<B> -2 未満の非負整数 <A> を小さい方から順に調べる
<A> . insert ( <B> + 1 , <C> [ <B> ] + <C> [ <B> + 1 ] )	<A> の <B> + 1 番目に <C> の <B> 番目と <B> + 1 番目の要素の和を追加する
return <A>	<A> を返す
def <A> ( ) :	関数 <A> の定義
<A> = str ( 2 ** 1000 )	<A> に 2 の 1000 乗の文字列表現を格納
<A> = 0	<A> に 0 を代入
for <A> in <B> :	<B> の各要素を前から順に <A> として
<A> += int ( <B> )	<A> に <B> を表す整数を足す
return <A>	<A> を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
<A> = str ( <B> )	<A> に <B> の文字列表現を格納
<A> = 0	<A> に 0 を代入
for <A> in <B> :	<B> の各要素を前から順に <A> として
<A> += int ( <B> )	<A> に <B> の表す整数を足す
return <A>	<A> を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
<A> = [ <B> % 10 ]	<A> を <B> を 10 で割った余りのみからなるリストとする
while int ( <A> / 10 ) >  0 :	<A> を 10 で割った整数部分が 0 でない間繰り返し
<A> = int ( <A> / 10 )	<A> を 10 で割った整数部分を新しい <A> とする
<A> . insert ( 0 , <B> % 10 )	<A> の先頭に <B> を 10 で割った余りを追加する
return <A>	<A> を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> の定義
<A> = 1	<A> を 1 とする
<A> = 0	<A> を 0 とする
while <A> <  <B> :	<A> が <B> より小さい間
<A> *= <B>	<A> に <B> を掛ける
<A> += 1	<A> に 1 を足す
return <A>	<A> を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> の定義
return <A> ** <B>	<A> の <B> 乗を返す
def <A> ( ) :	関数 <A> の定義
<A> = 0	<A> に 0 を代入
for <A> in range ( 1 , 1001 ) :	1 から 1001 未満の数を順に <A> として
if <A> <= 20 :	もし <A> が 20 以下であれば
<A> += len ( <B> [ <C> ] )	<A> に <B> の <C> 番目の要素の長さを足す
elif len ( str ( <A> ) ) == 2 :	そうでなくて、もし <A> の文字列表現の長さが 2 であれば
<A> += len ( twoword [ int ( <B> / 10 ) ] )	toword の <B> / 10 番目の要素の長さを <A> に足す
<A> += len ( <B> [ <C> % 10 ] )	<B> の <C> % 10 番目の要素の長さを <A> に足す
elif len ( str ( <A> ) ) == 3 :	そうでなくて、もし <A> の文字列表現の長さが 3 であれば
<A> += len ( <B> [ int ( <C> / 100 ) ] )	<B> の <C> / 100 番目の要素の長さを <A> に足す
<A> += len ( "hundredand" )	hundredand の文字数を <A> に足す
<A> = <B> % 100	<A> に <B> を 100 で割った余りを代入
if <A> ! = 0 and <A> <= 20 :	もし <A> が 0 でなくて、かつ <A> が 20 以下であれば
<A> += len ( <B> [ <C> ] )	<A> に <B> の <C> 番目の要素の長さを足す
elif <A> == 0 :	そうでなくて、もし <A> が 0 であれば
<A> -= 3	<A> から 3 を引く
else :	いずれでもなければ
<A> += len ( twoword [ int ( <B> / 10 ) ] )	<A> に toword の <B> / 10 番目の要素の長さを足す
<A> += len ( <B> [ <C> % 10 ] )	<A> に <B> の <C> % 10 番目の要素の長さを足す
else :	上記のいずれでもなければ
<A> += len ( "onethousand" )	<A> に "onethousand" の文字数を足す
return <A>	<A> を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
<A> = str ( <B> )	<A> を <B> の文字列表現とする
<A> = [ ]	<A> を空リストとする
for <A> in <B> :	<B> の各要素を前から順に <A> として
<A> . append ( int ( <B> ) )	<A> の末尾に <B> の表す整数を追加
return <A>	<A> を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> を定義
<A> = 1	<A> に 1 を代入
while int ( <A> / 10 ) >  0 :	<A> を 10 で割った整数部分が 0 より大きい間
<A> /= 10	<A> を 10 で割る
<A> += 1	<A> に 1 を足す
return <A>	<A> を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> を定義
return <A> [ <B> % 10 ]	<A> の <B> % 10 番目を返す
def <A> ( <B> , <C> ) :	<B> と <C> を引数とする関数 <A> の定義
return <A> == <B>	<A> と <B> が等しければ True 、そうでなければ False を返す
def euler017_divid_integer_part ( <A> , <B> ) :	<A> と <B> を引数とする関数 euler -17_ divid_inateger_part を定義
return int ( <A> / <B> )	<A> を <B> で割った整数部分を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
<A> = 0	<A> に 0 を代入
for <A> in <B> :	<B> 内の各要素を <A> として
<A> += 1	<A> に 1 を足す
return <A>	<A> を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> を定義
return len ( <A> )	<A> の長さを返す
def <A> ( ) :	関数 <A> の定義
for <A> in reversed ( range ( len ( <B> ) - 1 ) ) :	<B> の長さ -1 未満の非負整数を大きい方から <A> として
for <A> in range ( len ( <B> [ <C> ] ) ) :	<B> の <C> 番目の長さ未満の非負整数を小さい方から <A> として
<A> [ <B> ] [ <C> ] += max ( <A> [ <B> + 1 ] [ <C> ] , <A> [ <B> + 1 ] [ <C> + 1 ] )	<A> [ <B> + 1 ] [ <C> ] と <A> [ <B> + 1 ] [ <C> + 1 ] の大きい方を <A> [ <B> ] [ <C> ] に足す
return <A> [ 0 ] [ 0 ]	<A> の先頭要素の先頭要素を返す
def <A> ( ) :	関数 <A> の定義
<A> = 365	<A> に 365 を代入
<A> = 0	<A> に 0 を代入
for <A> in range ( 1901 , 2001 ) :	1901 以上 2001 未満の整数を順に <A> として
for <A> , <B> in enumerate ( <C> ) :	<B> を <C> の各要素、 <A> をその番号として
if <A> % 7 == 6 :	もし <A> を 7 で割った余りが 6 であれば
<A> += 1	<A> に 1 を足す
<A> += <B>	<A> に <B> を足す
if ( <A> % 400 == 0 or ( ( not <A> % 100 == 0 ) and <A> % 4 == 0 ) ) and <B> == 1 :	<A> が 400 で割り切れるか、 100 で割り切れずに 4 で割り切れ、さらに <B> が 1 である場合、
<A> += 1	<A> に 1 を足す
return <A>	<A> を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> を定義
return <A> % 400 == 0 or ( ( not <A> % 100 == 0 ) and <A> % 4 == 0 )	<A> が 400 で割り切れるか、 100 で割り切れずに 4 で割り切れる場合 True 、そうでない場合 False を返す。
def <A> ( <B> , <C> , <D> ) :	<B> と <C> と <D> を引数とする関数 <A> を定義
if <A> <= 2 :	もし <A> が 2 以下であれば
<A> += 12	<A> に 12 を足す
<A> -= 1	<A> から 1 を引く
<A> = 0	<A> に 0 を代入
if 1582 <= <A> :	もし <A> が 1582 以上であれば
<A> = -2 * int ( <B> / 100 ) + int ( int ( <B> / 100 ) / 4 )	<A> に <B> / 100 の整数部分の -2 倍と <B> / 100 の整数部分を 4 で割った整数部分の和を代入
else :	そうでなければ
<A> = -1 * int ( <B> / 100 ) + 5	<A> に <B> を 100 で割った整数部分の -1 倍に 5 を足したものを代入
<A> = ( <B> + int ( 26 * ( <C> + 1 ) / 10 ) + ( <D> % 100 ) + int ( ( <D> % 100 ) / 4 ) + <E> ) % 7	<A> に <B> 、 26 ( <C> + 1 ) / 10 の整数部分、 yy を 100 で割った余り、 <D> % 100 / 4 の整数部分、 <E> を足した結果を代入
return <A> [ <B> ]	<A> の <B> 番目を返す
def <A> ( ) :	関数 <A> の定義
<A> = 1	<A> に 1 を代入
for <A> in range ( 100 ) :	100 未満の非負整数を小さい方から順に <A> として
<A> *= ( <B> + 1 )	<A> に <B> + 1 を掛ける
<A> = str ( <B> )	<A> に <B> の文字列表現を代入
<A> = [ ]	<A> に空リストを代入
for <A> in <B> :	<B> の各要素を順に <A> として
<A> . append ( int ( <B> ) )	<A> の末尾にに <B> の表す整数を追加
return sum ( <A> )	<A> の全要素の総和を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
<A> = 1	<A> に 1 を代入
for <A> in range ( <B> ) :	<B> 未満の非負整数を小さい方から順に <A> として
<A> *= ( <B> + 1 )	<A> に <B> + 1 を掛ける
return <A>	<A> を返す
def <A> ( <B> ) :	<B> を引数とする関数 <A> の定義
<A> = str ( <B> )	<A> に <B> の文字列表現を代入
<A> = 0	<A> に 0 を代入
for <A> in <B> :	<B> の各要素を順に <A> として
<A> += int ( <B> )	<A> に <B> の表す整数を足す
return <A>	<A> を返す
