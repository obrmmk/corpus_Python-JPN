os . kill ( os . getpid ( ) , <A> . SIGUSR1 )	send a <A> signal.SIGUSR1 to the current process
os . getpid ( )	the current process
os . kill ( <A> , <B> . SIGUSR1 )	send a <B> signal.SIGUSR1 to <A>
bytes . fromhex ( <A> ) . decode ( 'utf-8' )	decode a hex string <A> to UTF -8
bytes . fromhex ( <A> ) . decode ( <B> )	decode a hex string <A> to <B>
<A> ( x == <B> [ 0 ] for x <C> <B> )	check if <A> elements <C> list <B> are identical
print ( '%*s : %*s'   % ( <A> , <B> , <A> , <C> ) )	format number of spaces between strings <B> , : and <C> to be <A>
res = { k : v for k , v <A> list ( <B> . items ( ) ) if v is not <C> }	get rid of <C> values <A> dictionary <B>
res = dict ( ( k , v ) for k , v <A> <B> . items ( ) if v is not <C> )	get rid of <C> values <A> dictionary <B>
subprocess . check_output ( <A> , shell = True )	capture final output of a chain of system commands <A>
'' . join ( [ 'a' , 'b' , 'c' ] )	concatenate a list of strings ['a', 'b', 'c']
pd . Series ( list ( set ( <A> ) . intersection ( set ( <B> ) ) ) )	find intersection data between series <A> and series <B>
<A> . send ( 'HTTP/1.0 200 OK\r\n' )	sending http headers to <A>
<A> . send ( <B> )	sending <B> to <A>
then = <A> . datetime . strptime ( <B> , '%Y-%m-%d' ) . date ( )	format a <A> string <B> to extract date only
<A> . split ( '\n' )	split a multi - line string <A> into separate strings
<A> . split ( <B> )	split a multi - line string <A> by new line character <B>
""""" <A> """" . join ( str ( x ) for x in <B> )"	concatenate elements of list <B> by a colon <A>
<A> . objects . filter ( ) [ : 1 ] . get ( )	get the first object from a queryset in django model <A>
a . sum ( axis = 1 )	calculate sum over all rows of 2 D numpy array
<A> . simplefilter ( <B> )	enable <A> using action <B>
print ( <A> . join ( map ( str , <B> ) ) )	concatenate items of list <B> with a space <A>
subprocess . call ( [ 'python.exe' , <A> , <B> ] )	run script <A> with argument <B> on terminal using python executable
<A> = <B> ( <C> . replace ( ',' , '' ) )	convert a string <C> with dot and comma into a <B> number <A>
float ( <A> . replace ( ',' , '' ) )	convert a string <A> with dot and comma into a floating number
sys . path . append ( '/path/to/whatever' )	set pythonpath in python script .
re . split ( <A> , <B> )	split string <B> using a regex <A>
<A> = <B> ( <C> , 'a' )	<B> a <A> <C> in append mode
urllib . request . urlretrieve ( 'http://www.example.com/songs/mp3.mp3' , 'mp3.mp3' )	"download a file ""http://www.example.com/songs/mp3.mp3"" over HTTP and save to ""mp3.mp3"""
r = requests . get ( <A> )	download a file <A> over HTTP
<A> . add_argument ( <B> , <C> = 'version' , <D> = <E> )	argparse add argument with flag <B> and <D> <C> of <E> to <A> <A>
{ i : <A> [ i ] for i in <A> if i != <B> }	remove key <B> from dictionary <A>
pd . merge ( <A> , <B> , on = [ 'key' ] , suffixes = ( <C> , <D> ) )	"create new DataFrame object by merging columns ""key"" of dataframes <A> and <B> and rename the columns from dataframes <A> and <B> with suffix <C> and <D> respectively"
<A> . split ( ' ' , <B> )	split a string <A> by space with <B> splits
<A> ( 'Enter your input:' )	read keyboard - <A>
<A> . run ( <B> = True )	enable <B> mode on Flask application <A>
pickle . dump ( <A> , open ( <B> , 'wb' ) )	python save list <A> to file object <B>
<A> . tensordot ( <B> , <C> , axes = [ 1 , 1 ] ) . swapaxes ( 0 , 1 )	Multiply a matrix <B> with a 3 d tensor <C> in <A>
numpy . zeros ( ( <A> , <A> , <A> ) )	create <A> d array of zeroes of size (3,3,3)
""""" "" "" """" . join ( <A> . split ( ' ' ) [ : -1 ] )"	cut off the last word of a sentence <A>
<A> = np . asarray ( <A> ) . reshape ( 1 , -1 ) [ ( 0 ) , : ]	convert scalar <A> to array
<A> ( <A> ( i ) if isinstance ( i , <B> ) else i for i in <C> )	<A> all elements of nested <B> <C>
struct . unpack ( '!f' , <A> . decode ( 'hex' ) ) [ 0 ]	convert hex string <A> to a float number
<A> . update ( ( x , y * <B> ) <C> x , y <D> list ( <A> . items ( ) ) )	multiple each value by <B> <C> all keys <D> a dictionary <A>
subprocess . call ( <A> , shell = True )	running bash script <A>
""""" <A> """" . join ( <B> )"	join elements of list <B> with a comma <A>
<A> = ',' . join ( map ( str , <A> ) )	make a comma - separated string from a list <A>
<A> ( reversed ( <A> ( range ( <B> ) ) ) )	reverse the <A> that contains 1 to <B>
print ( <A> . replace ( <B> , '' ) )	remove substring <B> from a string <A>
""""" ""."" """" . join ( <A> . split ( <B> ) [ : : -1 ] )"	reverse the order of words , delimited by <B> , in string <A>
datetime . datetime . fromtimestamp ( <A> ) . strftime ( <B> )	convert epoch time represented as milliseconds <A> to string using format <B>
<A> . strftime ( <B> , <A> . gmtime ( 1236472051807 / 1000.0 ) )	parse milliseconds epoch <A> '1236472051807' to format <B>
( datetime . datetime . now ( ) - datetime . timedelta ( <A> = <B> ) ) . date ( )	get the date <B> <A> before the current date
print ( <A> ( row [ <B> ] for row <C> <D> ) )	<A> elements at index <B> of each list <C> list <D>
[ <A> ( row [ i ] for row in <B> ) for i in range ( len ( <B> [ 0 ] ) ) ]	<A> columns of a list <B>
<A> . b64encode ( bytes ( <B> , 'utf-8' ) )	encode binary string <B> to <A> code
dict ( ( k , [ d [ k ] for d <A> <B> ] ) for k <A> <B> [ 0 ] )	combine list of dictionaries <B> with the same keys <A> each list to a single dictionary
{ <A> : [ d [ <A> ] for d in <B> ] for <A> in <B> [ 0 ] }	merge a nested dictionary <B> into a flat dictionary by concatenating nested values with the same key <A>
[ k for k , v <A> <B> ( Counter ( <C> ) . items ( ) ) if v >  1 ]	identify duplicate values <A> <B> <C>
sys . path . insert ( 1 , os . path . join ( os . path . dirname ( <A> ) , <B> ) )	insert directory <B> into directory <A>
<A> <B> . append ( os <B> . join ( os <B> . dirname ( __file__ ) , <C> ) )	modify <A> <B> for python module <C>
"db . execute ( ""inSERT inTO present VALUES('test2', ?, 10)"" , ( None , ) )"	insert a 'None' value into a SQLite3 table .
[ image for menuitem in <A> for image in menuitem ]	flatten list <A>
<A> . extend ( <B> )	append elements of <A> set <B> to <A> list <A>
np . savetxt ( 'c:\\data\\np.txt' , <A> . values , fmt = '%d' )	write the data of dataframe <A> into text file np.txt
<A> . to_csv ( <B> , header = None , index = None , sep = ' ' , mode = 'a' )	write content of DataFrame <A> into text file <B>
print ( <A> . rpartition ( <B> ) [ 0 ] )	split a string <A> by last occurrence of character <B>
print ( x . rsplit ( <A> , 1 ) [ 0 ] )	get the last part of a string before the character <A>
ftp . storlines ( 'STOR '   + filename , open ( filename , 'r' ) )	upload file using FTP
"browser . execute_script ( ""document.getElementById('XYZ').value+='1'"" )"	add one to the hidden web element with id 'XYZ' with selenium python script
np . maximum ( [ 2 , 3 , 4 ] , [ 1 , 5 , 2 ] )	create array containing the maximum value of respective elements of array [2, 3, 4] and array [1, 5, 2]
<A> ( <B> [ <C> : ] + <B> [ : <C> ] )	<A> a list <B> and move first <C> elements to the end of the list
[ int ( 1000 * <A> . random ( ) ) for i in range ( 10000 ) ]	create a <A> list of integers
db . GqlQuery ( <A> , foo . key ( ) )	Google App Engine execute GQL query <A> with parameter foo.key()
df . b . str . contains ( '^f' )	filter rows in pandas starting with alphabet 'f' using regular expression .
<A> ( '\n' . join ( '\t' . join ( str ( col ) for col in row ) for row in <B> ) )	<A> a 2 dimensional list <B> as a table with delimiters
<A> . set_index ( list ( 'BC' ) ) . drop ( tuples , errors = 'ignore' ) . reset_index ( )	pandas : delete rows in dataframe <A> based on multiple columns values
""""" ""({:d} goals, ${:d})"" """" . format ( self . goals , self . penalties )"	format the variables self.goals and self.penalties using string formatting
""""" <A> """" . format ( self . goals , self . penalties )"	format string <A> with variables goals and penalties
""""" <A> """" . format ( self )"	format string <A>
[ int ( '' . join ( str ( d ) for d in x ) ) for x in <A> ]	convert list of lists <A> to list of integers
[ '' . join ( str ( d ) for d <A> x ) for x <A> <B> ]	combine elements of each list <A> list <B> into digits of a single integer
<A> = [ int ( '' . join ( [ str ( y ) for y in x ] ) ) for x in <A> ]	convert a list of lists <A> to list of integers
<A> . write ( <B> . join ( <C> ) )	write the elements of list <C> concatenated by special character <B> to file <A>
[ x for x in [ 'AAT' , 'XAC' , 'ANT' , 'TTA' ] if <A>   not in x and <B>   not in x ]	remove an element from a list based on a predicate <A> or <B>
<A> = re . sub ( '\\b(\\w+)( \\1\\b)+' , '\\1' , <A> )	remove duplicate words from a string <A> using regex
df . astype ( bool ) . sum ( axis = 1 )	count non zero values in each column in pandas data frame
re . search ( <A> , <B> )	search for string that matches regular expression pattern <A> in string <B>
""""" ""QH QD JC KD JS"" """" . split ( )"	split string 'QH QD JC KD JS' into a list on white spaces
print ( re . search ( <A> , <B> ) . group ( 0 ) )	search for occurrences of regex pattern <A> in xml string <B>
open ( <A> , 'w' ) . close ( )	erase all the contents of a file <A>
<A> . datetime . strptime ( string_date , <B> )	convert a string into <A> using the format <B>
[ <A> for <A> , item in enumerate ( <B> ) if item [ 0 ] == <C> ]	find the <A> of a list with the first element equal to <C> within the list of lists <B>
re . sub ( '[^\\sa-zA-Z0-9]' , '' , <A> ) . lower ( ) . strip ( )	lower a string <A> and remove non - alphanumeric characters aside from space
re . sub ( '(?!\\s)[\\W_]' , '' , <A> ) . lower ( ) . strip ( )	remove all non - alphanumeric characters except space from a string <A> and lower it
plt . plot ( x , y , label = 'H\u2082O' )	subscript text 'H20' with '2' as subscripted in matplotlib labels for arrays 'x' and 'y' .
plt . plot ( x , y , label = '$H_2O$' )	subscript text 'H20' with '2' as subscripted in matplotlib labels for arrays 'x' and 'y' .
[ x for x in <A> <B> len ( x ) == <C> ]	loop over a list <A> <B> sublists length equals <C>
<A> = [ <B> ( ) for _ in range ( <C> ) ]	initialize a list <A> of <C> objects <B> ( )
<A> = [ <B> ( ) for i in range ( <C> ) ]	create list <A> containing <C> instances of object <B>
self . driver . find_element_by_css_selector ( '.someclass a' ) . get_attribute ( <A> )	get the content of child tag with <A> attribute whose parent has css someclass
<A> . merge ( <B> , <C> = <D> )	joining data from dataframe <A> with data from dataframe <B> based <C> matching values of column <D> in both dataframes
'first string is: %s, second one is: %s'   % ( <A> , 'geo.tif' )	use %s operator to print variable values <A> inside a string
distutils . dir_util . mkpath ( <A> )	check if a directory <A> exists and create it if necessary
re . sub ( '\\bH3\\b' , <A> , text )	replace a separate word 'H3' by <A> in a string 'text'
re . sub ( '\\D' , <A> , <B> )	substitute ASCII letters in string <B> with empty string <A>
""""" """" """" . join ( [ x for x in <A>   if x . isdigit ( ) ] )"	get digits only from a string <A> using lambda function
print ( <A> . find ( 'name' ) . string )	"access a tag called ""name"" in beautifulsoup <A>"
<A> = dict ( ( record [ '_id' ] , record ) for record <B> <C> )	get a dictionary <A> of key - value pairs <B> PyMongo <C> <C>
np . concatenate ( ( <A> , <B> ) )	create new matrix object by concatenating data from matrix <A> and matrix <B>
np . vstack ( ( <A> , <B> ) )	concat two matrices <A> and <B> in numpy
os . stat ( <A> ) . st_size	get the characters count in a file <A>
<A> . count ( 'a' )	"count the occurrences of item ""a"" in list <A>"
Counter ( <A> )	count the occurrences of items in list <A>
[ [ x , <A> . count ( x ) ] for x <B> set ( <A> ) ]	count the occurrences of items <B> list <A>
dict ( ( ( x , <A> . count ( x ) ) for x <B> set ( <A> ) ) )	count the occurrences of items <B> list <A>
<A> . count ( 'b' )	"count the occurrences of item ""b"" in list <A>"
shutil . copy ( <A> , <B> )	copy file <A> to directory <B>
max ( k for k , v <A> <B> . items ( ) if v != 0 )	find the key associated with the largest value <A> dictionary <B> whilst key is non - zero value
( k for k , v <A> <B> . items ( ) if v != <C> )	get the largest key whose not associated with value of <C> <A> dictionary <B>
max ( k for k , v <A> <B> . items ( ) if v != 0 )	get the largest key <A> a dictionary <B> with non - zero value
<A> . seek ( 0 )	put the curser at beginning of the <A>
<A> [ <B> ] = np . where ( <A> [ <C> ] . isnull , <A> [ <D> ] , <A> [ <C> ] )	combine values from column <D> and column <C> of dataframe <A> into column <B> of datafram <A>
del <A> [ <B> ]	remove key <B> from dictionary <A>
<A> . objects . update ( timestamp = F ( <B> ) + timedelta ( days = 36524.25 ) )	Update datetime field in <A> to be the existing <B> plus 100 years
[ 'it' ] + [ 'was' ] + [ 'annoying' ]	merge list ['it'] and list ['was'] and list ['annoying'] into one list
str ( int ( <A> ) + 1 ) . zfill ( len ( <A> ) )	increment a value with leading zeroes in a number <A>
all ( <A> . index [ : -1 ] <= <A> . index [ 1 : ] )	check if a pandas dataframe <A> ' s index is sorted
<A> ( <B> )	convert tuple <B> to <A>
<A> ( l )	convert list t to <A>
<A> = map ( <B> , <A> )	convert tuple <A> to <B>
<A> . pprint ( <B> , <C> )	send the output of <A> object <B> to file <C>
df . loc [ df [ <A> ] ]	get index of rows in column <A>
<A> . iloc [ np . flatnonzero ( <A> [ <B> ] ) ]	create a list containing the indexes of rows where the value of column <B> in dataframe <A> are equal to True
df [ df [ <A> ] == <B> ] . index . tolist ( )	get list of indexes of rows where column <A> values match <B>
<A> [ <A> [ <B> ] ] . index . tolist ( )	get index of rows in dataframe <A> which column <B> matches value True
os . chdir ( <A> )	change working directory to the directory <A>
"<A> . execute ( ""inSERT inTO test VALUES (?, 'bar')"" , ( <B> , ) )"	insert data from a string <B> to sqlite db <A>
""""" <A> """" . decode ( 'string_escape' )"	decode string <A> into a normal string
<A> . decode ( 'string_escape' )	convert a raw string <A> into a normal string
<A> . decode ( 'unicode_escape' )	convert a raw string <A> into a normal string
[ m . group ( 0 ) for m in re . finditer ( '(\\d)\\1*' , <A> ) ]	split a string <A> with into all strings of repeated characters
plt . scatter ( np . random . randn ( 100 ) , np . random . randn ( 100 ) , facecolors = 'none' )	scatter a plot with x , y position of np.random.randn(100) and face color equal to none
plt . plot ( np . random . randn ( 100 ) , np . random . randn ( 100 ) , 'o' , mfc = 'none' )	do a scatter plot with empty circles
soup . find ( 'div' , <A> = <B> ) . decompose ( )	remove a div with a <A> <B> using beautifulsoup
df [ df [ <A> ] . str . contains ( <B> ) ]	filter rows containing key word <B> in column <A>
<A> . reset_index ( <B> = <C> , inplace = True )	convert index at <B> <C> into a column in dataframe <A>
<A> [ <B> ] = <A> . index	add indexes in a data frame <A> to a column <B>
df . reset_index ( level = [ 'tick' , 'obs' ] )	convert pandas index in a dataframe to columns
[ x [ : : -1 ] for x in b ]	get reverse of list items from list 'b' using extended slicing
np . array ( [ zip ( x , y ) for x , y <A> zip ( <B> , <C> ) ] )	join each element <A> array <B> with element at the same index <A> array <C> as <B> tuple
np . array ( <A> ( <B> . ravel ( ) , <C> . ravel ( ) ) , dtype = 'i4,i4' ) . reshape ( <B> . shape )	<A> two 2 - d arrays <B> and <C>
""""" "","" """" . join ( [ str ( i ) for i in <A> ] )"	convert list <A> into a comma separated string
requests . post ( url , <A> = <B> , headers = HEADERS_DICT , auth = ( <C> , <D> ) )	send a post request with raw <A> <B> and basic authentication with <C> and <D>
'abcd}def}' . rfind ( <A> )	"find last occurrence of character <A> in string ""abcd}def}"""
print ( [ item for item in [ 1 , 2 , 3 ] ] )	Iterate ove list [1, 2, 3] using list comprehension
[ ( x [ <A> ] , x [ <B> ] ) for x in <C> ]	extract all the values with keys <A> and <B> from a list of dictionaries <C> to list of tuples
print ( os . path . splitext ( os . path . basename ( <A> ) ) [ 0 ] )	get the filename without the extension from file <A>
dict ( <A> [ i : i + 2 ] for i <B> range ( 0 , len ( <A> ) , 2 ) )	create a dictionary by adding each two adjacent elements <B> tuple <A> as key / value pair to it
values = sum ( [ [ 'A' , 'B' , 'C' ] , [ 'D' , 'E' , 'F' ] , [ 'G' , 'H' , 'I' ] ] , [ ] )	create a list containing flattened list [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]
<A> = <A> [ ( <A> [ <B> ] >= <C> ) &  ( <A> [ <B> ] <= <D> ) ]	select rows in a dataframe <A> column <B> between two values <C> and <D>
<A> . replace ( { <B> : <C> } , regex = True )	replace all occurences of newlines <B> with <C> in dataframe <A>
<A> . replace ( { <B> : <C> } , regex = True )	replace all occurrences of a string <B> by string <C> in a pandas data frame <A>
[ ( x + y ) for x , y <A> zip ( <B> , <B> [ 1 : ] ) ]	create a list containing each two adjacent letters <A> string <B> as its elements
<A> ( map ( <B> x , y : x + y , <C> [ : -1 ] , <C> [ 1 : ] ) )	get a <A> of pairs from a string <C> using <B> function
print ( re . findall ( '(https?://[^\\s]+)' , <A> ) )	extract a url from a string <A>
print ( re . search ( '(?P<url>https?://[^\\s]+)' , <A> ) . group ( 'url' ) )	extract a url from a string <A>
re . sub ( '[^A-Za-z0-9]+' , '' , <A> )	remove all special characters , punctuation and spaces from a string <A> using regex
pd . date_range ( <A> , freq = 'WOM-2FRI' , <B> = <C> )	create a Datetimeindex containing <C> <B> of the second friday of each month starting from date <A>
<A> = [ [ a , b ] , [ c , d ] , [ e , f ] ]	create multidimensional array <A> with 3 rows and 2 columns in python
mystring . replace ( ' ' , '_' )	replace spaces with underscore
os . path . abspath ( <A> )	get an absolute file path of file <A>
""""" "" "" """" . join ( <A> . split ( ) )"	split string <A> on white spaces
os . path . splitext ( <A> ) [ 0 ]	get <A> without extension from file <A>
[ <A> ( <B> [ : <C> ] ) for <C> , _ <D> enumerate ( <B> ) ]	get a list containing the <A> of each element <C> <D> list <B> plus the previous elements
""""" <A> """" . replace ( <B> , '/\x00/' ) . split ( '\x00' )"	split a string <A> by <B> keeping <B> in the result
np . random . shuffle ( np . transpose ( r ) )	shuffle columns of an numpy array 'r'
df [ <A> ] = df [ <B> ]	copy all values in a column <B> to a new column <A> in a pandas data frame 'df'
list ( data [ 'A' ] [ <A> ] . values ( ) ) [ 0 ] [ 'maindata' ] [ 0 ] [ 'info' ]	find a value within nested json 'data' where the key inside another key <A> is unknown .
all ( <A> ( x ) for x in <B> )	check characters of <B> <B> are true predication of function <A>
os . statvfs ( '/' ) . f_files - os . statvfs ( '/' ) . f_ffree	determine number of files on a drive with python
<A> = [ int ( number ) for number in <B> . split ( ',' ) ]	convert string <B> into a list of integers <A>
[ int ( s ) for s in <A> . split ( ',' ) ]	get a list of integers by splitting a string <A> with comma
<A> . sort ( key = <B> , reverse = True )	sort a list of objects <A> , based on a function <B> in descending order
<A> . sort ( key = lambda x : x . count , <B> = True )	<B> list <A> based on the count attribute of each object
<A> . sort ( key = lambda x : x . count , <B> = True )	sort a list of objects <A> in <B> order by their count property
driver . find_element_by_partial_link_text ( <A> ) . click ( )	click a href button <A> with selenium
driver . findElement ( By . linkText ( <A> ) ) . click ( )	click a href button having text <A> with selenium
driver . find_element_by_link_text ( <A> ) . click ( )	click a href button with text <A> with selenium
<A>   + str ( <B> )	cast an int <B> to a string and concat to string <A>
open ( <A> , 'w' ) . write ( <B>   + open ( <C> ) . read ( ) )	prepend the line <B> to the contents of file <C> and save as the file <A>
<A> . sort ( key = lambda t : len ( t [ 1 ] ) , reverse = True )	sort a list <A> by length of value in tuple
re . findall ( '\\b(\\w+)d\\b' , <A> )	split string <A> by words that ends with 'd'
bool ( re . search ( <A> , <B> ) )	return True if string <B> contains regex <A>
<A> ( set ( <B> ) )	remove duplicates in <A> <B>
<A> ( set ( <B> ) )	remove duplicates in <A> <B>
<A> ( OrderedDict . fromkeys ( <B> ) )	remove duplicates in <A> <B>
numpy . array ( <A> ) . reshape ( -1 ) . tolist ( )	convert array <A> into <A> list
<A> . array ( <B> ) [ 0 ] . tolist ( )	convert the first row of <A> matrix <B> to <B> list
print ( <A> . find ( <B> = <C> ) . findNext ( <D> ) . contents [ 0 ] )	in <A> , get the content of the sibling of the <D> tag with <B> content <C>
""""" "" "" """" . join ( [ ( '%d@%d'   % t ) for t <A> <B> ] )"	convert elements of each tuple <A> list <B> into a string separated by character @
""""" "" "" """" . join ( [ ( '%d@%d'   % ( t [ 0 ] , t [ 1 ] ) ) for t <A> <B> ] )"	convert each tuple <A> list <B> to a string with '@' separating the tuples '  elements
<A> . execute_script ( 'return document.documentElement.outerHTML;' )	get the html from the current web page of a Selenium <A>
[ i for i <A> <B> if re . search ( <C> , i ) ]	get all matches with regex pattern <C> <A> list of string <B>
<A> [ <B> ] [ ( <A> [ <C> ] >  <D> ) &  ( <A> [ <E> ] == <F> ) ]	select values from column <B> for which corresponding values in column <C> will be greater than <D> , and in column <E> - equal <F> in dataframe <A>
sorted ( <A> . items ( ) )	sort dictionary <A> in ascending order based on its keys and items
<A> ( <B> )	get <A> list of keys of dict <B>
int ( '1' )	"convert string ""1"" into integer"
int ( )	function to convert strings into integers
T2 = [ map ( int , x ) for x <A> <B> ]	convert items <A> <B> to integers
<A> . call ( [ <B> ] )	call a shell script <B> using <A>
<A> . call ( [ <B> ] )	call a shell script <B> using <A>
[ val for pair in zip ( <A> , <B> ) for val in pair ]	combine lists <A> and <B> by alternating their elements
encoded = base64 . b64encode ( <A> )	encode string <A>
encoded = <A> . encode ( <B> )	encode a string <A> to <B> encoding
lol = <A> ( csv . reader ( open ( <B> , 'rb' ) , delimiter = '\t' ) )	parse tab - delimited CSV file <B> into a <A>
getattr ( <A> , <B> )	get attribute <B> of object <A>
print ( <A> ( zip ( <B> [ 0 ] , zip ( * [ <C> ( d . values ( ) ) for d in <B> ] ) ) ) )	group a <C> of dicts <B> into one <A> by key
d = ast . literal_eval ( <A> )	convert unicode string u <A> into dictionary
[ word for word <A> <B> . split ( ) if word . startswith ( <C> ) ]	find all words <A> a string <B> that start with the <C> sign
<A> = re . sub ( '^https?:\\/\\/.*[\\r\\n]*' , '' , <A> , flags = re . MULTILinE )	remove any url within string <A>
np . where ( np . in1d ( <A> , [ 1 , 3 , 4 ] ) . reshape ( <A> . shape ) , <A> , 0 )	replace all elements in array <A> that are not present in array [1, 3, 4] with zeros
np . mean ( <A> , axis = 1 )	calculate mean across dimension in <A> 2 d array <A>
subprocess . call ( [ '/usr/bin/Rscript' , '--vanilla' , <A> ] )	running r script <A> from python
subprocess . call ( <A> , shell = True )	run r script <A>
writer . writeheader ( )	add a header to a csv file
<A> . fillna ( <A> . mean ( axis = 1 ) , axis = 1 )	replacing nan in the dataframe <A> with row average
time . strftime ( <A> , time . localtime ( 1347517370 ) )	convert unix timestamp '1347517370' to formatted string <A>
super ( <A> , cls ) . do ( <B> )	Call <B> base class ' s class method do from derived class <A>
a [ np . where ( ( a [ : , ( <A> ) ] == <A> ) * ( a [ : , ( <B> ) ] == <B> ) ) ]	selecting rows in Numpy ndarray 'a' , where the value in the first column is <A> and value in the second column is <B>
re . split ( ' +' , 'hello world sample text' )	separate words delimited by one or more spaces into a list
len ( max ( <A> , key = len ) )	length of longest element in list <A>
<A> [ 0 ] [ <B> ]	get the value associated with unicode key <B> of first dictionary in list <A>
[ <A> . split ( ) for <A> in open ( <B> ) ]	Retrieve each <A> from a file <B> as a list
res = dict ( ( v , k ) for k , v <A> <B> . items ( ) )	swap keys with values <A> <B> dictionary <B>
new_file = <A> ( <B> , 'w' )	<A> a file <B> in write mode
<A> ( <B> . startswith ( <C> ) for <B> <D> <E> )	check if <A> <B> <D> the dictionary <E> starts with the string <C>
[ value for <A> , value in <B> ( <C> . items ( ) ) if <A> . startswith ( <D> ) ]	create <B> of values from dictionary <C> that have a <A> that starts with <D>
pd . DataFrame ( { <A> : <B> . index , <C> : <B> . values } )	convert a pandas series <B> into a pandas dataframe df with columns <A> and <C>
<A> ( <B> . join ( map ( str , <C> ) ) )	<A> elements of <C> <C> seperated by tabs <B>
<A> ( <B> . encode ( 'raw_unicode_escape' ) )	<A> unicode string <B> with utf -8
<A> . encode ( 'latin-1' ) . decode ( 'utf-8' )	Encode a latin character in string <A> properly
<A> = <A> . resize ( ( x , y ) , Image . ANTIALIAS )	resized <A> <A> to width , height of (x, y) with filter of ANTIALIAS
re . findall ( 'n(?<=[^n]n)n+(?=[^n])(?i)' , <A> )	"regex , find ""n"" <A> only in the middle of string <A>"
print ( '{0:.0f}%' . format ( 1.0 / 3 * 100 ) )	display the float 1/3*100 as a percentage
<A> . sort ( <B> = lambda x : x [ <C> ] )	sort a list of dictionary <A> by the <B> <C>
<A> . sort ( key = lambda x : x [ <B> ] )	sort a list <A> of dicts by dict value <B>
l . sort ( key = lambda x : ( x [ <A> ] , x [ <B> ] , x [ <C> ] ) )	sort a list of dictionaries by the value of keys <A> , <B> , <C> in ascending order .
heapq . nlargest ( <A> , range ( len ( <B> ) ) , key = lambda i : abs ( <B> [ i ] - <C> [ i ] ) )	find <A> largest differences between each respective elements of list <B> and list <C>
<A> . find_all ( <B> , { 'class' : <C> } )	BeautifulSoup find all <B> elements in HTML string <A> with class of <C>
<A> . to_sql ( <B> , engine , <C> = <D> )	write records in dataframe <A> to table <B> in <C> <D>
<A> = re . sub ( '[^(){}[\\]]' , '' , <B> )	extract <A> from string <B>
<A> ( dict ( ( x [ 0 ] , x ) for x in L ) . values ( ) )	remove duplicate elements from <A> 'L'
[ line . rstrip ( '\n' ) for line in <A> ]	read a <A> <A> without newlines
[ i for ( i , x ) <A> enumerate ( <B> ) if ( x == <C> ) ]	get the position of item <C> <A> <B>
[ i for ( i , x ) <A> enumerate ( <B> ) if ( x == <C> ) ]	get the position of item <C> <A> <B>
print ( <A> . index ( <B> ) )	get the position of item <B> in list <A>
max ( <A> , key = lambda item : item [ 1 ] ) [ 0 ]	find the first element of the tuple with the maximum second element in a list of tuples <A>
max ( <A> , key = itemgetter ( <B> ) ) [ <C> ]	get the item at index <C> from the tuple that has maximum value at index <B> in list <A>
time . sleep ( <A> )	make a delay of <A> second
""""" "", "" """" . join ( '('   + ', ' . join ( i ) + ')'   for i in <A> )"	convert list of tuples <A> to a string
<A> = models . CharField ( max_length = 7 , <B> = <C> , editable = False )	Django set <B> value of field <A> equal to <C>
sorted ( <A> , lambda x : ( degree ( x ) , x ) )	sort lis <A> in ascending order based on the degrees value of its elements
( n for n in [ 1 , 2 , 3 , 5 ] )	convert a list into a generator object
newlist = [ v for i , v <A> enumerate ( <B> ) if i not <A> <C> ]	remove elements from list <B> that have an index number mentioned <A> list <C>
f = <A> ( <B> , 'w' )	<A> a file <B> in write mode
getattr ( <A> , <B> )	get attribute <B> from object <A>
map ( lambda a : a [ 0 ] , ( ( 'aa' , ) , ( 'bb' , ) , ( 'cc' , ) ) )	convert tuple of tuples (('aa',), ('bb',), ('cc',)) to list in one line
zip ( * [ ( 'a' , 1 ) , ( 'b' , 2 ) , ( 'c' , 3 ) , ( 'd' , 4 ) ] )	unzip the list [('a', 1), ('b', 2), ('c', 3), ('d', 4)]
zip ( * [ ( 'a' , 1 ) , ( 'b' , 2 ) , ( 'c' , 3 ) , ( 'd' , 4 ) ] )	unzip the list [('a', 1), ('b', 2), ('c', 3), ('d', 4)]
result = ( [ a for ( a , b ) in <A> ] , [ b for ( a , b ) in <A> ] )	unzip list <A>
result = ( ( <A> for ( <A> , b ) in <B> ) , ( b for ( <A> , b ) in <B> ) )	unzip list <B> and return <A> generator
zip ( * [ ( 'a' , 1 ) , ( 'b' , 2 ) , ( 'c' , 3 ) , ( 'd' , 4 ) , ( 'e' , ) ] )	unzip list [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]
map ( <A> , * [ ( 'a' , 1 ) , ( 'b' , 2 ) , ( 'c' , 3 ) , ( 'd' , 4 ) , ( 'e' , ) ] )	unzip list [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )] and fill empty results with <A>
json . dumps ( Decimal ( '3.9' ) )	encode Decimal('3.9') to a JSON string
<A> [ 'mynewkey' ] = 'mynewvalue'	"add key ""mynewkey"" to dictionary <A> with value ""mynewvalue"""
<A> . update ( { <B> : <C> , } )	add key <B> to dictionary <A> with value <C>
<A> . update ( dict ( a = <B> ) )	add key 'a' to dictionary <A> with value <B>
<A> . update ( a = <B> )	add key 'a' to dictionary <A> with value <B>
max ( [ max ( i ) for i <A> <B> ] )	find maximal value <A> <B> <B>
<A> = str ( <B> ( <A> , <C> ) )	<B> number <A> to <C> precision after the decimal point
<A> = re . findall ( '[0-9]+(?:\\.[0-9]+){3}' , s )	extract <A> address from an html string
<A> . groupby ( <B> ) . filter ( lambda x : len ( x ) >  1 )	filter dataframe <A> by values in column <B> that appear more than once
[ x for x <A> <B> . splitlines ( ) if x != '' ]	append each line <A> file <B> into a list
<A> = map ( int , open ( <B> ) . readlines ( ) )	get a list of integers <A> from a file <B>
<A> . colorbar ( <B> = <B> , cax = ax3 )	add color bar with image <B> to plot <A>
Counter ( ' ' . join ( <A> [ <B> ] ) . split ( ) ) . most_common ( <C> )	count most frequent <C> words in column <B> of dataframe <A>
list ( itertools . combinations ( ( 1 , <A> , 3 ) , <A> ) )	generate all <A> - element subsets of tuple (1, 2, 3)
<A> . now ( pytz . utc )	get a value of <A> .today ( ) in the UTC time zone
<A> = [ x for x in <B> if x != [ ] ]	get a new list <A> by remove empty list from a list of lists <B>
<A> = [ x for x in <B> if x ]	create <A> to contain the lists from list <B> excluding the empty lists from <B>
return HttpResponse ( <A> , mimetype = 'application/json' )	Django response with JSON <A>
re . findall ( '(.*?)\\[.*?\\]' , <A> )	get all text that is not enclosed within square brackets in string <A>
re . findall ( '(.*?)(?:\\[.*?\\]|$)' , <A> )	Use a regex to get all text in a string <A> that is not surrounded by square brackets
re . findall ( '\\(.+?\\)|\\w' , <A> )	get whatever is between parentheses as a single match , and any char outside as an individual match in string <A>
re . findall ( <A> , <B> )	match regex <A> with string <B>
re . findall ( '\\(.*?\\)|\\w' , <A> )	match multiple regex patterns with the alternation operator | in a string <A>
<A> = [ <B> . format ( element ) for element in <A> ]	formate each string cin list <A> into pattern <B>
subprocess . Popen ( [ <A> , <B> ] )	open a background process <A> with arguments <B>
[ mydict [ x ] for x in mykeys ]	get list of values from dictionary 'mydict' w .r .t . list of keys 'mykeys'
dict ( [ ( 'Name' , 'Joe' ) , ( 'Age' , 22 ) ] )	convert list [('Name', 'Joe'), ('Age', 22)] into a dictionary
<A> . reshape ( -1 , j ) . mean ( axis = 1 ) . reshape ( <A> . shape [ 0 ] , -1 )	average each two columns of array <A>
"print ( <A> . encode ( 'unicode-escape' ) . replace ( '""' , '\\""' ) )"	double backslash escape all double quotes in string <A>
re . split ( '(\\W+)' , s )	split a string into a list of words and whitespace
{ i [ 1 ] : i [ 0 ] for i <A> list ( <B> . items ( ) ) }	reverse the keys and values <A> a dictionary <B>
[ i for i , j <A> enumerate ( myList ) if <B>   <A> j . lower ( ) or <C>   <A> j . lower ( ) ]	finding the index of elements containing substring <B> and <C> <A> a list of strings 'myList' .
isinstance ( <A> , str )	check if object <A> is a string
isinstance ( <A> , str )	check if object <A> is a string
( type ( <A> ) <B> str )	check if object <A> <B> a string
isinstance ( <A> , str )	check if object <A> is a string
isinstance ( <A> , str )	check if <A> is a string
<A> . extend ( <B> )	append list <B> to <A>
<A> . extend ( <B> )	append list <B> to <A>
<A> . extend ( <B> )	append list <B> to <A>
<A> . append ( ( <B> [ 0 ] [ 0 ] , <B> [ 0 ] [ 2 ] ) )	append <B> tuple of elements from list <B> with indexes '[0][0] [0][2]' to list <A>
app . config [ <A> ] = 'Your_secret_string'	initialize <A> in flask config with Your_secret_string 
pd . DataFrame ( out . tolist ( ) , columns = [ <A> , <B> ] , index = out . index )	unpack a series of tuples in pandas into a DataFrame with column names <A> and <B>
[ x for x <A> range ( len ( <B> ) ) if <B> [ x ] == <C> ]	find the index of an element <C> <A> a list <B>
<A> . set_xticklabels ( <B> , rotation = <C> )	rotate the xtick <B> of matplotlib plot <A> by <C> degrees to make long <B> readable
re . sub ( '[^\\w]' , ' ' , <A> )	remove symbols from a string <A>
os . path . basename ( os . path . dirname ( os . path . realpath ( __file__ ) ) )	get the current directory of a script
"print ( re . findall ( ""'\\\\[0-7]{1,3}'"" , <A> ) )"	find octal characters matches from a string <A> using regex
re . split ( <A> , <B> )	split string <B> based on occurrences of regex pattern <A>
re . split ( '[ ](?=[A-Z])' , <A> )	split string <A> at every space followed by an upper - case letter
r = requests . post ( <A> , <B> = <B> , <C> = <C> , <D> = <D> )	send multipart encoded file <B> to <A> <A> with <C> <C> and metadata <D>
open ( <A> , 'wb' ) . write ( <B> )	write bytes <B> to a file <A> in python 3
[ <A> [ k ] for k in <B> ]	get a list from a list <B> with values mapped into a dictionary <A>
<A> . set_index ( <B> ) . index . get_duplicates ( )	find duplicate names in column <B> of the dataframe <A>
round ( <A> , <B> )	truncate float <A> to <B> decimal places
sorted ( <A> , key = lambda x : datetime . strptime ( x [ 1 ] , '%d/%m/%Y' ) , reverse = True )	sort list <A> in descending order based on the date value in second element of each list in list <A>
<A> . set_rlabel_position ( <B> )	place the radial ticks in plot <A> at <B> degrees
os . path . isabs ( <A> )	check if path <A> is an absolute path
len ( list ( <A> . keys ( ) ) )	get number of keys in dictionary <A>
len ( set ( open ( <A> ) . read ( ) . split ( ) ) )	count the number of keys in dictionary <A>
df . groupby ( <A> ) . first ( )	pandas dataframe get first row of each group by <A>
pd . concat ( [ df [ 0 ] . apply ( pd . Series ) , df [ 1 ] ] , axis = 1 )	split a list in first column into multiple columns keeping other columns as well in pandas data frame
re . findall ( <A> , <B> )	extract attributes <A> from string <B>
sum ( int ( float ( item ) ) for item <A> [ _f for _f <A> [ '' , '3.4' , '' , '' , '1.0' ] if _f ] )	Sum integers contained <A> strings <A> list ['', '3.4', '', '', '1.0']
<A> . Popen ( [ <B> ] )	Call a <A> with arguments <B> that may contain spaces
<A> . put ( ( - n , n ) )	reverse a priority queue <A> in python without using classes
<A> [ <B> ] . plot ( kind = 'bar' , <C> = [ 'r' , 'g' , 'b' , 'r' , 'g' , 'b' , 'r' ] )	make a barplot of data in column <B> of dataframe <A> colour - coded according to list <C>
re . findall ( <A> , <B> )	find all matches of regex pattern <A> in string <B>
len ( <A> )	get the length of list <A>
len ( <A> )	getting the length of array <A>
len ( <A> )	getting the length of array <A>
len ( <A> )	getting the length of <A>
len ( <A> )	getting the length of <A>
""""" <A> """" . decode ( 'string_escape' )"	remove escape character from string <A>
""""" ""obama"" """" . replace ( <A> , '%temp%' ) . replace ( <B> , <A> ) . replace ( '%temp%' , <B> )"	replace each <A> with <B> and each <B> with <A> in the string 'obama' in a single pass .
shutil . rmtree ( <A> )	remove directory tree <A>
<A> [ <B> ] = <A> [ <C> ] . apply ( lambda x : x . weekday ( ) )	create a new column <B> in pandas <A> frame <A> based on the values in column <C>
sorted ( <A> , key = <A> . get , <B> = True )	<B> sort Counter <A> by values
sorted ( list ( <A> . items ( ) ) , key = lambda pair : pair [ 1 ] , <B> = True )	<B> sort counter <A> by value
np . vstack ( ( <A> , b ) )	append <A> numpy array 'b' to <A> numpy array 'a'
print ( <A> ( ( <B> , <C> ) , <D> = 0 ) )	numpy <A> two arrays <B> and <C> along the first <D>
print ( <A> ( ( <B> , <C> ) , <D> = 1 ) )	numpy <A> two arrays <B> and <C> along the second <D>
c = np . r_ [ ( <A> [ None , : ] , <B> [ None , : ] ) ]	numpy concatenate two arrays <A> and <B> along the first axis
np . array ( ( <A> , <B> ) )	numpy concatenate two arrays <A> and <B> along the first axis
print ( socket . getaddrinfo ( <A> , <B> ) )	fetch address information for host <A> ion port <B>
<A> . xs ( <B> , level = <C> , drop_level = False )	add a column <C> with value <B> to dataframe <A>
<A> HttpResponse ( 'Unauthorized' , status = <B> )	<A> a <B> unauthorized in django
<A> ( __name__ , template_folder = <B> )	<A> set folder <B> as the default template folder
session . execute ( 'inSERT inTO t1 (SELECT * FROM t2)' )	How do I inSERT inTO t1 ( SELECT * FROM t2 ) in SQLAlchemy ?
c2 . sort ( key = lambda <A> : <A> [ 2 ] )	sort a list of lists 'c2' such that third <A> comes first
<A> . rc ( 'font' , ** { 'sans-serif' : <B> , 'family' : 'sans-serif' } )	set font <B> to display non - ascii characters in <A>
df [ <A> ] . apply ( lambda x : x . toordinal ( ) )	convert DateTime column <A> of pandas dataframe 'df' to ordinal
<A> . get_attribute ( 'innerHTML' )	get html source of Selenium WebElement <A>
df . index . get_loc ( <A> )	get the integer location of a key <A> in a pandas data frame
"os . system ( 'gnome-terminal -e \'bash -c ""sudo apt-get update; exec bash""\'' )"	open a 'gnome' terminal from python script and run 'sudo apt-get update' command .
<A> . update ( { <B> : <C> } )	add an item with key <B> and value <C> to an dictionary <A>
my_list = [ ]	declare an array
<A> . append ( <B> )	insert item <B> to a list <A>
<A> . insert ( 0 , <B> )	add an entry <B> at the beginning of list <A>
""""" ""\\xF3\\xBE\\x80\\x80"" """" . replace ( '\\x' , '' ) . decode ( 'hex' )"	convert a hex - string representation to actual bytes
<A> [ <A> . columns [ -1 ] ]	select the last column of dataframe <A>
<A> . loc [ <A> [ <B> ] == <C> , <B> ] . values [ 0 ]	get the first value from dataframe <A> where column <B> is equal to <C>
np . column_stack ( ( [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ) )	converting two lists [1, 2, 3] and [4, 5, 6] into a matrix
<A> ( <B> )	get the <A> of <B>
<A> ( <B> )	determine the <A> of variable <B>
<A> ( <B> )	determine the <A> of variable <B>
<A> ( <B> )	determine the <A> of variable <B>
<A> ( <B> )	determine the <A> of variable <B>
print ( <A> ( <B> ) )	get the <A> of variable <B>
next ( itertools . islice ( range ( 10 ) , <A> , <A> + 1 ) )	get the <A> th item of a generator
"print ( '""{}""' . format ( <A> ) )"	Print a string <A> with string format
""""" "" "" """" . join ( <A> )"	join a <A> of strings <A> using a space ' '
<A> = [ [ ] for n in range ( 2 ) ]	create list <A> containing two empty lists
<A> = [ line . strip ( ) for line in open ( <B> , 'r' ) ]	read a file <B> into a list <A>
""""" """" """" . join ( [ char for char <A> <B>   if char != <C> ] )"	delete all occurrences of character <C> <A> string <B>
re . sub ( <A> , '' , <B> )	delete all instances of a character <A> in a string <B>
""""" <A> """" . replace ( 'i' , '' )"	"delete all characters ""i"" in string <A>"
<A> . dropna ( subset = [ 1 ] )	"Drop rows of pandas dataframe <A> having NaN in column at index ""1"""
[ x for x in <A> if x . n == <B> ]	get elements from list <A> , that have a field n value <B>
<A> = [ int ( x ) for x in <B> ]	converting list of strings <B> to list of integer <A>
map ( int , eval ( input ( 'Enter the unfriendly numbers: ' ) ) )	convert list of string numbers into list of integers
sys . stdout . write ( '.' )	"print ""."" without newline"
<A> ( <B> ( 2.51 * 100 ) )	<B> off the float that is the product of 2.52 * 100 and convert it to an <A>
<A> . plot ( <B> = False )	plot dataframe <A> without a <B>
generator = iter_iprange ( '192.168.1.1' , '192.168.255.255' , step = 1 )	"loop through the IP address range ""192.168.x.x"""
sum ( 1 << i <A> i , b <B> enumerate ( <C> ) if b )	Sum the corresponding decimal values <A> binary values of each boolean element <B> list <C>
<A> . write ( '%r\n%r\n%r\n'   % ( <B> , <C> , <D> ) )	write multiple strings <B> , <C> and <D> in one line in a file <A>
[ y for x in <A> for y in ( x if isinstance ( x , <B> ) else [ x ] ) ]	convert <B> of lists <A> into a flat <B>
print ( <A> . encode ( 'string_escape' ) )	Print new line character as \n in a string <A>
""""" """" """" . join ( <A> . rsplit ( <B> , 1 ) )"	remove last comma character <B> in string <A>
( <A> [ 1 : ] + <A> [ : -1 ] ) / 2	calculate the mean of each element in array <A> with the element previous to it
<A> [ : -1 ] + ( <A> [ 1 : ] - <A> [ : -1 ] ) / 2	get an array of the mean of each two consecutive values in numpy array <A>
<A> = <B> . fromiter ( codecs . open ( <C> , encoding = <D> ) , dtype = '<U2' )	load data containing <D> from file <C> into <B> array <A>
<A> = sorted ( <A> , <B> = itemgetter ( <C> ) , <D> = True )	<D> sort list of dicts <A> by value for <B> <C>
<A> = sorted ( <A> , <B> = lambda <C> : <C> [ <D> ] , reverse = True )	sort <C> list of dictionary <A> based on <B> <D> in descending order
<A> . loc [ <A> [ 0 ] . str . contains ( <B> ) ]	get rows of dataframe <A> that match regex <B>
re . search ( '\\[(.*)\\]' , <A> ) . group ( 1 )	"find the string in <A> between two special characters ""["" and ""]"""
""""" ""The big brown fox is brown"" """" . count ( <A> )"	count number of times string <A> occurred in string 'The big brown fox is brown'
<A> . loads ( request . body )	decode <A> string request.body to python dict
urllib . request . urlretrieve ( <A> , <B> )	download the file from <A> <A> and save it under file <B>
<A> . split ( )	split string <A> by space
<A> . split ( ',' )	"split string <A> by "","""
<A> . split ( )	split string <A> into a list by whitespace
[ re . sub ( '(?<!\\d)\\.(?!\\d)' , <A> , i ) for i <B> <C> ]	replace dot characters '.' associated with ascii letters <B> list <C> with space <A>
sorted ( <A> , key = lambda <B> : <B> . split ( ',' ) [ 1 ] )	sort list <A> based on second index of each string <B>
subprocess . check_call ( 'vasp | tee tee_output' , shell = True )	call multiple bash function ‘ vasp ’  and ‘ tee tee_output ’  using ‘|’
[ element for element in <A> if isinstance ( element , int ) ]	eliminate all strings from list <A>
[ element for element in lst if not isinstance ( element , str ) ]	get all the elements except strings from the list 'lst' .
newlist = sorted ( <A> , <B> = lambda k : k [ <C> ] )	sort a list of dictionaries <A> by the value of the dictionary <B> <C>
newlist = sorted ( <A> , <B> = itemgetter ( <C> ) , reverse = True )	sort a list of dictionaries <A> by values in <B> <C> in descending order
""""" <A> """" . join ( <B> [ <C> ] )"	join together with <A> elements inside a list indexed with <C> within a dictionary <B>
""""" """" """" . join ( [ 'A' , 'B' , 'C' , 'D' ] )"	concatenate array of strings ['A', 'B', 'C', 'D'] into a string
<A> . load ( urllib . request . urlopen ( <B> ) )	get <A> data from restful service <B>
[ x for x in <A> if not x . startswith ( <B> ) and not x . startswith ( <C> ) ]	remove all strings from a list a strings <A> where the values starts with <B> or <C>
Entry . objects . filter ( pub_date__contains = '08:00' )	django filter by hour
<A> . sort ( <B> = lambda item : ( item [ <C> ] , item [ <D> ] ) )	sort a <A> of dictionary <A> first by <B> <C> and then by <D>
( t - <A> . datetime ( 1970 , 1 , 1 ) ) . total_seconds ( )	convert <A> object (1970, 1, 1) to seconds
re . sub ( '(\\_a)?\\.([^\\.]*)$' , '_suff.\\2' , <A> )	insert _suff before the file extension in <A> or replace _a with suff if it precedes the extension .
struct . unpack ( 'H' , struct . pack ( 'h' , <A> ) )	convert integer <A> into an unassigned integer
<A> = [ <B> ( x ) for x <C> <A> ]	convert int values <C> list <A> to <B>
<A> . to_csv ( filename , <B> = False )	write dataframe <A> , excluding <B> , to a csv file
<A> = <B> . loads ( <C> )	convert a urllib unquoted string <C> to a <B> data <A>
[ chr ( i ) for i in range ( 127 ) ]	create a list containing all ascii characters as its elements
<A> . write ( struct . pack ( '5B' , * <B> ) )	write <B> to a binary file <A>
re . sub ( '^[A-Z0-9]*(?![a-z])' , '' , <A> )	python regex - check for a capital letter with a following lowercase in <A> <A>
list ( <A> . keys ( ) ) [ -1 ]	get the last key of dictionary <A>
print ( 'hi there' , <A> = <B> )	"write line ""hi there"" to <A> <B>"
<A> . encode ( 'iso-8859-15' )	convert unicode string <A> to ascii
<A> . objects . filter ( group = group ) . order_by ( '-added' ) [ 0 ]	Django get maximum value associated with field 'added' in model <A>
re . findall ( 'Test([0-9.]*[0-9]+)' , <A> )	find all numbers and dots from a string <A> using regex
re . findall ( 'Test([\\d.]*\\d+)' , text )	python regex to find all numbers and dots from 'text'
os . system ( <A> , <B> )	execute script <B> using <A> shell
<A> . sort ( key = lambda x : x [ 1 ] [ 2 ] )	sort a list of tuples <A> by third item in the tuple
<A> ( <B> . get_range ( ) . get_keys ( ) )	get a <A> of all keys in Cassandra database <B> with pycassa
<A> . datetime . now ( )	create a <A> with the current date &  time
next ( i for i , x in enumerate ( <A> ) <B> not isinstance ( x , bool ) and x == <C> )	get the index of an integer <C> from a list <A> <B> the list also contains boolean items
<A> [ : ] = [ ( x - <B> ) for x <C> <A> ]	subtract <B> from every number <C> <A> list <A>
<A> . choice ( os . listdir ( ' <B> : \\' ) )	choose a <A> file from the directory contents of the <B> drive , 'C:\\'
max ( <A> . min ( ) , <A> . max ( ) , key = abs )	get the highest element in absolute value in a numpy matrix <A>
"re . findall ( '""(http.*?)""' , <A> , re . MULTILinE |  re . DOTALL )"	get all urls within text <A>
"re . findall ( 'http://[^t][^s""]+\\.html' , <A> )"	match urls whose domain doesn ' t start with t from string <A> using regex
<A> . replace ( <B> , '! !' ) . split ( '!' )	split a string <A> considering the spaces <B>
<A> ( <B> , <C> )	<A> file <B> with mode <C>
[ [ <A> ( item ) for item <B> zip ( * items ) ] for items <B> zip ( * <C> ) ]	<A> elements at the same index <B> list <C>
<A> [ : , ( np . newaxis ) ]	add <A> new axis to array <A>
sum ( d * 10 ** i for i , d in enumerate ( x [ : : -1 ] ) )	concatenate elements of a list 'x' of multiple integers to a single integer
r = int ( '' . join ( map ( str , x ) ) )	convert a list of integers into a single integer
datetime . strptime ( '2010-11-13 10:33:54.227806' , <A> )	convert a DateTime string back to a DateTime object of format <A>
[ ( i , sum ( j ) / len ( j ) ) <A> i , j <B> <C> ( <D> . items ( ) ) ]	get the average of a <C> values <A> each key <B> dictionary <D> )
<A> ( [ 1 , 2 ] , [ 3 , 4 ] )	<A> two lists [1, 2] and [3, 4] into a list of two tuples containing elements at the same index in each list
[ 'hello{0}' . format ( i ) for i <A> a ]	prepend string 'hello' to all items <A> list 'a'
re . sub ( '(?<!\\S)((\\S+)(?:\\s+\\2))(?:\\s+\\2)+(?!\\S)' , '\\1' , <A> )	regex for repeating words in a string <A>
<A> . div ( <A> . sum ( axis = 1 ) , axis = 0 )	normalize a pandas dataframe <A> by row
map ( lambda t : ( t [ 1 ] , t [ 0 ] ) , <A> )	swap values in a tuple / list inside a list <A>
[ ( t [ 1 ] , t [ 0 ] ) for t <A> <B> ]	Swap values <A> a tuple / list <A> list <B>
re . findall ( <A> , <B> )	find all occurrences of the pattern <A> within <B>
print ( list ( itertools . combinations ( { 1 , 2 , <A> , 4 } , <A> ) ) )	generate the combinations of <A> from a set {1, 2, 3, 4}
<A> [ [ <B> , <C> , <D> ] ] = <A> . apply ( <E> , axis = 1 )	add multiple columns <B> , <C> , <D> to pandas data frame <A> from lambda function <E>
soup . find_all ( <A> , <B> = <C> )	BeautifulSoup search <B> <C> inside tag <A>
<A> . strftime ( <B> )	convert a datetime object <A> into readable format <B>
<A> ( '' . join ( c for c in <B> if c . isdigit ( ) ) )	parse string <B> to <A> when string contains a number
<A> [ <B> ] . update ( { 'class' : { 'section' : 5 }} )	add dictionary {'class': {'section': 5}} to key <B> of dictionary <A>
dict ( map ( int , x . split ( ':' ) ) for x in <A> . split ( ',' ) )	transforming the string <A> into dictionary
np . where ( ( <A> == ( 0 , 1 ) ) . all ( axis = 1 ) )	find rows matching (0,1) in a 2 dimensional numpy array <A>
dict ( [ [ 'two' , 2 ] , [ 'one' , 1 ] ] )	build a dictionary containing the conversion of each list in list [['two', 2], ['one', 1]] to a key / value pair as its items
dict ( zip ( <A> [ : : 2 ] , <A> [ 1 : : 2 ] ) )	convert list <A> to dictionary having each two adjacent elements as key / value pair
<A> = <B>	assign float <B> to variable <A>
re . findall ( '(([0-9]+)([A-Z]))' , '20M10000N80M' )	"separate numbers from characters in string ""30m1000n20m"""
re . findall ( '([0-9]+|[A-Z])' , <A> )	separate numbers and characters in string <A>
re . findall ( '([0-9]+)([A-Z])' , <A> )	separate numbers and characters in string <A>
re . compile ( '\\w+' ) . findall ( <A> )	get a list of words from a string <A> remove punctuation
<A> . datetime . strptime ( <B> , '%H:%M' ) <C> ( )	convert string <B> into <A> <C> object
requests . get ( <A> , verify = False )	request url <A> without verifying SSL certificates
<A> [ <A> != <B> ]	extract values not equal to <B> from numpy array <A>
new_dict = { k : v for k , v in zip ( <A> , <B> ) }	map two lists <A> and <B> into a dictionary
dict ( ( k , v ) for k , v in zip ( <A> , <B> ) )	map two lists <A> and <B> into a dictionary
dict ( [ ( k , v ) for k , v in zip ( <A> , <B> ) ] )	map two lists <A> and <B> into a dictionary
m = re . search ( '\\[(\\w+)\\]' , <A> )	find the string matches within parenthesis from a string <A> using regex
<A> . setsockopt ( SOL_SOCKET , <B> , 1 )	Enable the <B> socket option in socket object <A> to fix the error only one usage of each socket address is normally permitted
<A> = [ ( a + b ) for a , b <B> zip ( <C> , <D> ) ]	append the sum of each tuple pair <B> the grouped list <C> and list <D> elements to list <A>
[ ord ( c ) for c in <A> . decode ( 'hex' ) ]	converting hex string <A> to its integer representations
print ( sorted ( <A> , key = lambda t : ( - t [ 2 ] , t [ 0 ] ) ) )	sort list <A> by second element of each tuple in ascending and third element of each tuple in descending
[ y for x <A> <B> ( <C> ) for y <A> [ x , x ] ]	get list of duplicated elements <A> <B> of <C>
<A> = open ( <B> ) . read ( )	read the contents of the file <B> into <A>
<A> [ : ] = [ ( x / <B> ) for x <C> <A> ]	divide each element <C> list <A> by integer <B>
<A> . replace ( ' ' , <B> , regex = True )	replace white spaces in dataframe <A> with <B>
<A> . datetime . combine ( <B> , <A> . time . min )	convert date <B> to <A>
<A> = str ( <B> )	convert tuple <B> to string <A>
<A> . ctime ( os . path . getmtime ( <B> ) )	get modified <A> of <B> <B>
<A> . ctime ( os . path . getctime ( <B> ) )	get creation <A> of <B> <B>
t = os . path . getmtime ( <A> )	get modification time of file <A>
os . path . getmtime ( <A> )	get modification time of file <A>
print ( ( 'last modified: %s'   % <A> . ctime ( os . path . getmtime ( <B> ) ) ) )	get modified <A> of <B> <B>
print ( ( 'created: %s'   % <A> . ctime ( os . path . getctime ( <B> ) ) ) )	get the creation <A> of <B> <B>
return os . path . getctime ( <A> )	get the creation time of file <A>
<A> . system ( 'TASKKILL /F /IM firefox.exe' )	execute <A> command '' TASKKILL / F / IM firefox .exe ''
"return ( x . group ( 0 ) for x in re . finditer ( ""[A-Za-z']+"" , <A> ) )"	split <A> <A> on whitespaces using a generator
""""" "", "" """" . join ( [ <A> ] * len ( <B> ) )"	Unpack each value in list <B> to its placeholder '%' in string <A>
print ( re . match ( <A> , <B> ) . group ( 1 ) )	match regex pattern <A> with string <B>
<A> [ <B> ] . str . replace ( '\\(.*\\)' , <C> )	replace parentheses and all data within it with empty string <C> in column <B> of dataframe <A>
<A> = [ x for x <B> <C> <D> x [ 0 ] <B> <E> ]	create a list <A> containing elements form list <C> <D> first element of list <C> is <B> list <E>
print ( [ '' . join ( a ) for a <A> combinations ( [ 'hel' , 'lo' , 'bye' ] , 2 ) ] )	generate all possible string permutations of each two elements <A> list ['hel', 'lo', 'bye']
[ x for x in <A> if <B>   in x [ 2 ] ]	get a list of items form nested list <A> where third element of each item contains string <B>
<A> . sort ( key = lambda x : x [ <B> ] )	sort lists in the list <A> by the element at index <B> of each list
logging . info ( <A> )	Log message <A> on the root logger .
fig . add_subplot ( 1 , 1 , 1 )	Return a subplot axes positioned by the grid definition 1,1,1 using matpotlib
sorted ( list ( <A> . items ( ) ) , key = operator . itemgetter ( 1 ) )	sort dictionary <A> by value in ascending order
sorted ( <A> , key = <A> . get )	sort dictionary <A> by value in ascending order
sorted ( <A> , key = <A> . get , reverse = True )	sort dictionary <A> by value in descending order
sorted ( list ( <A> . items ( ) ) , key = ( lambda x : x [ 1 ] ) )	sort dictionary <A> by value in ascending order
np . einsum ( 'ijk,ikl->ijl' , <A> , <B> )	elementwise product of 3 d arrays <A> and <B>
print ( 'I have: {0.price}' . format ( <A> ) )	Print a string <A> with string formatting
<A> . write ( <B> )	Write a comment <B> to a file object <A>
<A> = <A> [ -1 : ] + <A> [ : -1 ]	move the last item in list <A> to the beginning
<A> . strftime ( <B> )	Parse DateTime object <A> using format <B>
mixed . replace ( '\r\n' , '\n' ) . replace ( '\r' , '\n' )	Normalize line ends in a string 'mixed'
os . path . expanduser ( '~user' )	find the real user home directory using python
T = [ <A> [ i ] for i in <B> ]	index a list <A> with another list <B>
<A> = open ( <B> ) . read ( ) . split ( )	get a list of <A> <A> of a file <B>
[ [ sum ( [ x [ 1 ] for x in i ] ) ] for i in <A> ]	get a list of lists with summing the values of the second element from each list of lists <A>
[ sum ( [ x [ 1 ] for x <A> i ] ) for i <A> data ]	summing the second item <A> a list of lists of lists
Article . objects . annotate ( like_count = Count ( <A> ) ) . order_by ( '-like_count' )	sort objects in Articles in descending order of counts of <A>
today = datetime . datetime . utcnow ( ) . date ( )	return a DateTime object with the current UTC date
[ ( <A> * b ) for <A> , b in zip ( <B> , <C> ) ]	create <A> list containing the multiplication of each elements at the same index of list <B> and list <C>
re . findall ( <A> , <B> )	fetch smilies matching regex pattern <A> in string <B>
re . match ( <A> , <B> )	match the pattern <A> to the string <B>
<A> = <B> . dumps ( [ ob . __dict__ for ob in <C> ] )	convert a list of objects <C> to <B> string <A>
<A> = [ 0 ] * <B>	create a list <A> of <B> zeros
stringnamehere . decode ( 'utf-8' , 'ignore' )	decode the string 'stringnamehere' to UTF -8
re . findall ( <A> , <B> )	Match regex pattern <A> on string <B>
<A> . setdefault ( <B> , [ ] ) . append ( <C> )	create a <B> <B> if it does not exist in dict <A> and append element <C> to <C> .
<A> [ np . argmin ( <A> [ : , ( 1 ) ] ) ]	get the value of the minimum element in the second column of array <A>
<A> . update ( <B> )	extend dictionary <A> with key / value pairs of dictionary <B>
[ { k : v for k , v in d . items ( ) if k != <A> }  for d in <B> ]	remove key values pairs with key <A> from a list of dictionaries <B>
numpy . random . random ( ( <A> , <A> ) )	create <A> by <A> matrix of random numbers
df [ <A> ] = df [ <B> ] + df [ <C> ]	make new column <A> in panda dataframe by adding values from other columns <B> and <C>
[ value for <A> , value in <B> ( <C> . items ( ) ) if <D>   in <A> . lower ( ) ]	create a <B> of values from the dictionary <C> that have a <A> with a case insensitive match to <D>
sys . path . append ( <A> )	append a path <A> in system path
re . findall ( '\\d+(?=[^[]+$)' , <A> )	get all digits in a string <A> after a '[' character
<A> . load ( open ( <B> , 'rb' ) )	python <A> / unpickle a list to / from a file <B>
<A> . groupby ( level = <B> ) . agg ( lambda x : x . index . get_level_values ( 1 ) . nunique ( ) )	count unique index values in column <B> in pandas dataframe <A>
pd . concat ( map ( pd . DataFrame , iter ( <A> . values ( ) ) ) , keys = list ( <A> . keys ( ) ) ) . stack ( ) . unstack ( 0 )	create a pandas dataframe of values from a dictionary <A> which contains dictionaries of dictionaries
sum ( 1 for i , j in zip ( <A> , <B> ) if i != j )	find out the number of non - matched elements at the same index of list <A> and list <B>
<A> = { ( a . lower ( ) , b ) : v for ( a , b ) , v <B> list ( <A> . items ( ) ) }	make all keys lowercase <B> dictionary <A>
<A> . sort ( key = lambda x : [ x [ 0 ] , len ( x [ 1 ] ) , x [ 1 ] ] )	sort list <A> based on first element of each tuple and by the length of the second element of each tuple
<A> . strip ( )	trim whitespace in string <A>
<A> = <A> . lstrip ( )	trim whitespace ( including tabs ) in <A> on the left side
<A> = <A> . rstrip ( )	trim whitespace ( including tabs ) in <A> on the right side
<A> = <A> . strip ( <B> )	trim characters <B> in <A>
print ( re . sub ( '[\\s+]' , '' , <A> ) )	trim whitespaces ( including tabs ) in string <A>
Task . objects . exclude ( prerequisites__status__in = [ <A> , <B> , <C> ] )	in Django , filter Task.objects based on all entities in [ <A> , <B> , <C> ]
root . configure ( <A> = 'black' )	Change <A> color in Tkinter
<A> . array ( [ ( key , val ) for key , val in <B> . items ( ) ] , dtype )	convert dict <B> to <A> structured array
pd . concat ( [ <A> , <B> . sort_values ( <C> ) ] )	concatenate dataframe <A> to dataframe <B> sorted by values of the column <C>
re . sub ( '(.*)</div>' , '\\1</bad>' , <A> )	replace the last occurence of an expression '</div>' with '</bad>' in a string <A>
print ( max ( d , key = lambda x : ( d [ x ] [ <A> ] , d [ x ] [ <B> ] ) ) )	get the maximum of <A> and <B> values in a dictionary
Book . objects . filter ( author__id = <A> ) . filter ( author__id = <B> )	Filter Django objects by author with ids <A> and <B>
re . compile ( <A> , re . IGNORECASE ) . split ( <B> )	split string <B> based on case - insensitive matching using string <A>
[ sum ( map ( int , s ) ) for s <A> <B> . split ( ) ]	get list of sums of neighboring integers <A> string <B>
[ i for i in <A> if <A> [ i ] == <B> ]	get all the keys from dictionary <A> whose value is <B>
<A> . decode ( 'unicode_escape' )	converting byte string <A> in unicode string
pd . melt ( <A> , id_vars = [ 'farm' , 'fruit' ] , var_name = <B> , value_name = <C> )	unpivot first 2 columns into new columns <B> and <C> from a pandas dataframe <A>
default_data [ 'item3' ] = 3	"add key ""item3"" and value ""3"" to dictionary default_data "
default_data . update ( { 'item3' : 3 , } )	"add key ""item3"" and value ""3"" to dictionary default_data "
<A> . update ( { <B> : <C> , <D> : <E> , } )	add key value pairs <B> , <C> and <D> , <E> to dictionary <A>
<A> [ : <B> ] + <A> [ -3 : ]	get the first and last <B> elements of list <A>
<A> = <A> . reset_index ( drop = True )	reset index to default in dataframe <A>
[ <A> [ <B> ] . append ( <C> [ <B> ] ) for <B> in range ( <D> ) ]	For each index <B> from 0 to <D> , append the element at index <B> of list <C> to the list at index <B> of list <A> .
os . path . realpath ( <A> )	get canonical <A> of the filename <A>
set ( L [ 0 ] . f . items ( ) ) . issubset ( set ( a3 . f . items ( ) ) )	check if dictionary L[0].f.items() is in dictionary a3.f.items()
zip ( * np . where ( <A> == <B> ) )	find all the indexes in <A> Numpy 2 D array where the value is <B>
<A> . columns = <A> . columns . get_level_values ( <B> )	Collapse hierarchical column index to level <B> in dataframe <A>
x = scipy . matrix ( [ 1 , 2 , 3 ] ) . transpose ( )	create a matrix from a list [1, 2, 3]
<A> = re . sub ( '(\\bget\\b)' , '\\1@' , <A> )	add character '@' after word 'get' in string <A>
np . array ( [ np . arange ( <A> ) , np . arange ( 2 , -1 , -1 ) , np . ones ( ( <A> , ) ) ] ) . min ( axis = 0 )	get a numpy array that contains the element wise minimum of three <A> x1 arrays
<A> [ <B> ] = list ( <C> ( 1 , len ( <A> ) + 1 ) )	add a column <B> to dataframe <A> for index in <C>
os . environ [ <A> ] = '1'	set environment variable <A> equal to 1
print ( os . environ [ <A> ] )	get a environment variable <A>
os . environ [ <A> ] = <B>	set environment variable <A> to <B>
<A> . update ( <B> )	update dictionary <A> , overwriting values where keys are identical , with contents of dictionary <B>
<A> [ <B> ]	get all the values in column <B> from pandas data frame <A>
<A> = plt . errorbar ( x , y , yerr = err , ecolor = <B> )	make a line plot with errorbars , <A> , from data x, y, err and set color of the errorbars to <B> ( yellow )
results += [ each for each <A> os . listdir ( <B> ) if each . endswith ( <C> ) ]	find all files with extension <C> <A> directory <B>
print ( <A> . decode ( 'utf8' ) + <B> )	add unicode string <B> to UTF -8 decoded string <A>
re . sub ( <A> , <B> , <C> ) . lower ( )	lower - case the string obtained by replacing the occurrences of regex pattern <A> in string <C> with eplacement <B>
""""" ""{0:.3g}"" """" . format ( <A> )"	format a string <A> using string formatting
numpy . append ( <A> , <A> [ 0 ] )	append the first element of array <A> to array <A>
<A> . ix [ : , ( <A> . loc [ 0 ] == <B> ) ] . columns	return the column for value <B> in dataframe <A>
<A> [ <B> ] = <A> . CET . map ( <C> . set_index ( <D> ) [ <B> ] )	merge 2 dataframes <C> and <A> with same values in a column <B> with and index <D>
<A> = <B> . loads ( <C> )	load a <B> data <C> into variable <A>
math . cos ( math . radians ( <A> ) )	convert radians <A> to degrees
sum ( isinstance ( x , int ) for x <A> <B> )	count the number of integers <A> list <B>
'used\u200b' . replace ( <A> , <B> )	replacing <A> with <B> in a string using regular expressions
threading . Thread ( target = SudsMove ) . start ( )	run function 'SudsMove' simultaneously
<A> ( i * i for i <B> <C> )	<A> of squares values <B> a list <C>
<A> ( map ( lambda x : x * x , <B> ) )	calculate the <A> of the squares of each value in list <B>
<A> = dict ( ( ( key , value ) for ( key , value ) in <B> ) )	create a dictionary <A> from list <B>
<A> = { key : value for ( key , value ) in <B> }	create a dictionary <A> from list <B>
<A> = { k : v for ( k , v ) in <B> }	create a dictionary <A> from list of key value pairs <B>
<A> . round ( { <B> : 2 , <C> : 3 } )	round off entries in dataframe <A> column <B> to two decimal places , and entries in column <C> to three decimal places
<A> . setopt ( pycurl . WRITEFUNCTION , lambda x : None )	make function WRITEFUNCTION output nothing in curl <A>
print ( <A> . choice ( words ) )	return a <A> word from a word list 'words'
<A> ( <B> , <C> = lambda x : <B> [ x ] [ <D> ] )	find a <A> value of the <C> <D> in a nested dictionary <B>
[ ( int ( x ) if x else <A> ) for x <B> <C> . split ( ',' ) ]	get list of string elements <B> string <C> delimited by commas , putting <A> <B> place of empty strings
""""" "","" """" . join ( x or '0'   for x in <A> . split ( <B> ) )"	split string <A> into a list of strings based on <B> then replace empty strings with zero
re . compile ( '$^' )	regular expression match nothing
re . compile ( '.\\A|.\\A*|.\\A+' )	regular expression syntax for not to match anything
re . compile ( 'a^' )	create a regular expression object with a pattern that will match nothing
<A> . columns [ <A> . max ( ) >  <B> ]	drop all columns in dataframe <A> that holds a maximum value bigger than <B>
<A> . date ( ) == datetime . today ( ) . date ( )	check if date <A> is equal to today ' s date
<A> ( '\x1b[1m'   + <B> )	<A> bold text <B>
re . sub ( '.{20}(.mkv)' , '\\1' , <A> )	remove 20 symbols in front of '.' in string <A>
[ 'a' , 'c' , 'b' , 'obj' ]	Define a list with string values ['a', 'c', 'b', 'obj']
""""" "" "" """" . join ( <A> . split ( ) )"	substitute multiple whitespace with single whitespace in string <A>
<A> ( '{:.100f}' . format ( <B> <C> <D> ) )	<A> a floating point number <B> <C> <D> without any truncation
( <A>   <B> <C> )	check if key <A> <B> <C>
( <A>   <B> <C> )	check if key <A> <B> <C>
( <A>   <B> <C> )	check if key <A> <B> <C>
Blog . objects . filter ( pk__in = [ 1 , 4 , 7 ] )	create a django query for a list of values 1, 4, 7
f = open ( <A> , 'rb' )	read a binary file <A>
format ( <A> , <B> ) . replace ( <B> , <C> ) . replace ( <D> , <B> )	insert <C> between every three digit before <D> and replace <B> with <D> in <A>
pd . merge ( <A> , <B> , left_on = <C> , right_on = <D> )	join pandas data frame <A> and <B> with left join by <C> and right join by <D>
np . isnan ( <A> ) . sum ( ) / np . prod ( <A> . shape )	calculate ratio of sparsity in <A> numpy array <A>
sorted ( iter ( <A> . items ( ) ) , <B> = lambda k_v : k_v [ 1 ] [ 2 ] , <C> = True )	<C> sort items in default dictionary <A> by the third item in each <B> ' s list of values
sorted ( list ( <A> . items ( ) ) , key = lambda v : v [ 1 ] )	sort dictionary <A> in ascending order based on second elements of its values
sorted ( list ( <A> . items ( ) ) , key = lambda k_v : k_v [ 1 ] , <B> = True )	<B> sort dictionary <A> based on its values
sorted ( list ( <A> . items ( ) ) , key = lambda k_v : k_v [ 1 ] )	sorting a defaultdict <A> by value
f = <A> ( os . path . join ( __location__ , <B> ) )	<A> a file <B> in the same directory as a python script
f = <A> ( <B> , <C> )	<A> the file <B> in <C> mode
{ k : ( float ( <A> [ k ] ) / <B> [ k ] ) for k in <A> }	divide the values with same keys of two dictionary <B> and <A>
{ <A> : ( <B> [ <A> ] / <C> [ <A> ] ) <D> <A> <E> list ( <C> . keys ( ) ) &  <B> }	divide the value <D> each key <A> <E> dict <B> by the value <D> the same key <A> <E> dict <C>
dict ( ( k , float ( <A> [ k ] ) / <B> [ k ] ) for k <C> <A> )	divide values associated with each key <C> dictionary <B> from values associated with the same key <C> dictionary <A>
<A> . to_csv ( <B> , date_format = <C> )	write dataframe <A> to csv file <B> with dates formatted as yearmonthday <C>
<A> . pop ( <B> , None )	remove a key <B> from a dictionary <A>
b = np . where ( np . isnan ( <A> ) , 0 , <A> )	replace NaN values in array <A> with zeros
<A> . call ( <B> , <C> = True )	<A> run command <B> through the <C>
subprocess . call ( <A> , shell = True )	run command <A> on command line tools as separate processes
<A> = urllib . request . urlopen ( url , urllib . parse . unquote ( urllib . parse . urlencode ( params ) ) )	replace percent - encoded code in request <A> to their single - character equivalent
""""" <A> """" . rstrip ( )"	remove white spaces from the end of string <A>
urllib . parse . quote ( <A> . encode ( 'utf-8' ) )	replace special characters in utf -8 encoded string <A> using the % xx escape
np . array ( map ( int , <A> ) )	create an array containing the conversion of string <A> into separate elements
print ( np . array ( list ( mystr ) , dtype = int ) )	convert a string 'mystr' to numpy array of integer values
<A> = cv2 . imread ( <B> , 0 )	convert an rgb image <B> into grayscale <A>
<A> . sort ( key = lambda x : x [ 2 ] , reverse = True )	sort list <A> in descending order based on the second item of each tuple in it
subprocess . call ( <A> , <B> = True )	execute <B> command <A> with a |  pipe in it
len ( <A> ) - len ( <A> . rstrip ( '?' ) )	count the number of trailing question marks in string <A>
df [ df . columns [ 1 : ] ] . replace ( '[\\$,]' , '' , regex = True ) . astype ( float )	remove dollar sign '$' from second to last column data in dataframe 'df' and convert the data into floats
<A> . merge ( <B> , how = 'left' , <C> = <D> )	merge column <D> in dataframe <B> with column <D> <C> dataframe <A>
print ( '' . join ( '' . join ( i ) for i <A> zip ( a2 , a1 ) ) + <B> [ -1 ] if len ( <B> ) % 2 else '' )	switch positions of each two adjacent characters <A> string <B>
<A> . attributes ( '-topmost' , True )	make a window <A> jump to the front
<A> . lift ( )	make a window <A> jump to the front
<A> ( int ( '' . join ( [ str ( int ( b ) ) for b in <B> ] ) , 2 ) )	convert list of booleans <B> into a <A> string
<A> ( <B> ( b << i for i , b in enumerate ( reversed ( <C> ) ) ) )	convert the <B> of list <C> into a <A> presentation
<A> ( ( <B> , <C> , <D> , <E> ) )	<A> the string <B> , the value of the variable <C> , the string <D> and the value of the variable <E> in one <A> call .
<A> ( 'Total score for {} is {}' . format ( name , score ) )	<A> multiple arguments 'name' and 'score' .
<A> ( 'Total score for %s is %s  '   % ( <B> , <C> ) )	<A> a string using multiple strings <B> and <C>
<A> ( ( 'Total score for' , <B> , 'is' , <C> ) )	<A> string including multiple variables <B> and <C>
url ( '^$' , TemplateView . as_view ( template_name = <A> ) )	serve a static html page <A> at the root of a django project
<A> [ <A> [ 'A' ] . isin ( [ 3 , 6 ] ) ]	use a list of values [3,6] to select rows from a pandas dataframe <A> 's column ' A '
system ( '/path/to/my/venv/bin/python myscript.py' )	execute python code myscript.py in a virtualenv /path/to/my/venv from matlab
<A> . objects . values_list ( <B> , flat = True )	django return a QuerySet list containing the values of field <B> in model <A>
re . findall ( '\\d|\\d,\\d\\)' , <A> )	find all digits in string <A> and put them to a list
input ( <A> )	prompt string <A> to the console
""""" ""ABC"" """" . encode ( 'hex' )"	"print string ""ABC"" as hex literal"
db . Doc . update ( { '_id' : b [ '_id' ] } , { '$set' : { <A> : myGeolocCountry }} )	insert a new field <A> on an existing document 'b' using pymongo
re . sub ( 'l+' , 'l' , 'lollll' )	Write a regex statement to match 'lol' to 'lolllll' .
rows = <A> . findAll ( <B> ) [ 4 : : 5 ]	BeautifulSoup find all <B> elements in HTML string <A> at the five stride starting from the fourth element
plt . gca ( ) . invert_xaxis ( )	reverse all x - axis points in pyplot
plt . gca ( ) . invert_yaxis ( )	reverse y - axis in pyplot
pd . concat ( [ GOOG , AAPL ] , keys = [ 'GOOG' , 'AAPL' ] , axis = 1 )	stack two dataframes next to each other in pandas
return HttpResponse ( <A> . dumps ( <B> ) , content_type = 'application/json' )	create a <A> response <B>
<A> . decode ( 'string_escape' )	decode escape sequences in string <A>
hashlib . md5 ( open ( <A> , 'rb' ) . read ( ) ) . hexdigest ( )	calculate the md5 checksum of a file named <A>
[ k for k , v in <A> . items ( ) if v == <B> ]	find all keys from a dictionary <A> whose values are <B>
{ k for d in <A> for k in list ( d . keys ( ) ) }	create a set containing all keys '  names from dictionary <A>
<A> ( [ i for s in [ <B> ( d . keys ( ) ) for d in <C> ] for i in s ] )	create a <A> containing all keys names from <B> of dictionaries <C>
[ i for s in [ <A> ( d . keys ( ) ) for d in <B> ] for i in s ]	extract all keys from a <A> of dictionaries <B>
<A> , <B> = zip ( * list ( <C> . items ( ) ) )	unpack <A> and <B> of a dictionary <C> into two lists
int ( Decimal ( <A> ) )	convert a string <A> containing a decimal to an integer
numpy . in1d ( <A> , <B> ) . all ( )	check if array <A> contains all elements of array <B>
<A> . array ( [ ( x <B> a ) for x <B> b ] )	<A> : check if array 'a' contains all the numbers <B> array 'b' .
<A> . draw_networkx_labels ( G , <B> , <C> )	Draw node <C> <C> on <A> graph G  at position <B>
<A> = [ <B> [ : ] for <B> in <C> ]	make a <B> - by - <B> copy <A> of array <C>
X = <A> . loadtxt ( <B> , delimiter = ',' )	create 2 D <A> array from the data provided in <B> with each row in the file having same number of values
matching = [ s for s in <A> if <B>   in s ]	get a list of items from the list <A> that contain string <B>
<A> . to_csv ( <B> , sep = '\t' )	export a pandas data frame <A> to a file <B> and retain the indices
<A> . rsplit ( ',' , 1 )	split a string <A> on last delimiter
<A> ( isinstance ( x , <B> ) for x <C> <D> )	check if <A> elements <C> list <D> are tupples of long and <B>
<A> ( isinstance ( x , int ) for x <B> lst )	check if <A> elements <B> a list 'lst' are the same type 'int'
<A> . strip ( )	strip a string <A> of all carriage returns and newlines
driver . execute_script ( 'window.scrollTo(0, Y)' )	scroll to the bottom of a web page using selenium webdriver
driver . execute_script ( 'window.scrollTo(0, document.body.scrollHeight);' )	scroll a to the bottom of a web page using selenium webdriver
datetime . datetime . combine ( <A> , datetime . time ( ) )	convert Date object <A> into a DateTime object
print ( <A> ( x <B> <C> for x <B> <D> ) )	check if <A> item from list <D> is <B> list <C>
scipy . misc . imsave ( <A> , <B> )	save a numpy array <B> as an image <A>
<A> = re . sub ( ' ?\\([^)]+\\)' , '' , <A> )	remove anything in parenthesis from string <A> with a regex
<A> = re . sub ( ' ?\\(\\w+\\)' , '' , <A> )	remove word characters in parenthesis from string <A> with a regex
<A> = re . sub ( ' \\(\\w+\\)' , '' , <A> )	remove all data inside parenthesis in string <A>
len ( set ( <A> ) . intersection ( <B> ) ) >  0	check if any elements in one list <A> are in another list <B>
i = int ( <A> , 16 )	convert hex string <A> to decimal
int ( '0xff' , 16 )	"convert hex string ""0xff"" to decimal"
int ( 'FFFF' , 16 )	"convert hex string ""FFFF"" to decimal"
ast . literal_eval ( <A> )	convert hex string <A> to decimal
int ( <A> , 16 )	convert hex string <A> to decimal
<A> . system ( 'screencapture screen.png' )	take screenshot 'screen.png' on mac <A> x
driver . set_window_size ( 1400 , 1000 )	Set a window size to 1400, 1000 using selenium webdriver
unicodedata . normalize ( 'NFKD' , <A> ) . encode ( 'ascii' , 'ignore' )	replace non - ascii chars from a unicode string u <A>
pandas . concat ( [ <A> , <B> ] ) . drop_duplicates ( ) . reset_index ( drop = True )	concatenate dataframe <A> with <B> whilst remove duplicates
<A> = numpy . fromfile ( <B> , dtype = numpy . float32 )	construct an array with data type float32 <A> from data in binary file <B>
<A> . call ( <B> , shell = True )	execute a mv command <B> in <A>
<A> ( <B> . encode ( 'utf-8' ) )	<A> a character that has unicode value <B>
<A> . SequenceMatcher ( None , <B> . read ( ) , <C> . read ( ) )	compare contents at filehandles <B> and <C> using <A>
dict ( ( k , int ( v ) ) for k , v in ( <A> . split ( ' - ' ) for <A> in s . split ( <B> ) ) )	create a dictionary from string <A> separated by - and <B>
<A> ( i <B> ( 1 , 2 , 3 , 4 , 5 ) for i <B> ( 1 , 6 ) )	check if <A> elements <B> a tuple (1, 6) are <B> another (1, 2, 3, 4, 5)
<A> [ <B> ] . map ( lambda t : t . date ( ) ) . unique ( )	extract unique dates from time series <B> in dataframe <A>
""""" ""{:>7s}"" """" . format ( <A> )"	right align string <A> with a width of 7
open ( <A> , 'rb' ) . read ( 200 )	read an excel file <A>
<A> . sort_values ( [ <B> , <C> ] , <D> = [ True , False ] , inplace = True )	sort dataframe <A> based on column <B> in <D> and column <C> in descending
<A> . sort_values ( [ <B> , <C> ] , <D> = [ True , False ] )	sort dataframe <A> based on column <B> in <D> and column <C> in descending
df1 . sort ( [ <A> , <B> ] , <C> = [ True , False ] , inplace = True )	sort a pandas data frame with column <A> in <C> and <B> in descending order
df . sort ( [ <A> , <B> ] , <C> = [ True , False ] )	sort a pandas data frame by column <A> in <C> , and by column <B> in descending order
<A> ( <B> )	django <A> to view <B>
[ x for x in <A> if x not in [ 2 , 3 , 7 ] ]	remove all values within one list [2, 3, 7] from another list <A>
out = '' . join ( c for c in <A> if c not in ( <B> , <C> , <D> ) )	remove the punctuation <B> , <C> , <D> from a string <A>
<A> . find ( <B> , { <C> : <D> } ) [ <E> ]	BeautifulSoup get value associated with attribute <E> where attribute <C> is equal to <D> in tag <B> in HTML parsed string <A>
urllib . parse . unquote ( <A> )	unquote a urlencoded unicode string <A>
urllib . parse . unquote ( <A> ) . decode ( 'utf8' )	decode <A> <A> from UTF -16 code to UTF -8 code
del <A> [ : ]	empty a list <A>
del lst1 [ : ]	empty a list lst
<A> [ : ] = [ ]	empty a list <A>
<A> [ : ] = [ ]	empty a list <A>
<A> . reset_index ( 0 ) . reset_index ( drop = True )	reset index of series <A>
<A> [ <B> ] . getText ( ) . encode ( <C> )	convert unicode text from list <A> with index <B> to normal text <C>
[ ( y - x ) for x , y <A> zip ( <B> , <B> [ 1 : ] ) ]	create a list containing the subtraction of each item <A> list <B> from the item prior to it
print ( re . search ( <A> , <B> ) . group ( 1 ) )	get value in string <B> matched by regex pattern <A>
globals ( ) . update ( importlib . import_module ( <A> ) . __dict__ )	import all classes from module <A>
""""" """" """" . join ( [ 'a' , 'b' , 'c' , 'd' ] )"	convert a list of characters ['a', 'b', 'c', 'd'] into a string
<A> . split ( <B> )	"slice <A> with <B> as delimiter to get ""http://www.domainname.com/page?CONTENT_ITEM_ID=1234"" from <A> ""http://www.domainname.com/page?CONTENT_ITEM_ID=1234&param2&param3
"""
od = collections . OrderedDict ( sorted ( <A> . items ( ) ) )	sort dictionary <A> by key
OrderedDict ( sorted ( list ( <A> . items ( ) ) , <B> = ( lambda t : t [ 0 ] ) ) )	sort a dictionary <A> by <B>
response = requests . put ( <A> , data = json . dumps ( data ) , headers = headers )	execute a put request to the <A> <A>
re . sub ( '[\\W_]+' , <A> , s )	replace everything that is not an alphabet or a digit with <A> in 's' .
[ ( x + y ) for x in <A> for y in <B> ]	create a list of aggregation of each element from list <A> to all elements of list <B>
dict ( [ x . split ( '=' ) for x in s . split ( ) ] )	convert string x'  to dictionary splitted by  = `  using list comprehension
<A> . pop ( <B> )	remove index <B> element from a list <A>
<A> = <A> . replace ( 'M' , '' )	"Delete character ""M"" from a string <A> using python"
<A> ( x * y for x , y <B> zip ( <C> , <D> ) )	get the <A> of the products of each pair of corresponding elements <B> lists <C> and <D>
<A> ( x * y for x , y in <A> ( zip ( <B> , <C> ) ) )	sum the products of each two elements at the same index of <A> <B> and <A> <C>
<A> ( i * j for i , j in zip ( <B> , <C> ) )	<A> the product of each two items at the same index of list <B> and list <C>
<A> ( x * y for x , y in list ( zip ( <B> , <C> ) ) )	<A> the product of elements of two lists named <B> and <C>
<A> . write ( open ( <B> , 'rb' ) . read ( ) )	write the content of file <B> to file <A>
new_list = [ ( x + <A> ) for x <B> <C> ]	add <A> to each integer value <B> list <C>
[ x for x <A> <B> if x >= <C> ]	get a list of all items <A> list <B> with values greater than <C>
plt . plot ( list ( range ( 10 ) ) , <A> )	set color marker styles <A> in matplotlib
plt . plot ( <A> ( <B> ( <C> ) ) , linestyle = '--' , marker = 'o' , color = 'b' )	set circle markers on plot for individual points defined in <A> [1,2,3,4,5,6,7,8,9,10] created by <B> ( <C> )
[ i . split ( <A> , 1 ) [ 0 ] for i <B> <C> ]	split strings <B> list <C> on the first occurring tab <A> and enter only the first resulting substring <B> a new list
<A> = [ i . split ( '\t' ) [ 0 ] for i <B> <A> ]	split each string <B> list <A> on the tab character
sum ( your_list )	Sum numbers in a list 'your_list'
<A> ( ) . set_trace ( )	attach debugger pdb to class <A>
result = { k : <A> . get ( v ) for k , v <B> list ( <C> . items ( ) ) }	Compose keys from dictionary <C> with respective values <B> dictionary <A>
<A> . datetime <B> ( ) + <A> . timedelta ( days = 1 , <C> = 3 )	add one day and three <C> to the present time from <A> <B> ( )
dict ( ( v , k ) for k , v <A> <B> . items ( ) )	switch keys and values <A> a dictionary <B>
print ( sorted ( <A> , key = lambda x : int ( x . split ( <B> ) [ 2 ] ) ) )	sort a list <A> by number after second <B>
any ( d [ 'name' ] == 'Test'   for d <A> <B> )	"check if the value of the key ""name"" is ""Test"" <A> a list of dictionaries <B>"
<A> [ : ] = [ x for x in <A> if x != [ <B> , <B> ] ]	remove all instances of [ <B> , <B> ] from list <A>
[ x for x in <A> if x != [ 1 , 1 ] ]	remove all instances of [1, 1] from <A> list <A>
b = { <A> [ i ] : <A> [ i + 1 ] for i in range ( 0 , len ( <A> ) , 2 ) }	convert <A> list 'a' to <A> dictionary where each even element represents the key to the dictionary , and the following odd element is the value
len ( set ( <A> ) ) == len ( <A> )	check whether elements in list <A> appear only once
print ( <A> . md5 ( open ( <B> , 'rb' ) . read ( ) ) . hexdigest ( ) )	Generate MD5 checksum of file in the path <B> in <A>
""""" """" """" . join ( x . upper ( ) if random . randint ( 0 , 1 ) else x for x <A> <B> )"	randomly switch letters '  cases <A> string <B>
"os . system ( 'GREPDB=""echo 123""; /bin/bash -c ""$GREPDB""' )"	force bash interpreter '/bin/bash' to be used instead of shell
"os . system ( '/bin/bash -c ""echo hello world""' )"	"Run a command ""echo hello world"" in bash instead of shell"
getattr ( <A> , <B> )	access the class variable <B> from a class object <A>
Image . open ( <A> ) . show ( )	Display a image file <A>
""""" <A> """" . replace ( ""'"" , <B> )"	replace single quote character in string <A> with empty string <B>
<A> . sort ( key = <B> )	sort list <A> based on variable <B>
<A> . replace ( ' ' , '' )	remove all whitespace in a string <A>
<A> . strip ( )	remove whitespace in string <A> from beginning and end
<A> = re . sub ( '\\s+' , '' , <A> , flags = re . UNICODE )	remove all whitespaces in string <A>
<A> = '' . join ( <A> . split ( ) )	remove all whitespaces in a string <A>
<A> ( <B> . values ( ) )	<A> all the values in a counter variable <B>
np . sqrt ( ( ( <A> - <B> ) ** 2 ) . sum ( -1 ) )	find the euclidean distance between two 3 - d arrays <A> and <B>
<A> = [ {} , {} , {} ]	create list <A> containing 3 empty dictionaries
weekly = [ sum ( visitors [ x : x + <A> ] ) for x in range ( 0 , len ( <B> ) , <A> ) ]	find the sums of length <A> subsets of a list <B>
del <A> [ <B> ]	Delete an element <B> from a dictionary <A>
{ i : <A> [ i ] for i in <A> if ( i != <B> ) }	Delete an element <B> from <A> dictionary <A>
<A> . pop ( 'hello' )	"Delete an element ""hello"" from a dictionary <A>"
del <A> [ <B> ]	Delete an element with <B> <B> dictionary <A>
np . linalg . solve ( np . dot ( <A> . T , <A> ) , np . dot ( <A> . T , <B> ) )	solve for the least squares '  solution of matrices <A> and <B>
pd . concat ( [ <A> . drop ( <B> , axis = 1 ) , pd . DataFrame ( <A> [ <B> ] . tolist ( ) ) ] , axis = 1 )	split dictionary / list inside a pandas column <B> into separate columns in dataframe <A>
[ { <A> : x [ <A> ] . lower ( ) }  for x <B> <C> ]	lowercase string values with key <A> <B> a list of dictionaries <C>
""""" "" "" """" . join ( <A> )"	convert a list <A> into string with values separated by spaces
re . sub ( <A> , <B> , <C> )	replace each occurrence of the pattern <A> within <C> with <B>
<A> ( n ) == <A> ( n ) [ : : -1 ]	check if string <A> is palindrome
ftp . storbinary ( 'STOR myfile.txt' , open ( <A> , 'rb' ) )	upload binary file <A> with ftplib
re . sub ( '.*I' , <A> , <B> )	remove all characters from string <B> upto character <A>
<A> ( <B> . replace ( ',' , '' ) )	parse a comma - separated string number <B> into <A>
pd . merge ( <A> , <B> , left_index = True , right_index = True , how = 'outer' )	combine dataframe <A> and dataframe <B> by index number
<A> ( <B> . values ( ) )	check if <A> boolean values in a python dictionary <B> are true
<A> . c_contofficeID . str . replace ( <B> , '' )	use regex pattern <B> to remove digit 12 if followed by 4 other digits in column c_contofficeID of dataframe <A>
<A> [ : : ( -1 ) ]	reverse a list <A>
reversed ( <A> )	reverse a list <A>
<A> . reverse ( )	reverse a list <A>
<A> ( reversed ( <B> ) )	reverse a <A> <B>
[ tup [ 0 ] for tup <A> <B> ]	get first element of each tuple <A> list <B>
newcontents = <A> . replace ( <B> , <C> ) . replace ( <D> , <E> )	replace character <B> with character <C> and character <D> with character <E> in file <A>
<A> . dumps ( [ dict ( list ( <B> . items ( ) ) ) for <B> in rs ] )	serialise SqlAlchemy RowProxy object <B> to a <A> object
config_file = os . path . expanduser ( <A> )	get file <A>
request . params . getall ( 'c' )	get multiple parameters with same name from a url in pylons
np . corrcoef ( <A> )	convert array <A> into a correlation matrix
print ( max ( 1 , 2 , 3 ) )	find the greatest number in set (1, 2, 3)
self . request . get ( <A> )	Retrieve parameter <A> from a get request .
<A> [ 'x' ] . apply ( lambda x , y : x + y , args = ( <B> , ) )	"add <B> to each element of column ""x"" in dataframe <A>"
<A> . objects . order_by ( '-pet__age' ) [ : <B> ]	Django get first <B> records of model <A> ordered by criteria 'age' of model 'pet'
time . sleep ( 5 )	"delay for ""5"" seconds"
<A> . sleep ( <B> )	make a <B> seconds <A> delay
sleep ( <A> )	make a <A> seconds time delay
<A> . sleep ( <B> )	make a <B> seconds <A> delay
<A> . sleep ( <B> )	make a <B> seconds <A> delay
[ x for x in <A> if not any ( c . isdigit ( ) for c in x ) ]	From a list of strings <A> , remove the values that contains numbers .
<A> [ <B> ] . apply ( lambda x : x [ len ( x ) / 2 - 1 : len ( x ) / 2 + 1 ] )	get the middle two characters of a string <B> in a pandas dataframe <A>
<A> . grid ( True )	draw a grid line on every tick of plot <A>
sorted ( <A> , key = lambda x : ( -1 * c [ x ] , <A> . index ( x ) ) )	sort list <A> based on each element ' s number of occurrences
[ max ( len ( str ( x ) ) for x <A> line ) for line <A> zip ( * <B> ) ]	get the value with the maximum length <A> each column <A> array <B>
<A> . Country . value_counts ( ) . reset_index ( name = <B> )	get the count of each unique value in column Country of dataframe <A> and store in column <B>
<A> . set_index ( 'Date' ) . diff ( )	calculat the difference between each row and the row previous to it in dataframe <A>
<A> . update ( [ 3 , 4 ] )	append values [3, 4] to <A> set <A>
<A> [ 1 : : 2 ] = <B>	set every two - stride far element to <B> starting from second element in array <A>
<A> . groupby ( <B> ) [ <C> ] . rank ( ascending = False )	get rank of rows from highest to lowest of dataframe <A> , grouped by value in column <B> , according to value in column <C>
<A> . strptime ( <B> , '%a, %d %b %Y %H:%M:%S %Z' )	convert js date object <B> to python <A>
struct . pack ( '<I' , 1633837924 )	convert a binary value '1633837924' to string
<A> . append ( <B> )	append string <B> to <A> <A>
<A> . insert ( <B> , <C> )	insert string <C> at position <B> of <A> <A>
theset = set ( k . lower ( ) for k <A> <B> )	convert keys <A> dictionary <B> into case insensitive
""""" ""{s:{c}^{n}}"" """" . format ( s = <A> , n = <B> , c = <C> )"	pad <A> up to a length of <B> characters with <C>
isinstance ( <A> , str )	check if type of variable <A> is a string
isinstance ( <A> , str )	check if type of a variable <A> is string
dict ( pair for d in <A> for pair in <B> ( d . items ( ) ) )	convert <B> of dictionaries <A> into a flat dictionary
{ k : v for d <A> <B> for k , v <A> <C> ( d . items ( ) ) }	merge a <C> of dictionaries <A> <C> <B> into a single dict
df . sort_values ( [ <A> , <B> ] , <C> = [ True , False ] , inplace = True )	sort a pandas data frame according to column <A> in <C> and <B> in descending order
df . sort ( [ <A> , <B> ] , <C> = [ True , False ] , inplace = True )	sort a pandas data frame by column <A> in <C> and <B> in descending order
eval ( <A> )	run the code contained in string <A>
[ { <A> : <B> , <C> : <D> , <E> : <F> , <E> : <D> } , { <A> : <B> , <C> : <D> , <E> : <B> , <E> : <G> } ]	creating a list of dictionaries [ { <A> : <B> , <C> : <D> , <E> : <F> , <E> : <D> } , { <A> : <B> , <C> : <D> , <E> : <B> , <E> : <G> } ]
<A> ( itertools . product ( * <B> ) )	get all possible combination of items from 2 - dimensional <A> <B>
<A> . groupby ( [ 'Country' , 'Item_Code' ] ) [ [ <B> , <C> , <D> ] ] . sum ( )	"get sum of values of columns <B> , <C> , <D> after group by on columns ""Country"" and ""Item_code"" in dataframe <A> ."
<A> = [ ( el , <B> ) for el <C> [ a , b , c , d ] ]	create list <A> containing permutations of each element <C> list [a, b, c, d] with variable <B> as tuples
<A> = <A> [ numpy . logical_not ( numpy . isnan ( <A> ) ) ]	remove Nan values from array <A>
os . path . join ( * x . split ( os . path . sep ) [ 2 : ] )	remove first directory from path '/First/Second/Third/Fourth/Fifth'
<A> = <A> . replace ( <B> , <C> )	replace <B> with <C> in a string <A>
subprocess . call ( <A> , shell = True )	call bash command <A> with pipe
""""" ""437c2123"" """" . decode ( 'hex' )"	convert a hex string 437c2123  according to ascii value .
[ k for k , v <A> <B> . _fields . items ( ) if v . required ]	get a list of all fields <A> class <B> that are marked required
<A> = <A> . ix [ : , 0 : 2 ]	remove column by index [:, 0:2] in dataframe <A>
<A> = map ( <B> , <A> . split ( ) )	change a string of integers <A> separated by spaces to a list of <B>
<A> = [ int ( i ) for i in <A> . split ( ) ]	convert a string of integers <A> separated by spaces to a list of integers
driver . find_element_by_css_selector ( <A> )	find element by css selector <A>
webbrowser . open ( 'file:///my_pdf.pdf' )	display a pdf file that has been downloaded as my_pdf.pdf
<A> = <A> . replace ( '\\', ' ' )	replace backslashes in string <A> with empty string ''
<A> . replace ( '\\', ' ' )	remove backslashes from string <A>
df . replace ( <A> , 'NaN' )	"replace value <A> in any column of pandas dataframe to ""NaN"""
<A> . datetime . now ( ) . date ( )	convert <A> object to date object in python
[ elem . tag for elem <A> <B> . iter ( ) ]	get all sub - elements of an element <B> <A> an elementtree
[ elem . tag for elem in <A> . iter ( ) if elem is not <A> ]	get all sub - elements of an element tree <A> excluding the root element
sorted ( <A> , <B> = lambda x : x [ <C> ] != <D> )	move dictionaries in list <A> to the end of the list if value of <B> <C> in each dictionary is not equal to <D>
<A> ( value == <B> for value in list ( <C> . values ( ) ) )	check if <A> values of a dictionary <C> are zero <B>
<A> . pivot_table ( <B> , rows = 'X' , cols = 'X2' )	produce a pivot table as dataframe using column <B> in datafram <A> to form the axes of the resulting dataframe
<A> . sum ( axis = 0 ) . sum ( axis = 0 )	get a sum of 4 d array <A>
time . mktime ( <A> . timetuple ( ) ) + <A> . microsecond / 1000000.0	convert a datetime object <A> to microtime
<A> [ ( <B> <= <A> [ <C> ] ) &  ( <A> [ <C> ] <= <D> ) ]	select all rows in dataframe <A> where the values of column <C> is bigger than or equal to <B> and smaller than or equal to <D>
sorted ( <A> , key = itemgetter ( <B> ) )	sort a list of lists <A> by index <B> of the inner list
<A> . sort ( key = ( lambda x : x [ <B> ] ) )	sort a list of lists <A> by index <B> of the inner list
sorted ( <A> , key = ( lambda x : x [ <B> ] ) )	sort list <A> by index <B> of the item
sorted_list = sorted ( <A> , key = itemgetter ( <B> , <C> , <D> ) )	sort a list of lists <A> by indices <B> , <C> , <D> of the inner list
np . argwhere ( np . all ( arr == [ [ 0 , <A> ] , [ <A> , 0 ] ] , axis = ( 1 , <B> ) ) )	find rows of <B> d array in <A> d numpy array 'arr' if the row has value '[[0, 3], [3, 0]]'
<A> . loc [ : , ( list ( itertools . product ( [ <B> , <C> ] , [ <D> , <E> ] ) ) ) ]	From multiindexed dataframe <A> select columns <D> and <E> within each higher order column <B> and <C>
data . loc [ : , ( [ ( 'one' , <A> ) , ( 'one' , <B> ) , ( 'two' , <A> ) , ( 'two' , <B> ) ] ) ]	select only specific columns <A> and <B> from a dataframe 'data' with multiindex columns
hashtags = re . findall ( '#(\\w+)' , <A> , re . UNICODE )	match a sharp , followed by letters ( including accent characters ) in string <A> using a regex
os . rename ( <A> , <B> )	Rename file from <A> to <B>
print ( <A> . tostring ( <B> . find ( <C> ) ) )	get all texts and tags from a tag <C> from <A> tag <B> using lxml
json . dumps ( { str ( k ) : v for k , v in <A> . items ( ) } )	Serialize dictionary <A> and its keys to a JSON formatted string
soup = <A> ( <B> . read ( ) . decode ( 'utf-8' ) )	parse UTF -8 encoded HTML <B> <B> to <A> object
os . remove ( <A> )	delete file <A>
min ( [ x for x in <A> if x >  <B> ] )	get the next value greatest to <B> from a list of numbers <A>
<A> [ <B> ] = <C>	replace each value in column <B> of dataframe <A> with string <C>
<A> ( <B> , key = lambda x : ( x <  0 , x ) )	sort list <B> with positives coming before negatives with values <A> respectively
six_months = ( <A> . today ( ) + relativedelta ( <B> = ( + <C> ) ) )	get the <A> <C> <B> from today
( <A> ( 2010 , 12 , 31 ) + relativedelta ( months = ( + <B> ) ) )	get the <A> <B> month from today
( <A> ( 2010 , 12 , 31 ) + relativedelta ( <B> = ( + <C> ) ) )	get the <A> <C> <B> from today
print ( ( datetime . date . today ( ) + datetime . timedelta ( ( ( 6 * 365 ) / 12 ) ) ) . isoformat ( ) )	calculate the date six months from the current date
<A> ( <B> ( <C> . keys ( ) ) , <D> = lambda x : <C> [ x ] [ <E> ] , reverse = True )	get a <B> of keys of dictionary <C> <A> by the value of nested dictionary <D> <E>
<A> [ np . arange ( len ( <A> ) ) != <B> ]	get all the values from <A> numpy array <A> excluding index <B>
[ <A> for <A> in lst <B> <C> ( <A> ) != <D> ]	delete all elements from a list <A> <B> a function <C> taking value as parameter returns <D>
<A> . set_index ( <B> )	set dataframe <A> index using column <B>
<A> = [ line . split ( ',' ) for line in open ( <B> ) ]	read lines from a csv file <B> into a list of lists <A>
[ i for i in range ( 100 ) if i >  10 if i <  20 ]	list comprehension that produces integers between 11 and 19
""""" """" """" . join ( [ c for c in <A> if c . isdigit ( ) ] )"	get only digits from a string <A>
re . split ( '\\t+' , <A> . rstrip ( <B> ) )	split a string <A> based on tab <B>
( <A> . T * <B> ) . T	scalar multiply matrix <A> by <B>
'test string\n' . rstrip ( )	"remove trailing newline in string ""test string\n"""
<A> . rstrip ( '\n' )	remove trailing newline in string <A>
<A> . strip ( )	remove newline in string <A>
<A> . rstrip ( )	remove newline in string <A> on the right side
<A> . lstrip ( )	remove newline in string <A> on the left side
<A> . rstrip ( '\r\n' )	remove newline in string <A>
<A> . rstrip ( '\r\n' )	remove newline in string <A> on the right side
<A> . rstrip ( '\r\n' )	remove newline in string <A> on the right side
'Hello\n\n\n' . rstrip ( '\n' )	"remove newline in string ""Hello\n\n\n"" on the right side"
re . findall ( '.{,16}\\b' , <A> )	split string <A> into chunks of 16 characters each
[ [ <A> [ i ] [ j ] for j <B> range ( len ( <A> [ i ] ) ) ] for i <B> range ( len ( <A> ) ) ]	get a list comprehension <B> list of lists <A>
<A> . encode ( 'latin-1' )	convert unicode string <A> to byte string
<A> . groupby ( ( <A> . a == <B> ) . shift ( 1 ) . fillna ( 0 ) . cumsum ( ) )	split dataframe <A> where the value of column a is equal to <B>
urllib . request . urlretrieve ( 'http://search.twitter.com/search.json?q=hi' , 'hi.json' )	save json output from a url ‘ http : // search .twitter .com / search .json ? q = hi ’  to file ‘ hi .json ’  in Python 2
<A> . where ( ( <B> == 0 ) ) [ 0 ]	find indices of elements equal to zero from <A> array <B>
sys . stdout . flush ( )	flush output of python print
str ( <A> )	convert <A> to string
<A> . __str__ ( )	convert <A> to string
str ( <A> )	convert <A> to string
<A> . sort ( key = operator . itemgetter ( 1 ) )	sort list of lists <A> by the second item in each list
print ( str ( <A> ) + <B>   + str ( <C> ) )	Print variable <A> and variable <C> with space string <B> in between
<A> . fillna ( method = 'ffill' , inplace = True )	change NaN values in dataframe <A> using preceding values in the frame
text . config ( <A> = DISABLED )	change the <A> of the Tkinter Text widget to read only i .e . disabled
<A> ( map ( ord , <B> ) )	python <A> of ascii values of all characters in a <B> <B>
<A> ( <B> <C> ( * <D> ) )	apply <B> <C> to elements of a <A> of lists <D>
'{:,}' . format ( <A> )	print number <A> as thousands separators
<A> [ <A> . Col1 . isin ( [ 'men' , 'rocks' , 'mountains' ] ) ]	get rows of dataframe <A> where column Col1 has values ['men', 'rocks', 'mountains']
[ x [ <A> ] <B> x <C> <D> ]	get the value at index <A> <B> each tuple <C> the list of tuples <D>
'\u0440\u0430\u0437 \u0434\u0432\u0430 \u0442\u0440\u0438' . split ( )	"split unicode string ""раз два три"" into words"
<A> . objects . extra ( select = { <B> : 'Length(name)' } ) . order_by ( <B> )	sort query set by number of characters in a field <B> in django model <A>
min ( <A> , <B> = lambda x : ( abs ( <C> - x [ <D> ] ) , - x [ 'pixels' ] ) )	get a dictionary in list <A> which <B> <D> is closer to a global value <C>
<A> [ ~ <A> . mask ]	get the non - masked values of array <A>
re . findall ( '\\b[A-Z]' , <A> )	find all words containing letters between A and Z in string <A>
<A> = [ ( [ <B> ] * <C> ) for i in range ( <C> ) ]	create a list <A> containing <C> lists , each of <C> items all set to <B>
np . vstack ( np . meshgrid ( <A> , <B> , <C> ) ) . reshape ( <D> , -1 ) . T	creating a numpy array of <D> d coordinates from three 1 d arrays <A> , <B> and <C>
<A> [ <A> != <B> ] . min ( )	find the minimum value in a numpy array <A> excluding <B>
browser . find_elements_by_xpath ( <A> ) . text	get the text of multiple elements found by xpath <A>
"browser . find_elements_by_xpath ( ""//*[@type='submit']"" ) . get_attribute ( <A> )"	find all the values in attribute <A> for the tags whose type attribute is 'submit' in selenium
pd . DataFrame ( <A> . columns [ <B> <C> ( <A> . values ) ] , <A> . index , <B> . unique ( <A> . values ) )	sort the values of the dataframe <A> and align the columns accordingly based on the obtained indices after <B> <C> .
datetime . datetime . today ( ) . strftime ( '%Y-%m-%d' )	getting today ' s date in YYYY - MM - DD
urllib . parse . quote_plus ( <A> )	urlencode a querystring <A> in python 2
<A> ( ' ' . join ( sorted ( <B> , key = lambda k : len ( <B> [ k ] ) , reverse = True ) ) )	sort a dictionary <B> by length of its values and <A> as string
map ( <A> , zip ( * [ ( 1 , 2 ) , ( 3 , 4 ) , ( 5 , 6 ) ] ) )	convert tuple elements in <A> [(1,2),(3,4),(5,6),] into lists
[ ( x , y ) <A> x , y <B> zip ( myList , myList [ 1 : ] ) if y == <C> ]	create a list of tuples which contains number <C> and the number before it , <A> each occurrence of <C> <B> the list 'myList'
driver . get ( 'http://www.google.com.br' )	navigate to webpage given by url http://www.python.org using Selenium
b = <A> . decode ( 'utf8' ) [ : : -1 ] . encode ( 'utf8' )	reverse <A> UTF -8 string 'a'
dparser . parse ( <A> , fuzzy = True )	extract date from a string <A>
dparser . parse ( <A> , fuzzy = True )	extract date from a string <A>
dparser . parse ( <A> , fuzzy = True )	extract date from a string <A>
dict ( map ( lambda s : s . split ( ':' ) , [ 'A:1' , 'B:2' , 'C:3' , 'D:4' ] ) )	convert a list ['A:1', 'B:2', 'C:3', 'D:4'] to dictionary
re . search ( '[a-zA-Z]' , <A> )	check if string <A> contains any upper or lower - case ASCII letters
DataFrame ( { 'count' : <A> . groupby ( [ 'Name' , 'City' ] ) . size ( ) } ) . reset_index ( )	convert a pandas <A> groupby object to dataframe
re . sub ( '[^0-9]' , '' , 'sdkjh987978asd098as0980a98sd' )	remove all non - numeric characters from string sdkjh987978asd098as0980a98sd 
[ y for y <A> <B> if y not <A> <C> ]	get items from list <B> that don ' t appear <A> list <C>
<A> . groupby ( <B> ) . head ( 4 )	extract the first four rows of the column <B> from a pandas dataframe <A>
zip ( * <A> )	Unzip a list of tuples <A> into a list of lists
dict ( zip ( [ 1 , 2 , 3 , 4 ] , [ 'a' , 'b' , 'c' , 'd' ] ) )	combine two lists [1, 2, 3, 4] and ['a', 'b', 'c', 'd'] into a dictionary
dict ( zip ( [ 1 , 2 , 3 , 4 ] , [ 'a' , 'b' , 'c' , 'd' ] ) )	combine two lists [1, 2, 3, 4] and ['a', 'b', 'c', 'd'] into a dictionary
<A> . url	retrieve the path from a Flask <A>
<A> . replace ( '\\r' , <B> )	replace carriage return in string <A> with empty string <B>
simplejson . dumps ( dict ( [ ( <A>   % k , v ) for k , v in list ( <B> . items ( ) ) ] ) )	serialize dictionary <B> as a JSON formatted string with each key formatted to pattern <A>
<A> . strptime ( 'Jun 1 2005  1:33PM' , '%b %d %Y %I:%M%p' )	"parse string ""Jun 1 2005  1:33PM"" into <A> by format ""%b %d %Y %I:%M%p"""
parser . parse ( 'Aug 28 1999 12:00AM' )	"parse string ""Aug 28 1999 12:00AM"" into datetime"
os . path . split ( os . path . abspath ( existGDBPath ) )	get absolute folder path and filename for file existGDBPath 
os . path . dirname ( os . path . abspath ( existGDBPath ) )	extract folder path from file path
requests . post ( <A> , <B> = { 'test' : 'cheers' } )	execute a post request to url <A> with <B> data {'test': 'cheers'}
<A> = [ x for x <B> <A> <C> x [ <D> ] not <B> <E> ]	remove dictionary from list <A> <C> the value associated with its key <D> is <B> list <E>
{{ <A> . args . get ( <B> ) }}	get a <A> parameter <B> in jinja2
<A> ( range ( <B> , <C> ) )	create a <A> of integers between 2 values <B> and <C>
<A> [ <B> ] = <A> [ <B> ] . astype ( <C> ) . astype ( <D> )	Change data type of data in column <B> of dataframe <A> into <C> and then to <D>
<A> ( <B> , key = lambda x : x [ 1 ] )	find the list in a list of lists <B> with the <A> value of the second element .
your_string . strip ( '0' )	remove leading and trailing zeros in the string 'your_Strip'
<A> ( permutations ( <A> ( range ( 9 ) ) , 2 ) )	generate a <A> of all unique pairs of integers in range(9)
re . compile ( <A> , re . MULTILinE )	create a regular expression that matches the pattern <A> over multiple lines of text
re . compile ( '^(.+)\\n((?:\\n.+)+)' , re . MULTILinE )	"regular expression ""^(.+)\\n((?:\\n.+)+)"" matching a multiline block of text"
call ( [ <A> , <B> , <C> ] )	Run <B> file with python location <A> and arguments <C> as a subprocess
<A> . sort ( key = operator . itemgetter ( 2 , 3 ) )	sort <A> multidimensional list <A> by second and third column
final_choices = ( ( <A> , ) + <B> )	add a tuple with value <A> to a tuple <B>
final_choices = ( ( <A> , ) + <B> )	add a tuple with value <A> to a tuple <B>
os . getcwd ( )	find the current directory
os . path . realpath ( __file__ )	find the current directory
os . path . dirname ( <A> )	get the directory name of <A>
os . path . realpath ( <A> )	get the canonical <A> of file <A>
dir_path = os . path . dirname ( os . path . realpath ( __file__ ) )	find name of current directory
cwd = os . getcwd ( )	find current directory
full_path = os . path . realpath ( __file__ )	find the full path of current directory
<A> [ <A> [ : , ( 2 ) ] . argsort ( ) ]	sort array <A> in ascending order by values of the 3 rd column
<A> . sort ( <B> , axis = 0 )	sort rows of <A> matrix <B> in ascending order according to all column values
re . split ( '[ .]' , <A> )	"split string <A> on space "" "" and dot character ""."""
shutil . copy ( <A> , <B> )	copy the content of file <A> to file <B>
print ( '' . join ( choice ( ascii_uppercase ) for i in range ( <A> ) ) )	generate random upper - case ascii string of <A> characters length
[ '' . join ( seq ) for seq <A> zip ( <B> , <B> [ 1 : ] ) ]	merge the elements <A> a list <B> sequentially
<A> . rename ( columns = { <B> : <C> } , inplace = True )	rename column <B> in dataframe <A> to <C>
print ( <A> . get_text ( ) )	convert a beautiful <A> html <A> to text
sorted ( <A> , key = operator . itemgetter ( 1 ) , reverse = True )	sort list <A> in descending order based on the second element of each list inside list <A>
<A> [ <B> ] . replace ( [ <C> , <D> ] , [ <E> , <F> ] , inplace = True )	replace value <C> with <E> and value <D> with <F> in column <B> of dataframe <A>
re . split ( '\\W+' , <A> )	split string <A> on punctuation
re . match ( '(.*?[.?!](?:\\s+.*?[.?!]){0,1})' , <A> ) . group ( 1 )	extract first two substrings in string <A> that end in . , ? or !
print ( [ a for a , b in re . findall ( '((\\w)\\2*)' , <A> ) ] )	split string <A> into strings of repeating elements
print ( <A> . join ( OrderedDict . fromkeys ( <B> ) ) )	create new string with unique characters from <B> seperated by <A>
print ( ' ' . join ( <A> ( <B> ) ) )	create a <A> from string <B> to remove duplicate characters
[ x for x <A> <B> . namelist ( ) if x . endswith ( <C> ) ]	list folders <A> zip <B> 'file' that ends with <C>
<A> . count ( <B> )	find the count of a word <B> in a string <A>
print ( <A> . join ( [ item [ 0 ] for item in <B> ] ) )	reduce the first element of list of strings <B> to a string , separated by <A>
<A> . seek ( 2 )	Move the cursor of file pointer <A> at the end of the file .
print ( zip ( my_list [ 0 : : 2 ] , my_list [ 1 : : 2 ] ) )	convert a flat list into a list of tuples of every two items in the list , in order
my_new_list = zip ( my_list [ 0 : : <A> ] , my_list [ 1 : : <A> ] )	group a list of ints into a list of tuples of each <A> elements
sys . setdefaultencoding ( 'utf8' )	set the default encoding to 'utf-8'
datetime . datetime . now ( ) . strftime ( <A> )	formate current date and time to a string using pattern <A>
print ( re . findall ( '[\\u0600-\\u06FF]+' , <A> ) )	retrieve arabic texts from string <A>
<A> . groupby ( <A> . index . map ( lambda t : t . minute ) )	group dataframe <A> based on minute interval
<A> [ <B> ] [ <C> ]	access value associated with key <C> of key <B> from dictionary <A>
<A> . dropna ( subset = [ <B> , <C> , <D> ] , how = 'all' )	remove all null values from columns <B> , <C> and <D> of dataframe <A>
<A> . insert ( 0 , <B> )	insert <A> list <B> at the front of list <A>
<A> = <A> [ : <B> ] + <C> + <A> [ <B> : ]	insert elements of list <C> into list <A> at position <B>
np . flatnonzero ( x ) . mean ( )	calculate the mean of the nonzero values '  indices of dataframe df
<A> [ <B> ] = <A> [ <C> ] . dt . date	get date from dataframe <A> column <C> to column <B>
[ x for x <A> <B> if x not <A> <C> ]	remove elements <A> list <C> from list <B>
[ '' . join ( x ) for x <A> <B> ]	join elements of each tuple <A> list <B> into one string
<A> ( map ( '' . join , <B> ) )	join items of each tuple in <A> of tuples <B> into <B> <A> of strings
re . split ( '\n\\s*\n' , <A> )	match blank lines in <A> with regular expressions
""""" ""{0:,.2f}"" """" . format ( <A> )"	convert float <A> to comma - separated string
<A> ( ** <B> )	pass dictionary items <B> as keyword arguments in function <A>
sum ( ( 1 for <A> in open ( <B> ) ) )	get <A> count of file <B>
print ( <A> ( <B> , -1 ) )	<A> <B> to be an integer
[ x for y , x in sorted ( zip ( <A> , <B> ) ) ]	sort list <B> based on values from another list <A>
[ x for y , x in sorted ( zip ( Y , X ) ) ]	sorting list 'X' based on values from another list 'Y'
datetime . date ( 2010 , 6 , 16 ) . isocalendar ( ) [ 1 ]	get equivalent week number from a date 2010/6/16 using isocalendar
<A> . iloc [ : , ( np . r_ [ <B> : 10 , ( <C> ) , ( <D> ) , <E> : 100 ] ) ]	select multiple ranges of columns <B> -10 , <C> , <D> , and <E> -100 in pandas dataframe <A>
<A> . groupby ( <B> ) . agg ( { 'returns' : [ np . mean , np . sum ] } )	apply two different aggregating functions mean and sum to the same column <B> in pandas data frame <A>
<A> . lower ( )	convert string <A> to lowercase
<A> . decode ( 'utf-8' ) . lower ( )	convert utf -8 string <A> to lowercase
urlfetch . fetch ( <A> , deadline = 10 * 60 )	handle the urlfetch_errors  exception for imaplib request to <A> <A>
print ( <A> [ 0 : <B> ] )	output first <B> characters in a string <A>
<A> ( numpoints = 1 )	make matplotlib plot <A> put marker in <A> only once
dict ( ( x , <A> ( y ) &  <A> ( <B> . get ( x , ( ) ) ) ) for x , y in <C> . items ( ) )	get <A> intersection between dictionaries <B> and <C>
numpy . loadtxt ( open ( <A> , 'rb' ) , delimiter = ',' , skiprows = 1 )	convert csv file <A> into two - dimensional matrix
Sample . objects . filter ( date__range = [ <A> , <B> ] )	filter the objects in django model 'Sample' between date range <A> and <B>
<A> . objects . filter ( date__year = <B> , date__month = '01' )	filter objects month wise in django model <A> for year <B>
<A> [ <B> ] = { 'spam' : 5 , 'ham' : 6 }	create a dictionary {'spam': 5, 'ham': 6} into another dictionary <A> field <B>
numpy . apply_along_axis ( numpy . linalg . norm , 1 , <A> )	apply numpy.linalg.norm to each row of <A> matrix <A>
dict ( ( k , v ) for d <A> <B> for k , v <A> list ( d . items ( ) ) )	merge dictionaries form array <B> <A> a single expression
print ( <A> . decode ( 'string_escape' ) )	convert escaped utf string to utf string in <A>
sum ( [ True , True , False , False , False , True ] )	counting the number of true booleans in a python list [True, True, False, False, False, True]
<A> . set_size_inches ( <B> , <C> , forward = True )	set the size of figure <A> in inches to width height of <B> , <C>
'hello there %(5)s'   % { '5' : 'you' }	format string with dict {'5': 'you'} with integer keys
map ( int , <A> . split ( <B> ) )	convert a string of numbers <A> separated by <B> into a list of integers
[ int ( s ) for s in example_string . split ( ',' ) ]	convert a string of numbers 'example_string' separated by comma into a list of numbers
<A> = [ i [ 0 ] for i in <A> ]	flatten list <A>
y = map ( operator . itemgetter ( 0 ) , <A> )	convert list <A> into a flat list
<A> = [ i [ 0 ] for i <B> <C> ]	get a list <A> of the first element of every tuple <B> list <C>
results = [ item [ 'value' ] for item in test_data ]	extract all the values of a specific key named 'values' from a list of dictionaries
<A> . datetime . now ( ) . isoformat ( )	get current <A> in ISO format
<A> . datetime . utcnow ( ) . isoformat ( )	get UTC <A> in ISO format
<A> . apply ( ' ' . join , axis = 0 )	merge all columns in dataframe <A> into one column
pd . DataFrame ( <A> . values - <B> . values , columns = <A> . columns )	pandas subtract a row from dataframe <B> from dataframe <A>
print ( open ( <A> , <B> ) . read ( ) )	read file <A> using universal newline mode <B>
<A> ( <B> . decode ( <C> ) . split ( ) )	<A> <B> <B> from text file with <C> format
<A> = <B> . open ( <C> , 'r' , <D> = <E> )	open a text <A> <C> in <B> module with <D> <E>
s1 = pd . merge ( <A> , <B> , how = 'inner' , <C> = [ <D> ] )	join data of dataframe <A> with data in dataframe <B> based <C> similar values of column <D> in both dataframes
<A> . decode ( 'utf8' ) . encode ( 'utf8' )	check if string <A> is UTF -8 encoded
<A> . shape	get the dimensions of numpy array <A>
N . shape ( <A> )	get the dimensions of numpy array <A>
N . shape ( <A> )	get the dimensions of array <A>
<A> . shape	get the dimensions of numpy array <A>
[ i for i , v <A> enumerate ( <B> ) if v [ 0 ] == <C> ]	get the indices of tuples <A> list of tuples <B> where the first value is <C>
struct . unpack ( '<L' , <A> ) [ 0 ]	convert string of bytes <A> into an int
<A> [ [ 0 , 1 , 1 ] , [ 1 , 0 , 2 ] ]	get the first row , second column ; second row , first column , and first row third column values of numpy array <A>
<A> ( powerset ( <B> ) )	create a <A> with permutations of string <B>
s in [ 'true' , '1' , 't' , 'y' , 'yes' , 'yeah' , 'yup' , 'certainly' , 'uh-huh' ]	convert string to boolean from defined set of strings
urllib . parse . quote ( <A> )	replace special characters in url <A> using the '%xx' escape
<A> . savefig ( <B> )	Save plot <A> as svg file <B>
len ( <A> )	count the number of elements in array <A>
sys . path . insert ( 0 , <A> )	insert directory <A> to current directory
<A> . execute ( 'inSERT OR replace inTO master.table1 SELECT * FROM table1' )	"insert records in bulk from ""table1"" of ""master"" DB to ""table1"" of sqlite3 <A> object"
re . match ( <A> , <B> )	Match regex <A> on string <B>
re . match ( <A> , <B> )	match regex <A> on string <B>
int ( 'deadbeef' , 16 )	"convert hex string ""deadbeef"" to integer"
int ( 'a' , 16 )	"convert hex string ""a"" to integer"
int ( '0xa' , 16 )	"convert hex string ""0xa"" to integer"
int ( <A> , 16 )	convert hex string <A> to integer
<A> ( <B> , 16 )	convert hex string <B> to <A>
"<A> ( 'Value is ""'   + str ( value ) + '""' )"	<A> variable value  without spaces
"print ( 'Value is ""{}""' . format ( <A> ) )"	Print a string <A> with string formatting
{{ <A> |  <B> ( <C> ) }}	Jinja <B> elements of array <A> with space string <C>
help ( 'modules' )	get a list of locally installed Python modules
[ [ [ x [ 0 ] ] for x <A> <B> [ i ] ] for i <A> range ( len ( <B> ) ) ]	get only first element <A> each of the innermost of the multidimensional list <B>
sorted ( <A> , key = str . upper )	sort a string <A> in lexicographic order
sorted ( sorted ( <A> ) , key = str . upper )	sort string <A> in lexicographic order
<A> ( <B> , key = str . lower )	get a <A> list of the characters of string <B> in lexicographic order , with lowercase letters first
pd . merge ( df1 , df2 , on = [ <A> , <B> , <C> , <D> ] , how = 'inner' )	find all the rows in Dataframe 'df2' that are also present in Dataframe 'df1' , for the columns <A> , <B> , <C> and <D> .
dict ( ( v , k ) for k , v <A> <B> . items ( ) )	reverse key - value pairs <A> a dictionary <B>
<A> . decode ( 'unicode_escape' )	decode unicode string <A> into a readable unicode literal
[ int ( i ) for i in <A> ]	convert list of strings <A> into list of integers
map ( int , [ '1' , '2' , '3' ] )	convert a list with string ['1', '2', '3'] into list with integers
<A> ( map ( <B> , [ '1' , '2' , '3' ] ) )	convert <A> with str into <A> with <B>
<A> . find_all ( 'a' , href = re . compile ( 'http://www\\.iwashere\\.com/' ) )	find all anchor tags in html <A> whose url begins with http://www.iwashere.com
soup . find_all ( 'a' , href = re . compile ( <A> ) )	find all anchors with a hyperlink that matches the pattern <A>
<A> . call ( [ 'java' , '-jar' , <B> ] )	execute a jar file <B> using <A>
cursor . execute ( 'inSERT inTO table (`column1`) VALUES (%s)' , ( <A> , ) )	insert row into mysql database with column 'column1' set to the <A> <A>
<A> = re . sub ( '\\.com$' , '' , <A> )	"remove a substring "".com"" from the end of string <A>"
print ( <A> . replace ( '.com' , '' ) )	"remove a substring "".com"" from the end of string <A>"
<A> ( ', ,' . join ( [ str ( i [ 0 ] ) for i in <B> ] ) )	<A> each first value from a list of tuples <B> with string formatting
max ( min ( <A> , <B> ) , <C> )	clamping floating number <A> to be between <C> and <B>
re . findall ( '\\w+|[^\\w\\s]' , <A> , re . UNICODE )	split a unicode string <A> into a list of words and punctuation characters with a regex
result = <A> . engine . execute ( <B> )	execute raw sql queue <B> in database <A> in sqlalchemy - flask app
sys . exit ( 0 )	quit program
""""" """" """" . join ( c for c <A> <B> if c . isdigit ( ) )"	get digits <A> string <B>
re . split ( ' +' , <A> )	split string <A> on one or more spaces with a regular expression
<A> ( <A> ( <B> , 'id' , None ) , <C> , None )	Evaluate a nested dictionary myobject.id.number to get <C> if <B> is present with <A>
{ i : ( i * 2 ) for i in range ( 10 ) }	convert generator object to a dictionary
dict ( ( i , i * 2 ) for i in range ( 10 ) )	convert generator object to a dictionary
plt . cla ( )	Matplotlib clear the current axes .
<A> = <B> ( <C> ( item ) for item in <D> . split ( ',' ) )	split string <D> into <C> values and write <B> to <A>
bin ( ord ( <A> ) )	convert ascii value <A> to binary
<A> ( my_string . split ( <B> , 1 ) [ 1 ] )	<A> a string after a specific substring <B> in string my_string 
print ( <A> [ <B> ] [ 0 ] [ <C> ] )	get value of key <C> associated with first index of key <B> of dictionary <A>
<A> = re . sub ( '([aeiou]):(([aeiou][^aeiou]*){3})$' , '\\1\\2' , <A> )	remove colon character surrounded by vowels letters in string <A>
"<A> . loads ( '{""foo"": 42, ""bar"": ""baz""}' ) [ <B> ]"	extract data field <B> from <A> object
data = json . loads ( <A> )	convert JSON <A> <A> to Python object
data = json . loads ( <A> )	convert JSON <A> <A> to Python object
re . findall ( '#(\\w+)' , <A> )	pars a string <A> to extract hashtags into an array
<A> ( e <B> <C> for e <B> <D> )	do a boolean check if a string <C> contains <A> of the items <B> list <D>
plt . figure ( figsize = ( <A> , <B> ) )	change figure size to <A> by <B> in matplotlib
<A> . translate ( None , <B> . punctuation )	Strip punctuation from <B> <A>
<A> . urlsafe_b64decode ( <B> . encode ( 'ascii' ) )	django urlsafe <A> decode string <B> with decryption
len ( dict_test ) + sum ( len ( v ) for v <A> dict_test . values ( ) )	get the number of all keys <A> the nested dictionary dict_list
<A> ( <B> ) . split ( 'x' ) [ 1 ]	return the conversion of decimal <B> to <A> without the '0x' prefix
<A> ( str ( <B> ) )	create a <A> containing digits of number <B> as its elements
[ int ( x ) for x in str ( <A> ) ]	converting integer <A> to list
br . select_form ( nr = 0 )	select a first form with no name in mechanize
json . load ( codecs . open ( <A> , 'r' , <B> ) )	open file <A> in read mode with encoding of <B>
<A> . loads ( open ( <B> ) . read ( ) . decode ( 'utf-8-sig' ) )	load <A> file <B> with utf -8 bom header
<A> = smtplib . SMTP ( <B> , <C> )	setup a smtp mail <A> to <B> with port <C>
int ( '{:08b}' . format ( <A> ) [ : : -1 ] , 2 )	revers correlating bits of integer <A>
<A> . set_index ( [ <B> ] , append = True )	add column <B> to index of dataframe <A>
list ( <A> . items ( ) )	get keys and items of dictionary <A>
<A> ( <B> . items ( ) )	get keys and items of dictionary <B> as a <A>
session . query ( <A> ) . filter ( <A> . time_spent >  timedelta ( <B> = <C> ) ) . all ( )	query all data from table <A> where the value of column time_spent is bigger than <C> <B>
os . system ( 'msbuild project.sln /p:Configuration=Debug' )	compile Visual Studio project project.sln from the command line through python
<A> ( list ( <B> . keys ( ) ) , <C> = int )	get <A> <C> in dictionary <B>
os . system ( <A> )	execute command <A> from python script
<A> . __name__	get a name of function <A> as a string
np . all ( <A> == <A> [ ( 0 ) , : ] , axis = 0 )	check if all values in the columns of <A> numpy matrix <A> are same
sorted ( <A> , key = lambda x : ( sum ( x [ 1 : 3 ] ) , x [ 0 ] ) )	sort list <A> in ascending order based on the addition of the second and third elements of each tuple in it
sorted ( <A> , key = lambda x : ( <B> ( x [ 1 : 3 ] ) , x [ 0 ] ) , reverse = True )	sort <A> list of tuples <A> by the <B> of second and third element of each tuple
sorted ( <A> , key = lambda x : ( <B> ( x [ 1 : ] ) , x [ 0 ] ) )	sorting a list of tuples <A> by the <B> of the second elements onwards , and third element of the tuple
sorted ( <A> , key = lambda x : ( <B> ( x [ 1 : ] ) , x [ 0 ] ) , <C> = True )	sort the list of tuples <A> by the <B> of every value except the first and by the first value in <C> order
response . headers [ 'WWW-Authenticate' ] = <A>	add header 'WWWAuthenticate' in a flask app with value <A>
del request . session [ <A> ]	clear session key <A>
datetime . datetime . strptime ( <A> , <B> ) . date ( )	convert date string <A> to date object in format <B>
re . sub ( '[^\\x00-\\x7F]+' , ' ' , <A> )	replace non - ASCII characters in string <A> with a single space
<A> = [ i for i in range ( <B> ) ]	get a list <A> from 1 to <B>
[ m [ 0 ] for m in re . compile ( <A> ) . findall ( <B> ) ]	use regex pattern <A> to split string <B>
[ i [ 0 ] for i in re . findall ( <A> , <B> ) ]	use regular expression <A> to split string <B>
fig . subplots_adjust ( wspace = 0 , hspace = 0 )	remove the space between subplots in matplotlib .pyplot
<A> [ : : -1 ]	reverse list <A>
<A> . writerow ( <B> )	write a list of strings <B> to csv object <A>
{{ ( item . date |  <A> ) : <B> }}	Jinja2 formate <A> item.date accorto pattern <B>
re . split ( '(?<=[\\.\\?!]) ' , <A> )	split a string <A> with comma , question mark or exclamation by non - consuming regex using look - behind
re . compile ( <A> )	create a regular expression object with the pattern <A>
<A> = [ ]	declare an array <A>
intarray = <A> ( <B> )	declare an <A> with element <B>
[ sublist [ : : -1 ] for sublist in <A> [ : : -1 ] ]	given list <A> , reverse the all sublists and the list itself
""""" """" """" . join ( [ 'I ' , '<' , '3s U ' , '&' , ' you luvz me' ] )"	unescape special characters without splitting data in array of strings ['I ', u'<', '3s U ', u'&', ' you luvz me']
<A> . disable ( <A> . CRITICAL )	disable <A> while running unit tests in python django
cursor . execute ( 'inSERT inTO index(url) VALUES(%s)' , ( <A> , ) )	adding <A> <A> to mysql row
<A> [ <B> ] = <A> [ <C> ] . dt . strftime ( '%d%m%Y' )	convert column of date objects <C> in pandas dataframe <A> to strings in new column <B>
<A> . split ( <B> ) [ 0 ]	split string <A> by <B> and get the first element
<A> . query ( 'index < @start_remove or index > @end_remove' )	drop rows of dataframe <A> whose index is smaller than the value of start_remove or bigger than the value of end_remove
<A> . loc [ ( <A> . index <  <B> ) |  ( <A> . index >  <C> ) ]	Drop the rows in pandas timeseries <A> from the row containing index <B> to the row containing index <C>
<A> . isnull ( ) . sum ( )	get the number of NaN values in each column of dataframe <A>
<A> . reset_index ( inplace = True )	reset index of dataframe <A> so that existing index values are transferred into <A> as columns
[ x [ <A> ] for x in <B> ]	generate a list containing values associated with the key <A> of each dictionary inside list <B>
np . array ( [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ] ) . tolist ( )	convert numpy array into python list structure
ast . literal_eval ( <A> )	converting string <A> to a tuple
<A> . sort ( key = lambda x : x [ 1 ] )	keep a list <A> of lists sorted as it is created by second element
<A> ( map ( <A> , set ( map ( lambda i : tuple ( i ) , <B> ) ) ) )	remove duplicated items from <A> of lists <B>
[ <A> ( i ) <B> i in set ( tuple ( i ) <B> i in <C> ) ]	uniqueness <B> <A> of lists <C>
return <A> . groups . filter ( name = <B> ) . exists ( )	in django , check if a <A> is in a group <B>
return <A> . groups . filter ( name__in = [ 'group1' , 'group2' ] ) . exists ( )	check if a <A> <A> is in a group from list of groups ['group1', 'group2']
logging . getLogger ( ) . setLevel ( logging . DEBUG )	Change log level dynamically to 'DEBUG' without restarting the application
""""" """" """" . join ( str ( i ) for i <A> ( 34.2424 , -64.2344 , 76.3534 , 45.2344 ) )"	Concat each values <A> a tuple (34.2424, -64.2344, 76.3534, 45.2344) to get a string
""""" """" """" . join ( [ <A> [ x : x + 2 ] [ : : -1 ] for x <B> range ( 0 , len ( <A> ) , 2 ) ] )"	swap each pair of characters <B> string <A>
plt . savefig ( <A> , <B> = <C> )	save current figure to file <A> with resolution of <C> <B>
<A> = [ [ x for x <B> sublist <C> x not <B> to_del ] for sublist <B> <A> ]	delete items from list <A> <C> the item exist <B> list to_dell
[ item for item <A> <B> if 1 <A> item ]	find all the elements that consists value '1' <A> <B> list of tuples 'a'
[ item for item <A> <B> if item [ 0 ] == <C> ]	find all elements <A> <B> list of tuples <B> where the first element of each tuple equals <C>
{ p . id : { 'id' : p . id , 'position' : ind }  for ind , p <A> <B> ( <C> ) }	get the index value <A> list <C> using <B> <A> list comprehension
exec ( compile ( open ( <A> ) . read ( ) , <A> , 'exec' ) )	load a file <A> into the python console
<A> = session . query ( <B> ) . count ( )	SQLAlchemy count the number of <A> in table <B>
dfs = pd . read_excel ( <A> , sheetname = None )	read excel file <A> using pandas
struct . unpack ( 'd' , binascii . unhexlify ( <A> ) )	unpack the binary data represented by the hexadecimal string <A> to a float
<A> [ tuple ( <B> ) ]	get index of numpy array <A> with another numpy array <B>
map ( <A> , permutations ( [ 2 , 3 , 4 ] ) )	find all possible sequences of elements in a <A> [2, 3, 4]
<A> ( <B> , key = <C> . index )	sort a list <B> based on another <A> list <C>
<A> = pd . DataFrame ( <B> , index = np . arange ( len ( <C> ) ) , columns = <D> )	create a dataframe <A> filled with zeros with indices from <B> to length of <C> and column names from <D>
<A> . find ( <B> )	find the index of sub string <B> in <A>
<A> . find ( <B> )	find the index of sub string <B> in <A>
<A> . index ( <B> )	find the index of sub string <B> in string <A>
<A> . index ( <B> )	find the index of sub string <B> in string <A>
<A> . find ( <B> )	find the index of sub string <B> in string <A>
<A> . find ( <B> )	find the index of sub string <B> in string <A>
<A> . find ( <B> , <C> )	find the index of sub string <B> in string <A> starting from index <C>
<A> . find ( <B> , <C> )	find the index of sub string <B> in string <A> starting from index <C>
<A> . find ( <B> , <C> )	find the index of sub string <B> in string <A> starting from index <C>
<A> . find ( <B> , <C> , <D> )	find the index of sub string <B> in string <A> starting from index <C> and ending at index <D>
sorted ( d , key = lambda x : datetime . datetime . strptime ( x , '%m-%Y' ) )	sort list of date strings 'd'
re . split ( '\\.\\s' , <A> )	get all the sentences from a string <A> using regex
""""" ""foobar"" """" [ : 4 ]"	get all characters in string 'foobar' up to the fourth index
s . rfind ( <A> )	cut a string by delimiter <A>
s [ : s . rfind ( <A> ) ]	cut a string using delimiter <A>
"driver . find_element_by_xpath ( ""//option[@value='"" + <A> + ""']"" ) . click ( )"	find a tag option whose value attribute is <A> in selenium
open ( <A> , 'a+b' ) . write ( <B> )	append to file <A> content <B>
print ( [ i for i in re . split ( '([\\d.]+|\\W+)' , <A> ) if i ] )	split string <A> into tokens
re . findall ( '[\u4e00-\u9fff]+' , <A> )	find all Chinese characters in string <A>
s . split ( <A> )	split string <A> by letter <A>
subprocess . Popen ( [ 'rm' , '-r' , 'some.file' ] )	run shell command 'rm -r some.file' in the background
dict ( ( d [ 'name' ] , d ) for d in <A> )	convert a list of dictionaries ` <A> into a dictionary of dictionaries
datetime . datetime . now ( ) . strftime ( '%Y-%m-%d %H:%M' )	print current date and time in a regular format
<A> . strftime ( '%Y-%m-%d %H:%M' )	print current date and <A> in a regular format
re . findall ( '[bcdfghjklmnpqrstvwxyz]+' , 'CONCERTATION' , re . IGNORECASE )	find consecutive consonants in a word CONCENTRATION using regex
[ i for i , e <A> enumerate ( <B> ) if e != 0 ]	get <B> list of indices of non zero elements <A> <B> list <B>
map ( int , re . findall ( '\\d+' , string1 ) )	get multiple integer values from a string 'string1'
os . path . dirname ( sys . executable )	get the path of Python executable under windows
<A> . xaxis . set_label_position ( 'top' )	move an x - axis label to the top of a plot <A> in matplotlib
<A> . xaxis . tick_top ( )	move x - axis to the top of a plot <A>
<A> . xaxis . set_ticks_position ( 'top' )	Move x - axis of the pyplot object <A> to the top of a plot in matplotlib
datetime . strptime ( <A> , <B> )	parse string <A> to DateTime object using format <B>
sys . exit ( <A> )	terminate the script using status value <A>
sys . exit ( <A> )	abort the execution of the script using message <A>
sys . exit ( )	abort the execution of a python script
[ max ( abs ( x ) for x <A> <B> [ i : i + <C> ] ) for i <A> range ( 0 , len ( <B> ) , <C> ) ]	find maximum with lookahead = <C> <A> a list <B>
os . chdir ( <A> )	set the current working directory to <A>
os . chdir ( <A> )	set the current working directory to <A> <A>
<A> = [ x for x <B> <C> if <D> isinstance ( x , <E> ) ]	get a list <A> of all the items <B> list <C> that are <D> of type <E>
"tree . xpath ( "".//a[text()='Example']"" ) [ 0 ] . tag"	match contents of an element to 'Example' in xpath ( lxml )
""""" "", "" """" . join ( [ ( str ( k ) + ' '   + str ( v ) ) for k , v <A> list ( <B> . items ( ) ) ] )"	concatenate key / value pairs <A> dictionary <B> with string ', ' into <B> single string
print ( set ( re . sub ( '[\x00-\x7f]' , '' , <A> ) ) )	Strip all non - ASCII characters from a unicode string , <A>
print ( re . sub ( '[\x00-\x7f]' , '' , <A> ) )	get all non - ascii characters in a unicode string <A>
ast . literal_eval ( <A> )	build a dict of key : value pairs from a string representation of a dict , <A>
print ( <A> . decode ( 'unicode_escape' ) )	Print string <A> with proper unicode representations
print ( <A> . encode ( <B> ) . decode ( <C> ) . encode ( <B> ) . decode ( <C> ) )	Normalize string <A> from <B> code to <C> code
zip ( <A> , <B> )	merge lists <A> and <B> into a list of tuples
<A> ( zip ( <B> , b ) )	merge lists <B> and <B> into <B> <A> of tuples
<A> . set_index ( <B> ) . to_dict ( )	convert pandas DataFrame <A> to a dictionary using <B> field as the key
<A> . set_index ( <B> ) [ <C> ] . to_dict ( )	convert pandas dataframe <A> with fields <B> , <C> to dictionary
re . sub ( '\\([^)]*\\)' , '' , <A> )	remove parentheses and text within it in string <A>
""""" ""a b"" """" . replace ( ' ' , '' ) . isalpha ( )"	check if string 'a b' only contains letters and spaces
[ ( <A> + <B> ) for <A> , <B> <C> zip ( <D> , <E> ) ]	sum each element <A> <C> list <D> with element <B> at the same index <C> list <E> .
sorted ( list ( <A> . items ( ) ) , key = lambda item : item [ <B> ] [ <B> ] )	sort a python dictionary <A> by element <B> of the value
sorted ( <A> ( range ( len ( <B> ) ) ) , key = lambda i : <B> [ i ] ) [ -2 : ]	get index of the biggest 2 values of <B> <A> <B>
zip ( * sorted ( enumerate ( <A> ) , key = operator . itemgetter ( 1 ) ) ) [ 0 ] [ -2 : ]	get indexes of the largest 2 values from <A> list <A> using itemgetter
sorted ( <A> ( range ( len ( <B> ) ) ) , key = lambda i : <B> [ i ] , reverse = True ) [ : <C> ]	get the indexes of the largest <C> values from <B> <A> of integers <B>
list ( <A> . keys ( ) ) . index ( <B> )	get index of key <B> in dictionary <A>
print ( <A> . format ( score ) )	Print + 1 using format <A>
[ k for k , g in itertools . groupby ( [ 1 , 2 , 2 , 3 , 2 , 2 , 4 ] ) ]	remove adjacent duplicate elements from a list [1, 2, 2, 3, 2, 2, 4]
""""" <A> """" . split ( <B> )"	split string <A> based on delimiter <B>
[ int ( x ) for x in <A> . split ( ',' ) ]	convert the string <A> to a list of integers
dict ( [ ( 'A' , 1 ) , ( 'B' , 2 ) , ( 'C' , 3 ) ] )	convert list of key - value tuples [('A', 1), ('B', 2), ('C', 3)] into dictionary
np . savetxt ( <A> , <B> )	save numpy array <B> into text file <A>
<A> = subprocess . check_output ( <B> , shell = True )	store the output of command <B> in variable <A>
<A> [ <A> . columns - [ <B> ] ]	get all column name of dataframe <A> except for column <B>
( ( <A> <  <B> ) &  ( <B> <  <C> ) ) . sum ( )	get count of values in numpy array <B> that are between values <A> and <C>
date . today ( ) . strftime ( '%A' )	get day name from a datetime object
{{ car . date_of_manufacture |  <A> }}	Jinja parse <A> object car.date_of_manufacture to use format pattern <A>
{{ <A> . date_of_manufacture . strftime ( <B> ) }}	get the date object date_of_manufacture of object <A> in string format <B>
[ item for <A> in l for item in <A> ]	make a flat list from list of lists <A>
<A> ( itertools . chain ( * <B> ) )	make a flat <A> from <A> of lists <B>
<A> ( itertools . chain . from_iterable ( <B> ) )	make a flat <A> from <A> of lists <B>
ord ( <A> )	convert ascii value <A> to int
re . sub ( '(?m)^[^\\S\\n]+' , <A> , <B> )	replace white spaces in string <B> with empty string <A>
re . sub ( '(?m)^\\s+' , '' , <A> )	remove white spaces from all the lines using a regular expression in string <A>
<A> , <B> , <C> = [ 1 , 2 , 3 ]	destruct elements of list [1, 2, 3] to variables <A> , <B> and <C>
[ <A> ( v ) for k , v in itertools . groupby ( <B> , key = lambda x : x [ : 5 ] ) ]	split <A> <B> into a <A> of lists whose elements have the same first five characters
<A> = re . sub ( '\\(+as .*?\\) ' , '' , <A> )	remove all instances of parenthesesis containing text beginning with as  from string <A>
print ( <A> . rstrip ( '\n' ) )	skip the newline while printing <A>
<A> . index . values . tolist ( )	get index values of pandas dataframe <A> as list
[ i for i , v <A> enumerate ( <B> ) if v >  <C> ]	create <B> list containing the indices of elements greater than <C> <A> list <B>
sorted ( <A> , <B> = True )	<B> list <A>
sorted ( <A> , key = lambda d : d . get ( 'key' , {} ) . get ( 'subkey' ) , <B> = True )	sort list of nested dictionaries <A> in <B> based on values associated with each dictionary 's key ' subkey '
<A> . sort ( key = lambda e : e [ <B> ] [ <C> ] , <D> = True )	sort list of nested dictionaries <A> in <D> order of <B> and <C>
df . round ( )	remove decimal points in pandas data frame using round
gca ( ) . get_lines ( ) [ n ] . get_xydata ( )	get data from matplotlib plot
<A> [ : , -2 : ]	get the maximum 2 values per row in array <A>
<A> . get . get ( 'username' , '' )	"get value for ""username"" parameter in get <A> in Django"
pprint ( dict ( list ( <A> . items ( ) ) ) )	pretty - print ordered dictionary <A>
url ( '^$' , include ( 'sms.urls' ) ) ,	Confirm urls in Django properly
<A> ( '^' , include ( 'sms.urls' ) ) ,	Configure <A> in django properly
max_item = max ( <A> , key = operator . itemgetter ( 1 ) )	get the tuple in list <A> that has the largest item in the second index
max ( <A> , key = operator . itemgetter ( 1 ) )	find tuple in list of tuples <A> with the largest second element
<A> . resample ( '3M' , how = 'sum' )	resample series <A> into 3 months bins and sum each bin
[ <A> [ i ] for i in ( <B> , <C> , <D> ) ]	extract elements at indices ( <B> , <C> , <D> ) from <A> list <A>
[ line for line in open ( <A> ) if <B>   in line ]	filter lines from a text file <A> which contain a word <B>
<A> . datetime . strptime ( <B> , '%Y-%m-%dT%H:%M:%SZ' )	convert a date string <B> to a <A> object
<A> . read_csv ( <B> , sep = '\t' , lineterminator = '\r' )	reading tab - delimited csv file <B> with <A> on mac
<A> . replace ( <B> , '?' , 1 )	replace only first occurence of string <B> from a string <A>
archive . write ( <A> , os . path . basename ( <A> ) )	zip file <A> using its basename as directory name
dict ( x [ 1 : ] for x in reversed ( <A> ) )	create a dictionary of pairs from a list of tuples <A>
[ ( x1 - x2 ) for x1 , x2 in zip ( <A> , <B> ) ]	subtract elements of list <A> from elements of list <B>
<A> [ 0 ] . isdigit ( )	check if <A> <A> starts with a number
<A> . startswith ( ( <B> , <C> , <D> , <E> , <F> , <E> , <G> , <H> , <I> , <J> ) )	check if string <A> starts with any of the elements in list ( <B> , <C> , <D> , <E> , <F> , <E> , <G> , <H> , <I> , <J> )
<A> ( os . path . dirname ( os . path . realpath ( __file__ ) ) )	<A> script ' s directory
re . split ( <A> , <B> )	split string <B> by the occurrences of regex pattern <A>
plt . scatter ( * zip ( * <A> ) )	make a scatter plot using unpacked values of list <A>
<A> ( zip ( * <B> ) )	rearrange <A> of tuples <B>
<A> . groupby ( np . arange ( len ( <A> . columns ) ) // 3 , axis = 1 ) . mean ( )	get average for every three columns in <A> dataframe
""""" """" """" . join ( chr ( i ) for i in <A> )"	convert a list <A> of ascii values to a string
sum ( x == <A> for x <B> list ( <C> . values ( ) ) )	count the number of pairs <B> dictionary <C> whose value equal to <A>
sum ( 1 for x <A> list ( <B> . values ( ) ) if <C> ( x ) )	count the number of values <A> <B> dictionary that are predicate to function <C>
struct . unpack ( 'f' , struct . pack ( 'f' , <A> ) )	convert double <A> to float
<A> = ( <B> - <C> ( 1970 , 1 , 1 ) ) . total_seconds ( )	convert <C> .date <B> to utc <A>
<A> . sort ( <B> )	sort column <B> in panda dataframe <A>
<A> = sorted ( <A> , key = <B> x : x . modified , reverse = True )	sort <A> data <A> in descending order based on the modified attribute of elements using <B> function
<A> ( bool ( <B> ) )	<A> the truth value of <B>
<A> = <A> . rename ( <B> = { <C> : <D> } )	rename <C> row <B> label in dataframe <A> to <D>
km . fit ( <A> . reshape ( -1 , 1 ) )	Fit Kmeans function to a one - dimensional array <A> by reshaping it to be a multidimensional array of single values
sorted ( words , key = lambda x : 'a'   + x if x . startswith ( <A> ) else 'b'   + x )	sort a list of strings 'words' such that items starting with <A> come first .
webbrowser . open ( <A> )	open the login site <A> in the browser
dict ( ( k , v ) for k , v <A> <B> . items ( ) if <C> <  k <  <D> )	fetch all elements <A> a dictionary <B> , falling between two keys <C> and <D>
dict ( ( k , v ) for k , v <A> parent_dict . items ( ) if k >  <B> and k <  <C> )	fetch all elements <A> a dictionary 'parent_dict' where the key is between the range of <B> to <C>
[ list ( x ) for x in zip ( * sorted ( zip ( <A> , <B> ) , key = <C> pair : pair [ 0 ] ) ) ]	sort two lists <A> and <B> together using <C> function
sum ( ( ( i >  <A> ) for i <B> <C> ) )	get the number of values <B> list <C> that is greater than <A>
len ( [ 1 for i <A> <B> if ( i >  <C> ) ] )	get the number of values <A> list <B> that is greater than <C>
[ ( x + tuple ( y ) ) for x , y in <A> ( <A> ( <B> , <C> ) , <D> ) ]	<A> list <B> , <C> , <D> into <B> list of tuples
os . chmod ( <A> , stat . S_IRUSR |  stat . S_IRGRP |  stat . S_IROTH )	changing permission of file <A> to stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH
parser . add_argument ( <A> , nargs = '*' )	argparse associate zero or more arguments with flag <A>
<A> = [ ( i == j ) for i , j <B> zip ( <C> , <D> ) ]	get a list of booleans <A> that shows wether the corresponding items <B> list <C> and <D> are equal
[ ( <A> [ i ] == <B> [ i ] ) for i <C> range ( len ( <A> ) ) ]	create a list which indicates whether each element <C> <A> and <B> is identical
<A> = pd . DataFrame ( <B> = <C> . index )	create an empty data frame <A> with <B> from another data frame <C>
struct . unpack ( 'h' , <A> [ 0 : 2 ] )	unpack first and second bytes of byte string <A> into integer
<A> ( '\n' . join ( '  ' . join ( map ( str , row ) ) for row in <B> ) )	<A> list <B> into a table - like shape
driver . find_element_by_name ( '<check_box_name>' ) . is_selected ( )	check if a checkbox is checked in selenium python webdriver
driver . find_element_by_id ( <A> ) . is_selected ( )	determine if checkbox with id <A> is checked in selenium python webdriver
[ ( a if a else <A> ) for a <B> [ <C> , 1 , <C> , 3 ] ]	replace <C> with <A> <B> the list [0, 1, 0, 3]
<A> . encode ( ) . decode ( 'unicode-escape' )	Produce a string that is suitable as Unicode literal from string <A>
<A> . decode ( 'unicode-escape' )	Parse a unicode string <A>
chr ( int ( 'fd9b' , 16 ) ) . encode ( 'utf-8' )	convert Unicode codepoint to utf8 hex
<A> ( '0x%X'   % <B> )	use upper case letters to <A> hex <B> <B>
<A> = [ x for x <B> <C> if x ]	get a list <A> that contains all non - empty elements <B> list <C>
<A> ( * [ ( int ( i . strip ( ) ) if i else None ) for i in <B> . split ( ':' ) ] )	create a <A> object using string <B>
<A> . find_all ( [ <B> , <C> ] )	find all the tags <B> and <C> from Beautiful Soup object <A>
print ( <A> . __name__ )	get the name of function <A> as a string
""""" """" """" . join ( '{}{}' . format ( key , val ) for key , val in sorted ( <A> . items ( ) ) )"	convert dictionary <A> into string
""""" """" """" . join ( '{}{}' . format ( key , val ) for key , val in list ( <A> . items ( ) ) )"	convert dictionary <A> into string
<A> = <B> [ : ]	copy list <B> as <A>
<A> = <B> ( <C> )	copy <B> <C> as <A>
<A> = <B> . copy ( <C> )	<B> list <C> as <A>
<A> = <B> . deepcopy ( <C> )	deep <B> list <C> as <A>
[ i for i in <A> ]	make a copy of list <A>
<A> . legend ( frameon = False )	remove frame of legend in plot <A>
""""" <A> """" . encode ( 'utf-16' , 'surrogatepass' ) . decode ( 'utf-16' )"	Print a emoji from a string <A> having surrogate pairs
globals ( ) [ <A> ] ( )	calling a function named <A> in the module
urllib . request . urlopen ( 'http://www.stackoverflow.com' ) . getcode ( )	"check the status code of url ""http://www.stackoverflow.com"""
print ( urllib . request . urlopen ( 'http://www.stackoverflow.com' ) . getcode ( ) )	"checking if website ""http://www.stackoverflow.com"" is up"
<A> . find_element_by_css_selector ( <B> ) . click ( )	Selenium <A> click a hyperlink with the pattern <B>
<A> . to_pickle ( <B> )	store data frame <A> to file <B> using pandas , python
<A> . groupby ( by = <A> . columns , axis = 1 ) . mean ( )	calculate the mean of columns with same name in dataframe <A>
<A> . sort ( key = lambda x : ( x . attrb1 , x . attrb2 ) , <B> = True )	sort list <A> by each element ' s attribute attrb1 and attribute attrb2 in <B> order
<A> = <B> . split ( ) [ -1 ]	get <A> value <A> of a png image <B>
<A> . findAll ( <B> , style = <C> )	BeautifulSoup find tag <B> with styling <C> in HTML string <A>
cursor . execute ( <A> , list ( <B> . values ( ) ) )	execute SQL statement <A> with values of dictionary <B> as parameters
df . to_csv ( <A> , index = False , sep = <B> )	convert CSV file <A> to Pandas dataframe using separator <B>
globals ( ) . update ( vars ( args ) )	update the globals() dictionary with the contents of the vars(args) dictionary
re . findall ( '\\[(.*?)\\]' , <A> )	find all substrings in <A> beginning and ending with square brackets
<A> ( '%.2f kg = %.2f lb = %.2f gal = %.2f l'   % ( <B> , <C> , <D> , var4 ) )	format all floating variables <B> , <C> , <D> , <B> to <A> to two decimal places .
<A> = dict ( ( k , v ) for k , v in <A> . items ( ) if v >  0 )	remove all items from a dictionary <A> where the values are less than 1
<A> = { k : v for k , v in list ( <A> . items ( ) ) if v >  <B> }	Filter dictionary <A> to have items with value greater than <B>
pd . to_datetime ( pd . Series ( date_stngs ) )	convert a string of date strings date_stngs  to datetime objects and put them in a dataframe
<A> . iloc [ 2 , 0 ]	get value at index [2, 0] in dataframe <A>
<A> . rcParams . update ( { 'font.size' : <B> } )	change the font size on plot <A> to <B>
<A> . DataFrame ( list ( <B> . items ( ) ) , columns = [ <C> , <D> ] )	converting dictionary <B> into a dataframe <A> with keys as data for column <C> and the corresponding values as data for column <D>
pd . DataFrame ( <A> . values * <B> . values , columns = <A> . columns , <C> = <A> . index )	create a dataframe containing the multiplication of element - wise in dataframe <A> and dataframe <B> using <C> name and column labels of dataframe <A>
re . findall ( '\\d+\\.\\d+' , <A> )	extract floating number from string <A>
re . findall ( '[-+]?\\d*\\.\\d+|\\d+' , <A> )	extract floating point numbers from a string <A>
zip ( <A> , <A> , <A> )	pair each element in list <A> 3 times into a tuple
<A> [ <B> ] . str . lower ( )	lowercase a python dataframe string in column <B> if it has missing values in dataframe <A>
jsobj [ 'a' ] [ 'b' ] [ <A> ] . append ( { 'f' : var6 , 'g' : var7 , 'h' : var8 } )	append dict {'f': var6, 'g': var7, 'h': var8} to value of key <A> in dict jsobj['a']['b']
""""" """" """" . join ( <A> )"	Concat a list of strings <A> using string formatting
<A> ( v for v <B> list ( <C> . values ( ) ) if v >  <D> )	<A> values greater than <D> <B> dictionary <C>
<A> . run ( <B> = True )	run flask application <A> in <B> mode .
<A> . drop ( <A> . index [ [ 1 , 3 ] ] , inplace = True )	drop rows whose index value in list [1, 3] in dataframe <A>
df . apply ( lambda x : x . fillna ( x . mean ( ) ) , axis = 0 )	replace nan values in a pandas data frame with the average of columns
[ o . my_attr for o <A> <B> ]	extract attribute my_attr from each object <A> list <B>
<A> . strftime ( <B> , <A> . gmtime ( os . path . getmtime ( <C> ) ) )	python get <A> stamp on <C> <C> in <B> format
all ( item in list ( <A> . items ( ) ) for item in list ( <B> . items ( ) ) )	check if dictionary <B> is a <B> of dictionary <A>
[ str ( wi ) for wi <A> <B> ]	convert integer elements <A> list <B> to strings
df2 = df . reset_index ( )	Reset the indexes of a pandas data frame
<A> . strftime ( '%m/%d/%Y' )	format datetime in <A> as string in format '%m/%d/%Y
print ( 'Total cost is: ${:,.2f}' . format ( <A> ) )	format floating point number <A> to be rounded off to two decimal places and have a comma thousands '  seperator
<A> . groupby ( np . arange ( len ( <A> . columns ) ) // 2 + 1 , axis = 1 ) . sum ( ) . add_prefix ( 's' )	sum the values in each row of every two adjacent columns in dataframe <A>
<A> = [ <B> . random ( ) for _ in range ( <C> ) ]	create list <A> with <C> <B> floating point numbers between 0.0 and 1.0
print ( soup . find ( 'a' , <A> = re . compile ( '.*follow\\?page.*' ) ) )	find <A> value that has string 'follow?page' inside it
sys . stdout . flush ( )	immediately see output of print statement that doesn ' t end in a newline
<A> , <B> = <C> . choice ( list ( <D> . items ( ) ) )	get a <C> key <A> and value <B> form a dictionary <D>
<A> ( <B> )	split string <B> into a <A> of characters
[ w for w <A> open ( 'file.txt' ) if not re . search ( '[aeiou]{2}' , w ) ]	create a list containing words that contain vowel letter followed by the same vowel <A> file 'file.text'
pat = re . compile ( '^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$' )	Validate IP address using Regex
exec ( compile ( open ( <A> ) . read ( ) , <A> , 'exec' ) )	execute file <A>
session . query ( <A> ) . distinct ( <A> . name ) . group_by ( <A> . name ) . count ( )	SQLAlchemy count the number of rows with distinct values in column name of table <A>
<A> = <A> . dropna ( axis = 1 , how = 'all' )	remove null columns in a dataframe <A>
<A> ( x . count ( <B> ) == 3 for x <C> <D> )	check if <A> lists <C> list <D> have three elements of integer <B>
[ x [ 0 ] for x <A> <B> <C> <D> ( x [ 0 ] == y [ 0 ] for y <A> <E> ) ]	get a list comparing two lists of tuples <B> and <E> <C> <D> first value <A> <B> matches with first value <A> <E>
tex . delete ( '1.0' , END )	clear the textbox text in tkinter
datetime . datetime . fromtimestamp ( <A> ) . strftime ( <B> )	convert long int <A> into date and time represented in the the string format <B>
system ( 'python myscript.py' )	Spawn a process to run python script myscript.py in C + +
<A> . sort ( key = operator . attrgetter ( <B> ) )	sort a list <A> of class objects by their values for the attribute <B>
<A> . sort ( key = lambda x : x . anniversary_score )	sort list <A> by the anniversary_score attribute of each object
print ( type ( tf . Session ( ) . run ( tf . constant ( [ 1 , 2 , 3 ] ) ) ) )	convert a tensor with list of constants [1, 2, 3] into a numpy array in tensorflow
<A> ( itertools . chain ( * <B> ) )	convert <A> <B> from being consecutive sequences of tuples into <B> single sequence of elements
<A> . setdefault ( <B> , <C> )	Set value for key <B> in dict <A> to <C> if key <B> does not exist or if value is none
<A> . groupby ( [ <B> ] ) . mean ( )	Do group by on <B> column in <A> and get its mean
min ( <A> , key = lambda x : abs ( x - <B> ) )	get number in list <A> closest in value to number <B>
<A> ( x <B> <C> for x <B> <D> )	check if <A> of the items <B> <D> appear <B> <C>
print ( <A> . search ( <B> ) . group ( 1 ) )	search for occurrences of regex <A> <A> in string <B>
( <A> . factorize ( ) [ 0 ] + 1 ) . astype ( 'float' )	factorize all string values in dataframe <A> into floats
<A> = [ ( <B> - b ) for <B> , b <C> zip ( <D> , <E> ) ]	get <B> list <A> by subtracting values <C> one list <E> from corresponding values <C> another list <D>
datetime . datetime . strptime ( '2011, 4, 0' , '%Y, %U, %w' )	derive the week start for the given week number and year ‘ 2011 , 4 , 0 ’
map ( int , [ '1' , '-1' , '1' ] )	convert a list of strings ['1', '-1', '1'] to a list of numbers
<A> . datetime . strptime ( '16Sep2012' , '%d%b%Y' )	"create <A> object from ""16sep2012"""
<A> . objects . filter ( <B> = <B> ) . update ( ** <C> )	update fields in Django model <A> with arguments in dictionary <C> where primary key is equal to <B>
<A> . objects . create ( ** <B> )	update the fields in django model <A> using dictionary <B>
<A> ( '{0:.2f}' . format ( <B> ) )	<A> a digit <B> with exactly 2 digits after decimal
<A> . randint ( 100000000000 , 999999999999 )	generate a 12 - digit <A> number
int ( '' . join ( str ( <A> . randint ( 0 , 9 ) ) for _ in range ( <B> ) ) )	generate a <A> <B> - digit number
""""" """" """" . join ( str ( <A> . randint ( 0 , 9 ) ) for _ in range ( <B> ) )"	generate a <A> <B> - digit number
'%0.12d'   % <A> . randint ( 0 , 999999999999 )	generate a 12 - digit <A> number
<A> . delete ( <B> , index )	remove specific elements in <B> <A> array <B>
sorted ( <A> , key = lambda x : trial_dict [ x ] )	sort list <A> based on values of dictionary trail_dict
sys . stdin . read ( 1 )	read a single character from stdin
print ( re . findall ( <A> , <B> ) )	get a list of characters in string <B> matching regex <A> <A>
k = <A> . find ( text = re . compile ( <B> ) ) . parent . text	get the context of a search by keyword <B> in beautifulsoup <A>
<A> . apply ( lambda x : x . tolist ( ) , axis = 1 )	convert rows in pandas data frame <A> into list
<A> = np . reshape ( <B> , ( -1 , <C> ) )	convert a 1 d <B> array to a <C> d array <A>
<A> . run ( <B> = <C> , <D> = <E> , debug = False )	run <A> <A> on <B> <C> and <D> <E> in Flask
print ( <A> . encode ( 'UTF8' ) )	encode unicode string <A> to utf -8 code
[ x [ 0 ] for x in <A> ]	get the first element of each tuple from a list of tuples <A>
re . findall ( '-(?!aa-|bb-)([^-]+)' , <A> )	regular expression matching all but 'aa' and 'bb' for <A> <A>
re . findall ( '-(?!aa|bb)([^-]+)' , string )	regular expression matching all but 'aa' and 'bb'
{ k : v for k , v in list ( <A> . items ( ) ) if v }	remove false entries from a dictionary <A>
dict ( ( k , v ) for k , v in <A> . items ( ) if v )	get a dictionary from a dictionary <A> where the values are present
sorted ( <A> , key = operator . itemgetter ( <B> ) )	sort list <A> based on the value of variable <B> for each object in list <A>
<A> . sort ( key = operator . attrgetter ( <B> ) )	sort a list of objects <A> by a member variable <B>
somelist . sort ( key = lambda x : x . resultType )	sort a list of objects 'somelist' where the object has member number variable resultType
df1 . merge ( df2 , <A> = <B> ) . merge ( df3 , <A> = <B> )	join multiple dataframes d1 , d2 , and d3 <A> column <B>
decimal . Decimal ( <A> . randrange ( 10000 ) ) / 100	generate <A> Decimal
onlyfiles = [ f for f in listdir ( <A> ) if isfile ( join ( <A> , f ) ) ]	list all files of a directory <A>
print ( glob . glob ( '/home/adam/*.txt' ) )	"list all "".txt"" files of a directory ""/home/adam/"""
os . listdir ( 'somedirectory' )	"list all files of a directory ""somedirectory"""
cur . executemany ( <A> , <B> )	execute sql query <A> with all parameters in list <B>
print ( [ key for key <A> <B> if <B> [ key ] == 1 ] )	get keys with same value <A> dictionary <B>
print ( [ key for key , <A> <B> <C> . items ( ) if <A> == 1 ] )	get keys with same <A> <B> dictionary <C>
print ( [ key for key , <A> in list ( d . items ( ) ) if <A> == 1 ] )	get keys from a dictionary 'd' where the <A> is '1' .
strs = [ ''   for x in range ( size ) ]	create list of 'size' empty strings
[ <A> ( t ) for t <B> set ( [ tuple ( d . items ( ) ) for d <B> <C> ] ) ]	remove duplicate <A> <B> list <C>
TIME_ZONE = <A>	Set time zone <A> in Django
<A> . setdefault ( <B> , [ ] ) . append ( <C> )	append <C> to list value of <B> in dictionary <A> , or create <B> <B> with value <C> in a list if it does not exist
<A> . objects . values ( <B> ) . annotate ( article_count = Count ( <C> ) )	Group the values from django model <A> with group by value <B> and annotate by <C>
<A> . delete ( 'all' )	clear Tkinter Canvas <A>
<A> = pd . Series ( [ 'A' , 'B' , 'A1R' , 'B2' , 'AABB4' ] )	initialize a pandas series object <A> with columns ['A', 'B', 'A1R', 'B2', 'AABB4']
<A> . sort ( <B> = lambda x : <C> . index ( x [ 0 ] ) )	sort list <A> using the first dimension of the element as the <B> to list <C>
<A> . savefig ( <B> )	Save plot <A> as png file <B>
plt . savefig ( <A> , dpi = 300 )	Save matplotlib graph to image file <A> at a resolution of 300 dpi
<A> . communicate ( ) [ 0 ]	get output from process <A>
soup . body . findAll ( <A> = <B> )	searche in HTML string for elements that have <A> <B>
soup . body . findAll ( text = <A> )	BeautifulSoup find string <A> in HTML body body
sorted ( list ( <A> . items ( ) ) , <B> = lambda name_num : ( name_num [ 0 ] . rsplit ( None , 1 ) [ 0 ] , name_num [ 1 ] ) )	sort items in dictionary <A> using the first part of the <B> after splitting the <B>
<A> ( [ <B> , <C> , <D> ] ) ^  <A> ( [ <D> , <E> , <F> ] )	create a <A> that is the exclusive or of [ <B> , <C> , <D> ] and [ <D> , <E> , <F> ]
request . POST . getlist ( <A> )	get a list values of a dictionary item <A> from post requests in django
<A> ( dict ( ( x [ <B> ] , x ) for x <C> L ) . values ( ) )	Filter duplicate entries w .r .t . value <C> <B> from a <A> of dictionaries 'L'
<A> . groupby ( <A> . columns , axis = 1 ) . sum ( )	get pandas GroupBy object with sum over the rows with same column names within dataframe <A>
dict ( <A> ( list ( <B> ( 1 , 5 ) ) , list ( <B> ( 7 , 11 ) ) ) )	convert the <A> of <B> (1, 5) and <B> (7, 11) into a dictionary
<A> . where ( <B> )	get all indexes of boolean <A> array where boolean value <B> is True
( <A> . lower ( ) == <B> . lower ( ) )	case insensitive string comparison between <A> and <B>
( <A> . lower ( ) == <B> . lower ( ) )	case insensitive string comparison between <A> and <B>
( <A> . upper ( ) == <B> . upper ( ) )	case insensitive comparison between strings <A> and <B>
os . system ( <A> )	Taking the results of a bash command <A>
del <A> [ <B> : <C> ]	remove multiple values from a list <A> at the same time with index starting at <B> and ending just before <C> .
int ( <A> . encode ( 'hex' ) , 16 )	convert a string <A> to its base -10 representation
re . findall ( <A> , <B> )	match regex pattern <A> on string <B>
sorted ( <A> , key = float )	sort a set <A> by numerical value
<A> ( <B> )	convert an int <B> to <A> string
<A> . append ( <B> ) . reset_index ( drop = True )	append <A> pandas series <B> to the series <A> and get <A> continuous index
pd . concat ( [ <A> , <B> ] , ignore_index = True )	simple way to append <A> pandas series <A> and <B> with same index
[ ( i , j ) for i in range ( 1 , 3 ) for j in range ( 1 , 5 ) ]	get a list of tuples with multiple iterators using list comprehension
sorted ( iter ( <A> . items ( ) ) , key = itemgetter ( 1 ) , <B> = True )	<B> sort items in dictionary <A> by value
pd . date_range ( '1/1/2014' , periods = 12 , freq = 'BM' )	select the last business day of the month for each month in 2014 in pandas
<A> . get ( <B> , verify = False )	disable the certificate check in https <A> for url <B>
<A> . ix [ : -1 ]	return dataframe <A> with last row dropped
<A> . find ( 'substring' )	"check if <A> ""substring"" is in <A>"
pd . concat ( [ <A> . head ( 1 ) , <A> . tail ( 1 ) ] )	extract first and last row of a dataframe <A>
<A> . objects . extra ( where = [ 'CHAR_LENGTH(text) > 254' ] )	filter a Django model <A> to have charfield length of max 255
<A> . objects . filter ( text__regex = '^.{254}.*' )	Filter queryset for all objects in Django model <A> where texts length are greater than 254
sum ( <A> . apply ( lambda x : sum ( x . isnull ( ) . values ) , axis = 1 ) >  0 )	count the number of rows with missing values in a pandas dataframe <A>
<A> . create_text ( x , y , <B> = ( <C> , <D> ) , <E> = <F> )	set the <B> <C> of size <D> for a <A> '  <E> item <F>
[ y [ <A> ] for x <B> <C> for y <B> x [ 'bar' ] ]	create a list containing all values associated with key <A> <B> dictionaries of list <C> using list comprehension
df = pd . read_csv ( <A> , quotechar = <B> )	read pandas data frame csv <A> with extra commas in column specifying string delimiter <B>
<A> [ <B> ] = <A> [ <B> ] . str . replace ( <C> , <D> )	replace string <C> with <D> in dataframe <A> column <B>
[ i for i in range ( len ( <A> ) ) if <A> [ i ] >  <B> ]	get all indexes of <A> list <A> where each value is greater than <B>
( <A>   in locals ( ) )	check if a local variable <A> exists
( <A>   in globals ( ) )	check if a global variable <A> exists
hasattr ( <A> , <B> )	check if object <A> has attribute <B>
<A> x , y : x + y	<A> function that adds two operands
sum ( 1 for i <A> <B> )	count the number of items <A> a generator / iterator <B>
[ ( x , <A> [ i ] ) for i , x in enumerate ( <B> ) ]	get tuples of the corresponding elements from lists <B> and <A>
[ ( i , j ) for i , j in zip ( <A> , <B> ) ]	create tuples containing elements that are at the same index of list <A> and list <B>
[ ( <A> [ i ] , <B> [ i ] ) for i <C> range ( len ( <A> ) ) ]	get tuples from lists <A> and <B> using list comprehension <C> python 2
struct . unpack ( 'BBB' , <A> . decode ( 'hex' ) )	convert hex triplet string <A> to rgb tuple
( <A> <B> <C> [ <D> , <A> , <E> ] )	check if <A> is <B> <C> a list [ <D> , <A> , <E> ]
( ( <A> , <B> ) <C> <D> [ ( <A> , <B> ) , ( <E> , <F> ) , ( <E> , <G> ) ] )	check if tuple ( <A> , <B> ) is <C> <D> a list [ ( <A> , <B> ) , ( <E> , <F> ) , ( <E> , <G> ) ]
( ( <A> , <B> ) <C> <D> [ ( <A> , <E> ) , ( <E> , <B> ) , 'hi' ] )	"check if tuple ( <A> , <B> ) is <C> <D> a list [ ( <A> , <E> ) , ( <E> , <B> ) , ""hi"" ]"
( <A> <B> <C> [ <D> , <E> , <F> ] )	check if <A> is <B> <C> the list [ <D> , <E> , <F> ]
[ value for pair in zip ( <A> , <B> [ : : -1 ] ) for value in pair ]	create <A> list by appending components from list <A> and reversed list <B> interchangeably
<A> = np . delete ( <B> , -1 , 1 )	delete the last column of numpy array <B> and assign resulting array to <A>
dbb . commit ( )	commit all the changes after executing a query .
pd . merge ( a , b , <A> = [ 'A' , 'B' ] , how = 'outer' )	join two dataframes based <A> values in selected columns
setStyleSheet ( 'QPushButton {background-color: #A3C1DA; color: red;}' )	set text color as red and background color as #A3C1DA in qpushbutton
sum ( <A> ) / float ( len ( <A> ) )	find the mean of elements in list <A>
[ ( k , v ) for k , v in <A> . items ( ) <B> <C>   in k ]	find all the items from a dictionary <A> <B> the key contains the string <C>
k = hashlib . md5 ( <A> ) . hexdigest ( )	get a md5 hash from string <A>
<A> . sort ( key = lambda d : ( d . month , d . day ) )	sort datetime objects <A> by month and day
[ [ td . findNext ( text = True ) for td in tr . findAll ( 'td' ) ] for tr in <A> ]	extract table data from table <A> using beautifulsoup
""""" <A> """" . replace ( <B> , '' )"	strip the string <B> from anywhere in the string <A>
<A> ( df . index )	get a <A> of the row names from index of a pandas data frame
df . index	get the row names from index in a pandas data frame
""""" """" """" . join ( <A> ( OrderedDict . fromkeys ( <B> ) . keys ( ) ) )"	create a <A> of all unique characters in string <B>
<A> ( set ( <B> ) )	get <A> of all unique characters in a string <B>
df . loc [ ( df . loc [ : , ( df . dtypes != <A> ) ] != 0 ) . any ( 1 ) ]	find rows with non zero values in a subset of columns where df.dtypes is not equal to <A> in pandas dataframe
<A> ( word <B> <C> for word <B> [ 'somekey' , 'someotherkey' , 'somekeyggg' ] )	check if dictionary <C> contains <A> keys <B> list ['somekey', 'someotherkey', 'somekeyggg']
<A> . check_output ( [ 'espeak' , text ] , stderr = <A> . STDOUT )	hide output of <A> ['espeak', text]
<A> . fillna ( method = 'ffill' , inplace = True )	replace nans by preceding values in pandas dataframe <A>
print ( np . linspace ( <A> , <B> , num = <C> , endpoint = False ) )	create <C> numbers in range between <A> and <B>
print ( np . linspace ( <A> , <B> , num = <C> ) )	create numpy array of <C> numbers starting from <A> with interval of <B>
kdll . createSymbolicLinkW ( <A> , <B> , 1 )	create a symlink directory <A> for directory <B> with unicode support using ctypes library
<A> = [ <B> [ i ] [ 0 : 2 ] for i in range ( 0 , 2 ) ]	get a list <A> of array slices of the first two rows and columns from array <B>
upload_url = blobstore . create_upload_url ( <A> , gs_bucket_name = <B> )	upload uploaded file from path <A> to Google cloud storage <B> bucket
os . chdir ( os . path . dirname ( __file__ ) )	change directory to the directory of a python script
func ( * <A> )	call a function with argument list <A>
<A> [ <B> ] . str . split ( <C> , 1 , expand = True )	split column <B> in dataframe <A> into two columns by first whitespace <C>
df [ <A> ] , df [ <B> ] = df [ <C> ] . str . split ( <D> , 1 ) . str	pandas dataframe , how do i split a column <C> into two <A> and <B> on delimiter <D>
print ( sorted ( <A> , key = len ) )	sort list <A> based on the length of its elements
<A> . sort ( lambda x , y : cmp ( len ( x ) , len ( y ) ) )	sort list <A> in ascending order of length of elements
<A> . sort ( key = lambda s : len ( s ) )	sort list of strings <A> by the length of string
<A> . plot ( <B> = <C> )	plot point <B> <C> on series <A>
lst = list ( itertools . product ( [ 0 , 1 ] , repeat = <A> ) )	get all combination of <A> binary values
lst = map ( list , itertools . product ( [ 0 , 1 ] , repeat = <A> ) )	get all combination of <A> binary values
lst = list ( itertools . product ( [ 0 , 1 ] , repeat = <A> ) )	get all combination of <A> binary values
<A> [ <B> ] = <C>   + <A> [ <B> ] . astype ( str )	append string <C> at the beginning of each value in column <B> of dataframe <A>
<A> ( ( name , eval ( name ) ) for name in [ 'some' , 'list' , 'of' , 'vars' ] )	get a <A> of variable names ['some', 'list', 'of', 'vars'] as a string and their values
<A> . colorbar ( <B> , <C> = <C> )	add a colorbar to plot <A> using image <B> on axes <C>
[ <A> for c in Cards for b in c for <A> in b ]	convert nested list 'Cards' into <A> flat list
sorted ( <A> , key = <A> . get )	create a list containing keys of dictionary <A> and sort it alphabetically
<A> ( len ( [ x for x <B> <C> if x is <D> None ] ) )	<A> the number of occurences of <D> none <B> a list <C> <B> Python 2
{{ <A> . key1 }}	lookup dictionary key key1 in Django template <A>
mynewlist = <A> ( <B> )	remove duplicates from <A> <B>
set ( [ 'a' , 'b' , 'c' , 'd' ] )	get unique values from the list ['a', 'b', 'c', 'd']
<A> ( figsize = ( 11.69 , 8.27 ) )	set size of <A> to landscape A4 i .e . 11.69, 8.27 inches
url . rsplit ( <A> , 1 )	get every thing after last <A>
<A> . rsplit ( '/' , 1 ) [ -1 ]	get everything after last slash in a <A> stored in variable 'url'
x_file = <A> ( os . path . join ( <B> , <C> ) , 'r' )	<A> file <C> in directory <B>
<A> ( <B> )	create a <A> with the characters of a string <B>
np . concatenate ( <A> ) . ravel ( ) . tolist ( )	concatenate a list of numpy arrays <A> together into a flattened list of values
print ( [ y for x in <A> ( <B> . items ( ) ) for y in x ] )	convert dictionary <B> into a flat <A>
[ y for x in <A> ( <B> . items ( ) ) for y in x ]	convert a dictionary <B> into a <A> with key and values as <A> items .
MyModel . objects . order_by ( '?' ) . first ( )	get a random record from model 'MyModel' using django ' s orm
os . chdir ( <A> )	change current working directory to directory <A>
os . chdir ( 'C:\\Users\\username\\Desktop\\headfirstpython\\chapter3' )	change current working directory
os . chdir ( '.\\chapter3' )	change current working directory
dict ( ( key , sum ( d [ key ] for d <A> dictList ) ) for key <A> dictList [ 0 ] )	create a flat dictionary by summing values associated with similar keys <A> each dictionary of list dictlist
<A> . sort ( [ <B> , <C> ] , <D> = [ True , True ] )	sort pandas data frame <A> using values from columns <B> and <C> in <D> order
floats = [ <A> ( x ) for x in <B> . split ( ) ]	converting string lists <B> to <A> list
floats = map ( <A> , <B> . split ( ) )	converting string lists <B> to <A> list
<A> . xticks ( [ 1 , 2 , 3 , 4 , 5 ] )	set labels [1, 2, 3, 4, 5] on axis X in plot <A>
<A>   <B> list ( <C> . values ( ) )	check if string <A> exists <B> the values of dictionary <C>
<A>   in iter ( <B> . values ( ) )	check if value <A> is among the values of dictionary <B>
super ( <A> , self ) . __init__ ( name , year )	call parent class <A> of child class constructor
dict ( zip ( <A> , <B> ) )	create a dictionary using two lists <A> and <B>
sorted ( <A> , key = lambda i : <B> ( i . values ( ) ) [ 0 ] , reverse = True )	sort <A> <B> of dictionaries <A> by dictionary values in descending order
sorted ( <A> , key = dict . values , reverse = True )	sorting <A> list of dictionary <A> by values in descending order
<A> . groupby ( level = 0 ) . agg ( [ <B> , <C> , <D> ] )	Use multiple groupby and agg operations <B> , <C> , <D> for pandas data frame <A>
<A> . setdefault ( <B> , [ ] ) . append ( <C> )	for <A> dictionary <A> , set default value for key <B> as list and append value <C> in that key
<A> ( item [ <B> ] for item <C> <D> )	<A> values <C> list of dictionaries <D> with key <B>
<A> ( [ item [ <B> ] for item <C> <D> ] )	get a <A> of all values from key <B> <C> a list of dictionary <D>
sum ( item [ <A> ] for item <B> <C> )	get all the values <B> key <A> summed from a list of dictionary <C>
<A> . write ( <B> )	writing string <B> to file <A>
<A> . write ( 'My String\n' )	Write a string My String to a <A> <A> including new line character
df . reset_index ( ) . groupby ( <A> ) [ 'index' ] . apply ( np . array )	find consecutive segments from a column <A> in a pandas data frame 'df'
<A> = os . path . join ( os . path . dirname ( __file__ ) , <B> )	get a relative path of file <B> into variable <A>
e = next ( iter ( <A> ) )	retrieve an element from a set <A> without remove it
os . system ( ' dir <A> : \\' )	execute a command in the command prompt to list directory contents of the <A> drive ` <A> : \\'
self . treeview . connect ( 'size-allocate' , self . treeview_changed )	make a auto scrolled window to the end of the list in gtk
<A> in [ 1 , 2 , <A> ]	check if <A> is inside list [1, 2, 3]
datetime . datetime . strptime ( <A> , <B> ) . strftime ( <C> )	Represent DateTime object <A> with format <B> into format <C>
<A> = <A> . replace ( '\\', ' \\\\' )	convert a string literal <A> with values '\\' to raw string literal
print ( <A> . communicate ( ) [ 0 ] )	get output of script <A>
pd . concat ( [ pd . DataFrame ( l ) for l in <A> ] , axis = 1 ) . T	create a pandas data frame from list of nested dictionaries <A>
<A> . loc [ : , ( ( <A> != 0 ) . any ( axis = 0 ) ) ]	delete all columns in DataFrame <A> that do not hold a non - zero value in its records
sorted ( <A> , key = lambda x : x [ <B> ] )	sort <A> multidimensional array <A> by column with index <B>
[ x . strip ( ) for x in <A> . split ( <B> ) ]	split string <A> to list conversion by <B>
<A> = [ item for item <B> <C> if item . attribute == <D> ]	get a list of <A> <B> the list <C> with attribute equal to <D>
open ( <A> , 'w' ) . write ( '\n' . join ( '%s %s'   % x for x <B> <C> ) )	create a file <A> with each tuple <B> the list <C> written to a line
<A> = re . compile ( <B> , re . IGNORECASE )	get multiple matched strings using regex <A> <B>
<A> = open ( <B> , 'r' ) . read ( )	read a text file <B> into a string variable <A>
<A> . groupby ( [ <B> , <C> ] ) [ <D> ] . unique ( )	Return values for column <D> after group by on column <B> and <C> in dataframe <A>
<A> = [ <B> . rstrip ( '\n' ) for <B> in open ( <C> ) ]	read file <C> <B> by <B> into a list <A>
df [ <A> ] = pd . to_datetime ( df [ <A> ] )	convert the dataframe column <A> from string types to datetime types
[ k for d <A> <B> ( <C> . values ( ) ) for k <A> d ]	get a <B> of the keys <A> each dictionary <A> a dictionary of dictionaries <C>
print ( <A> . format ( <B> ( <C> ) ) )	get user <B> using message <C> and insert it to the first placeholder in string <A>
<A> = pd . read_csv ( <B> , sep = <C> , names = [ <D> ] )	create pandas data frame <A> from txt file <B> with column <D> and separator <C>
<A> . system ( )	get the <A> OS name
<A> = sorted ( <A> , key = lambda x : <B> ( x ) )	sort list <A> in ascending order based on its elements '  <B> values
re . search ( 'name (.*)' , <A> )	finding words in string <A> after keyword 'name'
db . collection . find ( {} , { <A> : False } )	find all records from collection collection without extracting mongo id <A>
[ row [ 1 ] for row in <A> ]	get all the second values from a list of lists <A>
[ row [ 0 ] for row in <A> ]	extract first column from <A> multi - dimensional array <A>
sorted ( [ '10' , '3' , '2' ] , key = int )	sort list ['10', '3', '2'] in ascending order based on the integer value of its elements
os . path . commonprefix ( [ <A> , os . path . realpath ( <B> ) ] ) == <A>	check if file <B> is descendant of directory <A>
<A> ( substring <B> <C> for substring <B> <D> )	check if <A> element of list <D> are <B> <C> <C>
df = <A> . DataFrame ( data , columns = [ 'R_Number' , 'C_Number' , 'Avg' , 'Std' ] )	construct <A> dataframe from a list of tuples
re . sub ( '^((?:(?!cat).)*cat(?:(?!cat).)*)cat' , '\\1Bull' , s )	find and replace 2 nd occurrence of word 'cat' by 'Bull' in a sentence 's'
re . sub ( '^((.*?cat.*?){1})cat' , '\\1Bull' , s )	find and replace 2 nd occurrence of word 'cat' by 'Bull' in a sentence 's'
sorted ( <A> , key = lambda k : int ( k . split ( '_' ) [ 1 ] ) )	sort list of strings in list <A> by integer suffix
sorted ( <A> , key = lambda x : int ( x . split ( '_' ) [ 1 ] ) )	"sort list of strings <A> by integer suffix before ""_"""
[ <A> ( <B> ) for _ , <B> <C> itertools . groupby ( <D> , lambda x : x . split ( <E> ) [ 0 ] ) ]	make a <A> of lists <C> which each <A> <B> are the elements from <A> <D> which have the same characters up to the first <E> character
<A> . get ( <B> )	Load the url <B> in selenium webdriver <A>
( <A> . datetime . utcnow ( ) - <A> . timedelta ( hours = 11 ) ) . year	using python ' s <A> module , get the year that utc -11 is currently in
Counter ( [ 1 , 2 , 2 , 2 , 3 ] ) - Counter ( [ 1 , 2 ] )	get the difference between two lists [1, 2, 2, 2, 3] and [1, 2] that may have duplicate values
re . sub ( '<[^>]*>' , '' , <A> )	remove tags from a string <A>
<A> . encode ( <B> )	encode string <A> as <B>
User . objects . filter ( userprofile__level__gte = <A> )	filter Users by field userprofile with level greater than or equal to <A>
soup . findAll ( <A> = re . compile ( 'para$' ) )	BeautifulSoup find a tag whose <A> ends with string 'para'
"soup . select ( 'div[id^=""value_xxx_c_1_f_8_a_""]' )"	"select div tags whose id s begin with ""value_xxx_c_1_f_8_a_"""
cleaned_list = [ x for x <A> <B> <C> x is not <D> ]	delete an item <D> <A> a list <B> <C> it exists
<A> = <B> ( 'Please enter something: ' )	"print ""Please enter something: "" to console , and read user <B> to <A>"
<A> . append ( <B> )	append <B> to list <A>
<A> . append ( [ <B> , <C> ] )	append a list [ <B> , <C> ] to list <A>
<A> . insert ( <B> , <C> )	insert <C> to index <B> of list <A>
plt . savefig ( <A> , bbox_inches = 'tight' )	remove white space padding around a saved image <A> in matplotlib
( <A> + <B> )	concatenate lists <A> and <B>
<A> = <B> [ ( <B> [ <C> ] == <D> ) &  ( <B> [ <E> ] == <F> ) ]	create dataframe <A> containing data of dataframe <B> where column <C> is equal to <D> and column <E> is equal to <F>
<A> ( '\\' )	<A> backslash
<A> . replace ( <B> , np . nan )	replace <B> in pandas dataframe <A> with np.nan
<A> = <A> . drop ( <B> , 1 )	delete column <B> from dataframe <A>
<A> . drop ( <A> . columns [ [ 0 , <B> , 3 ] ] , axis = <B> )	delete <B> st , 2 nd and 4 th columns from dataframe <A>
<A> . drop ( <B> , axis = 1 , inplace = True )	delete a column <B> without having to reassign from pandas data frame <A>
parser = <A> . ArgumentParser ( allow_abbrev = False )	disable abbreviation in <A>
feature3 = [ d . get ( <A> ) for d in <B> . dic ]	extract dictionary values by key <A> from data frame <B>
<A> . loc [ gb . groups [ <B> ] , ( <C> , <D> ) ]	get data of column <C> and column <D> in dataframe <A> where column <C> is equal to <B>
<A> ( '[%s, %s, %s]'   % ( 1 , 2 , 3 ) )	<A> '[1, 2, 3]'
print ( '[{0}, {1}, {2}]' . format ( 1 , 2 , 3 ) )	Display 1 2 3 as a list of string
[ v for k , v in list ( <A> . items ( ) ) if <B>   in k ]	get values from a dictionary <A> whose key contains the string <B>
<A> . drop ( ( <B> , <C> ) , axis = 1 )	drop a single subcolumn <C> in column <B> from a dataframe <A>
df . drop ( <A> , <B> = 1 , axis = 1 )	dropping all columns named <A> from a multiindex 'df' , across all <B> .
{ _key : <A> ( _key ) for _key in <B> }	build dictionary with keys of dictionary <B> as keys and values of returned value of function <A> with correlating key as parameter
browser . find_element_by_class_name ( <A> ) . click ( )	click on the text button <A> using selenium python
dict ( ( k , d . get ( k , '' ) + <A> . get ( k , '' ) ) for k in <B> )	combine two dictionaries d  and <A> , concatenate string values with identical <B>
<A> ( pformat ( <B> ) ) == <A> ( pformat ( <C> ) )	generate unique equal <A> for equal dictionaries <B> and <C>
<A> ( map ( tuple , [ [ 'tom' , 'cat' ] , [ 'jerry' , 'mouse' ] , [ 'spark' , 'dog' ] ] ) )	convert nested <A> of lists [['tom', 'cat'], ['jerry', 'mouse'], ['spark', 'dog']] into a <A> of tuples
<A> . groupby ( [ <B> , <C> , <D> ] , as_index = False ) [ <E> ] . sum ( )	sum the column <E> along the other columns <B> , <C> , <D> in a pandas data frame <A>
<A> . upper ( )	change string <A> to upper case
dict ( item . split ( '=' ) for item in <A> . split ( <B> ) )	split a string <A> by <B> and convert to a dictionary
<A> . addheaders = [ ( 'Cookie' , 'cookiename=cookie value' ) ]	add header ('Cookie', 'cookiename=cookie value') to mechanize browser <A>
<A> [ <B> ] = <A> [ <B> ] . str [ 0 ]	set data in column <B> of dataframe <A> equal to first element of each list
<A> [ <B> ] = <A> [ <B> ] . str . get ( <C> )	get element at index <C> of each list in column <B> of dataframe <A>
<A> [ <B> ] = <A> [ <B> ] . str . strip ( <C> )	remove square bracket <C> from pandas dataframe <A> column <B>
""""" "", "" """" . join ( [ '{}_{}' . format ( k , v ) for k , v in <A> . items ( ) ] )"	get a string with string formatting from dictionary <A>
sum ( sum ( x ) for x <A> <B> )	Sum of sums of each list , <A> a list of <B> named 'lists' .
any ( np . equal ( <A> , [ 1 , 2 ] ) . all ( 1 ) )	check whether <A> numpy array <A> contains <A> given row [1, 2]
len ( set ( <A> ) ) == 1	check if all elements in list <A> are the same
[ map ( int , x . split ( '\t' ) ) for x in <A> . rstrip ( ) . split ( <B> ) ]	split a string <A> at line breaks <B>
t = sorted ( <A> ( <B> . items ( ) ) , key = lambda x : x [ 1 ] )	sort <B> dictionary <B> by values that are <A> type
<A> . replace ( '' , <B> ) [ len ( <B> ) : - len ( <B> ) ]	insert string <B> after each character of <A>
<A> ( itertools . combinations ( [ 1 , 2 , 3 , 4 , 5 , 6 ] , 2 ) )	getting every possible combination of two elements in a <A>
""""" ""x = {}"" """" . format ( <A> . decode ( 'utf8' ) ) . encode ( 'utf8' )"	get a utf -8 string literal representation of byte string <A>
isinstance ( <A> , int )	check if <A> is an integer
( type ( <A> ) == int )	check if <A> is an integer
winsound . PlaySound ( <A> , winsound . SND_FILENAME )	play the wav file <A>
[ <A> ( <B> ) for _ in range ( <C> ) ]	create a list containing the <C> <A> values of generator <B>
<A> ( itertools . islice ( <B> , 0 , <C> , 1 ) )	get <A> of <C> next values of a generator <B>
set ( <A> ) . intersection ( <B> )	compare two lists in python <A> and <B> and return matches
print ( '' . join ( map ( str , <A> ) ) )	convert list <A> into a string of its elements
re . match ( <A> , <B> )	match regex pattern <A> on string <B>
<A> . import_module ( '.c' , 'a.b' )	import a nested module c.py within b within a with <A>
<A> <B> ( <C> )	import a module <C> with <A> <B> in python 2
<A> = np . array ( <A> )	convert array <A> to numpy array
<A> . find_all ( <B> , class_ = re . compile ( <C> ) )	find all <B> tags whose classes has the value <C> in a beautiful <A> object <A>
[ [ ] for _ in range ( <A> ) ]	a sequence of empty lists of length <A>
dict ( ( k , globals ( ) [ k ] ) for k in ( <A> , <B> ) )	create dictionary from list of variables <A> and <B> already defined
MyModel . objects . order_by ( '?' ) [ : 2 ]	get two random records from model 'MyModel' in Django
""""" ""Hello {user[name]}"" """" . format ( ** { 'user' : { 'name' : 'Markus' }} )"	Print a dictionary {'user': {'name': 'Markus'}} with string formatting
<A> = { t [ 0 ] : t for t <B> <C> }	create a dictionary <A> containing each tuple <B> list <C> as values and the tuple ' s first element as the corresponding key
randint ( <A> , <B> )	Generate a random integer between <A> and <B>
<A> . randint ( <B> , <C> )	Generate <B> <A> integer between <B> and <C>
print ( ( <A> . randint ( <B> , <C> ) ) )	Generate <A> integers between <B> and <C>
""""" """" """" . join ( reversed ( [ <A> [ i : i + <B> ] for i in range ( 0 , len ( <A> ) , <B> ) ] ) )"	reverse <A> string <A> by <B> characters at <A> time
pd . pivot_table ( <A> , <B> = <A> . index . date , <C> = <A> . index . time , <D> = <E> )	transform time series <A> into a pivot table aggregated by column <E> using column df.index.date as <B> and <D> of column df.index.time as <C>
any ( item [ 2 ] == 0 for item <A> items )	"check if the third element of all the lists <A> a list ""items"" is equal to zero ."
[ x for x <A> items <B> x [ 2 ] == 0 ]	find all the lists from a lists of list 'items' <B> third element <A> all sub - lists is '0'
sorted ( list ( <A> . items ( ) ) , <B> = lambda x : x [ 1 ] [ <C> ] , reverse = True )	sort dictionary of dictionaries <A> according to the <B> <C>
plt . yscale ( 'log' , nonposy = 'clip' )	plot a data logarithmically in y axis
os . listdir ( <A> )	list the contents of a directory <A>
os . listdir ( <A> )	list all the contents of the directory <A> .
pd . concat ( [ <A> , <B> . dates ] , axis = 1 )	merge a pandas data frame <A> and column dates in pandas data frame <B> into single
[ x [ 0 ] for x <A> <B> ]	get value of first index of each element <A> list <B>
[ i [ 0 ] for i <A> <B> ]	python how to get every first element <A> 2 dimensional list <B>
re . sub ( '(?<=[a-z])\\r?\\n' , ' ' , <A> )	remove line breaks from string <A> using regex
<A> . open ( <B> , 'rt' , encoding = 'utf-8' )	open <A> - compressed file encoded as utf -8 <B> in text mode
<A> ( [ <B> , <C> ] ) . issubset ( [ <C> , <B> , 'foo' , 'bar' ] )	test if either of strings <B> or <C> are members of the <A> of strings , ['b', 'a', 'foo', 'bar']
<A> ( x <B> [ 'b' , 'a' , 'foo' , 'bar' ] for x <B> [ 'a' , 'b' ] )	check if <A> the values <B> a list ['a', 'b'] are present <B> another list ['b', 'a', 'foo', 'bar']
<A> . translate ( None , '!@#$' )	"remove characters ""!@#$"" from a string <A>"
<A> = re . sub ( '[!@#$]' , '' , <A> )	"remove characters ""!@#$"" from a string <A>"
<A> . replace ( '1' , '' )	"remove <A> ""1"" from <A> <A>"
<A> = <A> . replace ( <B> , '' )	remove character <B> from <A> string <A>
<A> = <A> . replace ( char , '' )	remove characters in b from <A> string <A>
<A> = <A> . translate ( <B> . maketrans ( '' , '' ) , <C> )	remove characters in <C> from a <B> <A>
pd . concat ( [ df , pd . get_dummies ( df , '' , '' ) . astype ( int ) ] , axis = 1 ) [ <A> ]	binarize the values in columns of list <A> in a pandas data frame
[ <A> , <B> , <C> , <D> ]	store integer <A> , <B> , <C> and <D> in a list
globals ( ) [ <A> ] = <B>	define global variable <A> with value <B>
re . sub ( '([a-z](?=[A-Z])|[A-Z](?=[A-Z][a-z]))' , '\\1 ' , <A> )	insert spaces before capital letters in string <A>
<A> ( <B> . upper ( ) )	<A> unicode string <B> in uppercase
[ l . split ( '\\' ) [ -1 ] for l in <A> ]	get last element of string splitted by '\\'  from list of strings <A>
dict ( zip ( keys , values ) )	combine two sequences into a dictionary
formatter = <A> . formatter ( '%(asctime)s;%(levelname)s;%(message)s' )	customize the time format in python <A>
"new_string = re . sub ( '""(\\d+),(\\d+)""' , '\\1.\\2' , <A> )"	replace comma with dot in a string <A> using regex
<A> . call ( 'test.sh otherfunc' )	call a function otherfunc inside a bash script test.sh using <A>
""""" "" "" """" . join ( <A> . split ( ) )"	remove multiple spaces in a string <A>
<A> ( '{0:0b}' . format ( <B> ) )	convert decimal <B> to a <A> of its binary values
[ int ( x ) for x in <A> ( '{0:0b}' . format ( <B> ) ) ]	convert decimal integer <B> to a <A> of its binary values as elements
[ int ( x ) for x in bin ( <A> ) [ 2 : ] ]	convert decimal <A> to binary list
dict ( zip ( <A> , map ( <B> . get , <A> ) ) )	get key - value pairs in dictionary <B> for all keys in list <A> in the order they appear in <A>
numpy . dstack ( numpy . meshgrid ( <A> , <B> ) ) . reshape ( -1 , <C> )	cartesian product of <A> and <B> array points into single array of <C> d points
<A> . implicitly_wait ( <B> )	selenium wait for <A> <A> <B> seconds before throwing a NoSuchElementExceptions exception
driver . switch_to_frame ( <A> )	selenium webdriver switch to frame <A>
time . strftime ( <A> )	format current date to pattern <A>
sorted ( [ '14:10:01' , '03:12:08' ] )	sort list ['14:10:01', '03:12:08']
re . findall ( <A> , <B> )	find all occurrences of regex pattern <A> in string <B>
<A> . groupby ( [ 'key' , 'year' ] ) . size ( ) . reset_index ( )	remove duplicate rows from dataframe <A> and calculate their frequency
sorted ( list ( <A> . items ( ) ) , key = operator . itemgetter ( 1 ) )	sort <A> <A> in ascending order by its values
sorted ( iter ( <A> . items ( ) ) , key = lambda x : x [ 1 ] )	Iterate over dictionary <A> in ascending order of values
sorted ( list ( <A> . items ( ) ) , key = lambda x : x [ 1 ] )	iterate over a python <A> , ordered by values
np . split ( <A> , [ -1 ] )	split 1 d array <A> into 2 d array at the last element
<A> . pivot ( <B> = <C> , <D> = <E> )	convert dataframe <A> into a pivot table using column <C> as <B> and values of column <E> as <D>
df [ ( df [ <A> ] >  <B> ) |  ( df [ <C> ] <  <D> ) ]	select all rows from pandas DataFrame 'df' where the value in column <A> is greater than <B> or less than <D> in column <C> .
[ <A> ( a ) for a in <B> ( [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ) ]	get the <B> output as <A> from the lists [1, 2, 3] , [4, 5, 6] , [7, 8, 9]
print ( <A> . loc [ <A> [ <B> ] == <C> ] )	select rows of dataframe <A> whose value for column <B> is <C>
df . loc [ df [ <A> ] != <B> ]	select rows whose column value in column <A> does not equal <B> in pandas data frame
<A> . loc [ ~ <A> [ <B> ] . isin ( <C> ) ]	select rows from a dataframe <A> whose value for column <B> is not in <C>
<A> . loc [ <A> [ <B> ] == <C> ]	select all rows whose values in a column <B> equals a scalar <C> in pandas data frame object <A>
print ( <A> . loc [ <A> [ 'B' ] . isin ( [ 'one' , 'three' ] ) ] )	"Select rows whose value of the ""B"" column is ""one"" or ""three"" in the DataFrame <A>"
""""" """" """" . join ( map ( lambda x : x * <A> , <B> ) )"	repeat every character for <A> times in string <B>
os . rmdir ( )	delete an empty directory
shutil . rmtree ( <A> , ignore_errors = False , onerror = None )	recursively delete all contents in directory <A>
os . removedirs ( <A> )	recursively remove folder <A>
<A> . loc [ len ( <A> ) ] = [ '8/19/2014' , 'Jun' , 'Fly' , '98765' ]	add row ['8/19/2014', 'Jun', 'Fly', '98765'] to dataframe <A>
glob . glob ( '*' )	list all files in a current directory
glob . glob ( '[!hello]*.txt' )	List all the files that doesn ' t contain the name hello
glob . glob ( <A> )	List all the files that matches the pattern <A>
eval ( <A> )	evaluate the expression <A>
<A> = [ x [ : ] for x in <B> ]	Copy list <B> and name it <A>
""""" ""{:.50f}"" """" . format ( float ( <A> [ 0 ] / <A> [ 1 ] ) )"	convert scientific notation of variable <A> to decimal
<A> . to_sparse ( 0 )	convert dataframe <A> to integer - type sparse object
print ( [ <A> . attr <B> <A> <C> <D> ] )	display attribute attr <B> each object <A> <C> list <D>
sum ( 1 if <A> [ <B> ] else 0 for <A> <C> s )	count the number of True values associated with key <B> <C> dictionary <A>
<A> ( d [ 'success' ] <B> d in <C> )	get the <A> of values associated with the key ‘ success ’  <B> a list of dictionaries <C>
imp . find_module ( <A> ) [ 1 ]	get complete path of a module named <A>
( bool ( <A> ) != bool ( <B> ) )	get logical xor of <A> and <B>
( ( <A> <B> ( not <C> ) ) or ( ( not <A> ) <B> <C> ) )	get logical xor of <A> <B> <C>
( bool ( <A> ) ^  bool ( <B> ) )	get logical xor of <A> and <B>
<A> ( bool ( <B> ) , bool ( <C> ) )	get logical <A> of <B> and <C>
return ( bool ( <A> ) ^  bool ( <B> ) )	get the logical xor of two variables <A> and <B>
<A> . sort ( <B> = operator . itemgetter ( <C> ) )	sort list <A> in alphabetical order based on the values associated with <B> <C> of each dictionary in the list
re . split ( '\\s*,\\s*|\\s*;\\s*' , <A> )	split a string <A> using both commas and semicolons as delimeters
[ t . strip ( ) for s in <A> . split ( <B> ) for t in s . split ( <C> ) ]	split a <A> <A> by multiple separators <B> and <C>
<A> = lambda <B> , <C> : <B> + <C>	make a function <A> that calculates the sum of two integer variables <B> and <C>
<A> = [ <B> ( ) for i in range ( <C> ) ]	create list <A> containing <C> objects of type <B>
{ <A> [ i + 1 ] : [ <A> [ i ] , <A> [ i + 2 ] ] for i <B> range ( 0 , len ( <A> ) , 3 ) }	"make a dictionary from list <A> which is <B> the format of four sets of ""val, key, val"""
struct . unpack ( '>q' , <A> ) [ 0 ]	convert bytes string <A> to an unsigned integer
pd . concat ( [ <A> , pd . DataFrame ( <B> ) ] , axis = 1 )	concatenate a series <A> onto a dataframe <B> with pandas
<A> . sort ( key = lambda x : x . foo )	sort list <A> in ascending order based on each of its elements '  attribute foo
<A> . select ( 'div[id$=_answer]' )	BeautifulSoup select 'div' elements with an id attribute value ending with sub - string '_answer' in HTML parsed string <A>
linsolve ( Matrix ( ( [ 1 , 1 , 1 , 1 ] , [ 1 , 1 , 2 , 3 ] ) ) , ( x , y , z ) )	sympy solve matrix of linear equations (([1, 1, 1, 1], [1, 1, 2, 3])) with variables (x, y, z)
{ k : bigdict [ k ] for k in list ( bigdict . keys ( ) ) & { <A> , <B> , <C> }}	best way to extract subset of key - value pairs with keys matching <A> , <B> , or <C> from python dictionary object
dict ( ( k , <A> [ k ] ) for k in ( 'l' , 'm' , 'n' ) )	extract subset of key - value pairs with keys as ('l', 'm', 'n') from dictionary object <A>
{ k : <A> . get ( k , None ) for k <B> ( 'l' , 'm' , 'n' ) }	get items from a dictionary <A> where the keys are present <B> ('l', 'm', 'n')
{ k : <A> [ k ] <B> k <C> ( <D> , <E> , <F> ) }	extract subset of key value pair <B> keys <D> , <E> , <F> from <A> <C> python 3
<A> . page_source	Selenium get the entire <A> page text
<A> [ : , ( [ <B> , <C> ] ) ]	extracting column <B> and <C> from array <A>
re . sub ( '\\[.*?\\]' , '' , <A> )	remove all square brackets from string <A>
re . findall ( '\\b(?:b+a)+b+\\b' , <A> )	find all substrings in string <A> composed only of letters a and b where each a is directly preceded and succeeded by b
<A> = [ tuple ( '{0:.8e}' . format ( flt ) for flt <B> sublist ) for sublist <B> <C> ]	convert list <C> of tuples of floats to list <A> of tuples of strings of floats <B> scientific notation with eight decimal point precision
<A> = [ [ '{0:.8e}' . format ( flt ) for flt <B> sublist ] for sublist <B> <C> ]	convert list of sublists <C> of floats to a list of sublists <A> of strings of integers <B> scientific notation with 8 decimal points
<A> = <B> ( x [ 0 ] for x <C> <D> )	create a <B> <A> containing first element of each <B> <C> <B> <D>
<A> . datetime . now ( ) . strftime ( '%a' )	obtain the current day of the week in a 3 letter format from a <A> object
ord ( <A> )	get the ASCII value of a character <A> as an int
ord ( '\u3042' )	get the ASCII value of a character u 'あ' as an int
ord ( )	get the ASCII value of a character as an int
json . load ( <A> )	decode JSON string <A> to a dictionary
<A> . drop ( [ <B> , <C> ] , axis = 1 , inplace = True )	Delete mulitple columns <B> , <C> in pandas data frame <A>
[ <A> . strip ( ) for <A> in <B> ( ) . split ( ',' ) ]	get a list of of elements resulting from splitting user <B> by commas and stripping white space from each resulting string <A>
[ int ( d ) for d in str ( bin ( <A> ) ) [ 2 : ] ]	create a list containing the digits values from binary string <A> as elements
<A> ( len ( word ) for word <B> <C> )	get the <A> string length <B> list <C>
len ( max ( <A> , key = len ) )	get the maximum string length in nested list <A>
<A> . system ( <B> )	execute <A> command <B>
<A> . sort ( key = lambda x : x . lower ( ) )	sort list <A> alphabetically
<A> . sort ( key = str . lower )	sort list <A> in alphabetical order
mylist . sort ( )	sort a list of strings 'mylist' .
<A> . sort ( )	sort a <A> of strings <A>
<A> . set_index ( [ <B> , <C> ] , inplace = True )	Set multi index on columns <B> and <C> of data frame <A> in pandas .
getattr ( <A> , <B> )	get the attribute <B> from object <A>
<A> . split ( ' ' , 1 ) [ 1 ]	remove first word in string <A>
<A> = <B> . Workbook ( <C> )	save <B> file in <C> path and assign to variable <A>
workbook = <A> . Workbook ( <B> )	save <A> file to <B> path
pyplot . legend ( loc = 2 , fontsize = <A> )	change legend size to <A> in upper - left location
plot . legend ( loc = 2 , prop = { 'size' : <A> } )	change legend font size with matplotlib .pyplot to <A>
[ <A> [ i : i + <B> ] for i in range ( 0 , len ( <A> ) , <B> ) ]	split list <A> into <B> sized lists
[ <A> [ i : i + <B> ] for i in range ( 0 , len ( <A> ) , <B> ) ]	split a list <A> into evenly sized chunks <B>
<A> [ <B> ] . str . contains ( <C> )	check if character <C> exists in a dataframe <A> cell <B>
"re . sub ( ""[^\\w' ]"" , '' , <A> )"	remove all non - word , - whitespace , or - apostrophe characters from string <A>
print ( re . findall ( '\\d+' , '\n' . join ( re . findall ( '\xab([\\s\\S]*?)\xbb' , <A> ) ) ) )	find all digits between two characters \xab and \xbb in a string <A>
<A> . reset_index ( ) . plot ( x = <B> , y = <C> )	plot data of column <B> versus column <C> of dataframe <A> after resetting its index
<A> . check_output ( <B> , shell = True )	get the output of a <A> command <B> in command line
[ x . encode ( <A> ) for x <B> <C> ]	Encode each value to <A> <B> the list <C>
<A> . concat ( [ df [ <B> ] . dropna ( ) , df [ <C> ] . dropna ( ) ] ) . reindex_like ( df )	combine two columns <B> and <C> in a <A> data frame
<A> ( range ( 9 ) )	generate a <A> of consecutive integers from 0 to 8
""""" """" """" . join ( chr ( i ) for i in <A> )"	convert list <A> into a unicode string
super ( <A> , self ) . __init__ ( * args )	inherit from class <A>
[ item for item in <A> if item != <B> ]	remove the string value <B> from a list of strings <A>
random . choice ( <A> )	randomly select an item from list <A>
set ( [ 'a' , 'b' ] ) . issubset ( [ 'a' , 'b' , 'c' ] )	check if all of the following items in list ['a', 'b'] are in a list ['a', 'b', 'c']
set ( [ 'a' , 'b' ] ) . issubset ( set ( <A> ) )	check if all the items in a list ['a', 'b'] exists in another list <A>
[ <A> ( t ) for t in zip ( * <B> ) ]	to convert a <A> of tuples <B> into <A> of lists
zip ( * <A> )	group a list <A> of tuples by values
pd . merge ( y , <A> , on = 'k' ) [ [ <B> , <C> , <D> ] ]	merge pandas dataframe <A> with columns <B> and <C> and dataframe <D> with column <D>
[ item . strip ( ) for item in my_string . split ( ',' ) ]	split string with comma ( , ) and remove whitespace from a string 'my_string'
print ( ( <A> . __dict__ ) )	get all object attributes of object <A>
dir ( )	get all object attributes of an object
dir ( )	get all object attributes of an object
<A> . set_position ( Gtk . WindowPosition . CENTER )	pygobject center <A> <A>
<A> . rc ( 'font' , ** { 'size' : <B> } )	change the size of the sci notation to <B> above the y axis in matplotlib <A>
<A> . isnull ( ) . values . any ( )	check if datafram <A> has any NaN vlaues
<A> ( * <B> )	unpack the arguments out of list <B> to function <A>
urllib . parse . unquote ( h . path . encode ( 'utf-8' ) ) . decode ( 'utf-8' )	decode encodeuricomponent in GAE
( <A> [ <B> ] >  <C> ) . mean ( )	get proportion of rows in dataframe <A> whose values for column <B> are greater than <C>
<A> = '\n' . join ( item [ 0 ] for item in <B> )	convert a set of tuples <B> to a string <A>
[ item [ 0 ] for item in <A> ]	convert a set of tuples <A> to a list of strings
emaillist = '\n' . join ( [ item [ 0 ] for item in <A> ] )	convert a list of tuples <A> to a string from the first indexes .
print ( ( 'focus object class:' , <A> . focus_get ( ) . __class__ ) )	get the widget which has currently the focus in tkinter instance <A>
<A> = [ <B> ] * <C>	initialize <A> list <A> with <C> items and each item ' s value <B>
print ( ' ' . join ( sorted ( set ( <A> ) , key = <A> . index ) ) )	Keep only unique <A> in list of <A> <A> and join into string
<A> . sample ( range ( <B> , <C> ) , <D> )	generate <D> <A> numbers between <B> and <C>
<A> . sample ( <B> ( <C> , 50 ) , 6 )	generate six unique <A> numbers in the <B> of <C> to 49 .
{ k . lower ( ) : v . lower ( ) for k , v <A> list ( { 'My Key' : 'My Value' } . items ( ) ) }	lowercase keys and values <A> dictionary {'My Key': 'My Value'}
dict ( ( k . lower ( ) , v ) for k , v <A> { 'My Key' : 'My Value' } . items ( ) )	lowercase all keys and values <A> dictionary {'My Key': 'My Value'}
dict ( ( k . lower ( ) , v . lower ( ) ) for k , v <A> { 'My Key' : 'My Value' } . items ( ) )	convert each key , value pair <A> a dictionary {'My Key': 'My Value'} to lowercase
[ sorted ( item ) for item <A> <B> ]	sorting the lists <A> list of lists <B>
<A> = <B> ( map ( lambda x : x [ 0 ] , <C> . description ) )	SQLite get a <B> of column <A> from <C> object <C>
os . path . abspath ( __file__ )	get the absolute path of a running python script
sorted ( <A> , key = itemgetter ( <B> ) )	sort 2 d array <A> by row with index <B>
[ index for index , <A> in enumerate ( <B> ) if <A> == <C> ]	get all indexes of a <A> <C> from a string <B>
print ( str ( <A> ) . decode ( 'raw_unicode_escape' ) )	decode utf -8 code <A> into a raw unicode literal
re . findall ( '\\w' , <A> )	split string <A> into a list of characters
os . path . isfile ( <A> )	check whether a file <A> exists
os . path . exists ( <A> )	check whether file <A> exists
print ( os . path . isfile ( '/etc/password.txt' ) )	"check whether a file ""/etc/password.txt"" exists"
print ( os . path . isfile ( '/etc' ) )	"check whether a file ""/etc"" exists"
print ( os . path . exists ( '/does/not/exist' ) )	"check whether a path ""/does/not/exist"" exists"
print ( os . path . isfile ( '/does/not/exist' ) )	"check whether a file ""/does/not/exist"" exists"
print ( os . path . exists ( '/etc' ) )	"check whether a path ""/etc"" exists"
print ( os . path . exists ( '/etc/password.txt' ) )	"check whether a path ""/etc/password.txt"" exists"
""""" <A> """" . replace ( <B> , ' ' ) . replace ( <C> , ' ' ) . split ( )"	split string <A> on delimiters <B> and <C>
<A> ( <B> for <B> <C> range ( 3 ) )	get a <A> each value <B> <C> the implicit tuple range(3)
<A> . writeheader ( )	add field names as headers in csv constructor <A>
[ ( <A> , b , c ) for <A> , ( b , c ) in <B> ]	flatten <A> tuple <B>
""""" ""0x{0:08X}"" """" . format ( <A> )"	convert <A> to string represent a 32 bit hex number
[ ( v , k ) for k , v in <A> ( <B> . items ( ) ) ]	convert a python dictionary <B> to a <A> of tuples
[ ( v , k ) for k , v in <A> . items ( ) ]	convert dictionary of pairs <A> to a list of tuples
[ ( v , k ) for k , v in <A> . items ( ) ]	convert python 2 dictionary <A> to <A> list of tuples where the value is the first tuple element and the key is the second tuple element
[ ( k , v ) for k , v in <A> . items ( ) ]	convert <A> python dictionary 'a' to <A> list of tuples
[ int ( x , 16 ) for x in [ 'BB' , 'A7' , 'F6' , '9E' ] ]	convert a list of hex byte strings ['BB', 'A7', 'F6', '9E'] to a list of hex integers
[ int ( x , 16 ) for x in <A> ]	convert the elements of list <A> from hex byte strings to hex integers
<A> , <B> = <C> ( 'Enter two numbers here: ' ) . split ( )	assign values to two variables , <A> and <B> from user <C> response to 'Enter two numbers here:  split on whitespace
Test . objects . filter ( actions__contains = [ { 'fixed_key_1' : 'foo2' } ] )	Filter a json from a key - value pair as {'fixed_key_1': 'foo2'} in Django
itertools . product ( <A> ( range ( 2 ) ) , repeat = 4 )	create a <A> containing a four elements long tuples of permutations of binary values
( datetime . now ( ) - <A> ( 1 ) ) . strftime ( '%Y-%m-%d' )	get yesterday ' s date as a string in YYYY-MM-DD format using <A>
np . dot ( [ 1 , 0 , 0 , 1 , 0 , 0 ] , [ [ 0 , 1 ] , [ 1 , 1 ] , [ 1 , 0 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] ] )	get the dot product of matrix [1,0,0,1,0,0] and matrix [[0,1],[1,1],[1,0],[1,0],[1,1],[0,1]]
df [ 'date' ] = pd . to_datetime ( df [ 'date' ] , <A> = <B> )	convert date strings in pandas dataframe column df['date'] to pandas timestamps using the <A> <B>
<A> . reset_index ( ) . merge ( <B> , how = <C> , <D> = <E> , <F> = False ) . sort ( <E> )	do a <C> merge of dataframes <A> and <B> <D> the column <E> and <F> by <E>
<A> . loads ( <B> . POST . get ( <C> , '{}' ) )	create a default empty <A> object if no <A> is available in <B> parameter <C>
<A> ( zip ( * ( ( iter ( [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ) , ) * 3 ) ) )	get a <A> of tuples of every three consecutive items in <A> [1, 2, 3, 4, 5, 6, 7, 8, 9]
<A> ( grouper ( 2 , [ 1 , 2 , 3 , 4 , 5 , 6 , 7 ] ) )	slice <A> [1, 2, 3, 4, 5, 6, 7] into lists of two elements each
<A> . sort ( key = lambda x : map ( int , x . split ( '.' ) ) )	sort list <A> based on its elements '  dot - seperated numbers
<A> . sort ( key = lambda x : [ int ( y ) for y <B> x . split ( '.' ) ] )	sort a list of integers <A> where each value is <B> string format
<A> . transpose ( <B> , 0 , 1 ) . reshape ( <C> , -1 )	convert a <C> d array <A> of dimensions 4 x2x3 to a <B> d array of dimensions <C> x8
<A> [ <B> ] . replace ( [ <C> , <D> ] , <E> )	replacing <C> and <D> values in column <B> of dataframe <A> with <E>
<A> [ <B> ] = <A> [ <B> ] . replace ( [ 'ABC' , 'AB' ] , <C> )	replace values ['ABC', 'AB'] in a column <B> of pandas dataframe <A> with another value <C>
<A> . sub ( <A> . mean ( axis = 1 ) , axis = 0 )	Subtract the mean of each row in dataframe <A> from the corresponding row ' s elements
""""" """" """" . join ( [ i for i in <A> if i . isalpha ( ) ] )"	remove all non - alphabet chars from string <A>
l = ( int ( x ) for x in <A> . split ( ) )	split a string <A> into integers
""""" <A> """" . split ( )"	split a string <A> by white spaces .
[ i for i , elem in enumerate ( <A> , 1 ) if elem ]	get indexes of all true boolean values from a list <A>
<A> . groupby ( <A> [ <B> ] . map ( lambda x : x . year ) )	group dataframe <A> entries by year value of the date in column <B>
np . in1d ( <A> , <B> ) . nonzero ( ) [ 0 ]	get the indices in array <A> of each element appearing in array <B>
<A> . strftime ( '%l:%M%p %z on %b %d, %Y' )	display current <A> in readable format
<A> . set_xticklabels ( <A> . xaxis . get_majorticklabels ( ) , rotation = <B> )	rotate x - axis text labels of plot <A> <B> degrees
""""" """" """" . join ( [ 'x' , 'x' , 'x' ] )"	append array of strings ['x', 'x', 'x'] into one string
x [ ( np . arange ( x . shape [ 0 ] ) != <A> ) , : , : ]	retrieve all items in an numpy array 'x' except the item of the index <A>
print ( <A> [ <B> ] )	pull a value with key <B> from a json object <A>
<A> = sys . stdin . read ( )	read a file from redirected stdin and save to variable <A>
""""" """" """" . join ( <A> . findAll ( text = True ) )"	get all the texts without tags from beautiful <A> object <A>
<A> [ <A> [ <B> ] == <C> ]	extract all rows from dataframe <A> where the value of column <B> is <C>
""""" """" """" . join ( set ( foo ) )"	"remove duplicate characters from a string variable ""foo"""
sorted ( <A> . objects . all ( ) , key = lambda p : p . reputation )	sort objects in model <A> based on Theirs reputation attribute
<A> . values . flatten ( )	flatten a dataframe <A> to a list
<A> . sort ( <B> = lambda x : <C> . index ( x [ <D> ] ) )	sort list <A> using values associated with <B> <D> according to elements in list <C>
<A> . sort ( key = lambda x : <B> . index ( x [ <C> ] ) )	sort a python list of dictionaries <A> by a given list <B> of ids <C> with the desired <B>
r = requests . get ( <A> , headers = { 'Authorization' : <B> } )	request URI <A> and pass authorization token <B> to the header
"print ( '""Hello,\\nworld!""' . decode ( 'string_escape' ) )"	"un - escape a backslash - escaped string in ""Hello,\\nworld!"""
re . findall ( <A> , <B> , re . DOTALL )	match regex pattern <A> on string <B> with DOTALL enabled
<A> . shape [ 1 ]	get second array column length of array <A>
d . apply ( lambda <A> : <B> ( [ <A> [ 'A' ] , <A> [ 'B' ] ] ) - <A> [ 'C' ] , axis = 1 )	use operations like max / <B> within a <A> to a dataframe 'd' in pandas
""""" <A> """" . count ( <B> )"	count number of occurrences of a substring <B> in a string <A>
[ d [ <A> ] for d in <B> if <A>   in d ]	get a list of values with key <A> from a list of dictionaries <B>
[ d [ <A> ] <B> d in <C> ]	get a list of values <B> key <A> from a list of dictionaries <C>
[ d [ 'key' ] <A> d <B> <C> ]	"get a list of values <A> key ""key"" from a list of dictionaries <B> <C>"
<A> . sort ( key = lambda x : int ( x [ 0 ] ) )	order a list of lists <A> by the first value
sorted ( [ [ 1 , 'mike' ] , [ 1 , 'bob' ] ] )	order a list of lists [[1, 'mike'], [1, 'bob']] by the first value of individual list
""""" <A> """" . translate ( <B> ( 'abcABC' , 'defDEF' ) )"	replace a string <A> in case sensitive way using <B>
""""" ""<br/>"" """" . join ( [ ( '%s:: %s'   % ( key , value ) ) for key , value in list ( <A> . items ( ) ) ] )"	dictionary <A> to string , custom format
os . system ( 'cls' )	clear terminal screen on windows
os . system ( 'clear' )	clear the terminal screen in Linux
os . system ( 'tcsh your_own_script' )	execute external commands / script your_own_script with csh instead of bash
"os . system ( ""zsh -c 'echo $0'"" )"	execute command 'echo $0' in Z shell
[ dict ( d , <A> = n ) for d , n in zip ( <B> , <C> ) ]	update a list <B> dictionaries with a key <A> and value from list <C>
[ <A> ( x ) for x in zip ( * <B> ) ]	create a list with the <A> of respective elements of the tuples of list <B>
map ( <A> , zip ( * <B> ) )	<A> each value in a list <B> of tuples
np . count_nonzero ( ~ np . isnan ( <A> ) )	count the number of non - nan elements in a numpy ndarray matrix <A>
map ( <A> , zip ( * <B> ) )	convert each <A> in <A> <B> into a tuple
<A> . POST . get ( <B> , <C> )	django get the value of key <B> from POST <A> <A> if exists , else return empty string <C>
""""" <A> """" . endswith ( ( '.mp3' , '.avi' ) )"	check if string <A> ends with one of the strings from a tuple ('.mp3', '.avi')
"re . findall ( '\\[[^\\]]*\\]|""[^""]*""|\\S+' , s )"	split a string 's' by space while ignoring spaces within square braces and quotes .
<A> . apply ( lambda x : sorted ( x , <B> ) )	get biggest <B> values from each column of the pandas dataframe <A>
os . chdir ( <A> )	permanently set the current directory to the <A>
re . findall ( '\\$([^$]*)\\$' , <A> )	get all characters between two $ characters in <A> <A>
re . findall ( '\\$(.*?)\\$' , <A> )	getting the string between 2 '$' characters in <A>
datetime . datetime . strptime ( str_date , '%m/%d/%Y' ) . date ( ) . isoformat ( )	format a date object str_data into iso fomrat
<A> [ [ <B> , <C> ] , [ <B> , <C> ] ]	get element at index <B> of first row and element at index <C> of second row in array <A>
<A> [ np . arange ( 3 ) , ( 0 , 1 , 0 ) ]	subset numpy array <A> by column and row , returning the values from the first row , first column and the second row , second column and the third row , first column .
[ k for k , v <A> <B> . items ( ) if v . count ( <C> ) >  <D> ]	get a list of all keys from dictionary <B> where the number of occurrences of value <C> <A> that key is more than <D>
[ [ 2 , 3 , 4 ] , [ 2 , 3 , 4 ] , [ 2 , 3 , 4 ] ]	create sub matrix of a list of lists [[2, 3, 4], [2, 3, 4], [2, 3, 4]] ( without numpy )
print ( <A> [ 1 , 1 ] )	get an element at index [1,1] in a numpy array <A>
<A> . set_clim ( vmin = <B> , vmax = <C> )	Set colorbar range from <B> to <C> for pyplot object <A> in matplotlib
my_data = genfromtxt ( <A> , delimiter = ',' )	read csv file <A> into numpy array
df = pd . read_csv ( <A> , sep = ',' , header = None )	read csv file <A> into array
np . genfromtxt ( <A> , delimiter = ',' )	read csv file <A> into array
np . genfromtxt ( <A> , delimiter = ',' , dtype = None )	read csv file <A> into array
<A> . splitlines ( ) [ 0 ]	read the first line of a string <A>
<A> . values . tolist ( )	generate a list from a pandas dataframe <A> with the column name and column values
re . sub ( '\\*\\*+' , <A> , text )	replace repeated instances of a character <A> with a single instance in a string 'text'
re . sub ( '\\*+' , '*' , text )	"replace repeated instances of ""*"" with a single instance of ""*"""
<A> ( ( k , v * <B> [ k ] ) for k , v <C> list ( dict1 . items ( ) ) if k <C> <B> )	multiply values of dictionary <A> with their respective values <C> dictionary <B>
return '' . join ( <A> . choice ( <B> . lowercase ) for i in range ( <C> ) )	get a <A> <B> of <C> <C>
sum ( len ( x ) for x <A> list ( <B> . values ( ) ) )	get total number of values <A> a nested dictionary <B>
sum ( len ( v ) for v <A> <B> . values ( ) )	count all elements <A> a nested dictionary <B>
<A> ( <B> )	apply logical operator 'AND' to <A> elements in list <B>
""""" """" """" . join ( c for c in <A> if c not in <B> )"	remove vowel characters <B> from string <A>
[ ( x / y ) for x , y <A> zip ( <B> , <C> ) ]	Divide elements <A> list <B> from elements at the same index <A> list <C>
re . findall ( <A> , <B> )	match regex <A> on string <B>
<A> . groupby ( <B> ) . apply ( lambda x : np . mean ( np . log2 ( x [ 'v' ] ) ) )	apply function log2 to the grouped values by <B> in dataframe <A>
[ key for key , value in <A> ( <B> . items ( ) ) if set ( value ) . intersection ( <C> ) ]	get geys of dictionary <B> that contain any values from <A> <C>
[ key for item <A> <B> for key , value <A> <C> ( <D> . items ( ) ) if item <A> value ]	get <C> of keys <A> dictionary <D> whose values contain values from <C> <B>
c = [ [ ( i + j ) for i , j <A> zip ( e , <B> ) ] for e <A> <C> ]	Sum elements of tuple <B> to their respective elements of each tuple <A> list <C>
os . path . commonprefix ( [ <A> , <B> ] )	get the common prefix from comparing two absolute paths <A> and <B>
print ( os . path . relpath ( <A> , <B> ) )	get relative path of path <B> regarding path <A>
<A> . filter ( lambda <B> : len ( <B> ) >  <C> )	filter dataframe <A> where the length of each group <B> is bigger than <C>
sorted ( <A> ( <B> . items ( ) ) , key = lambda e : e [ 1 ] [ 2 ] )	sort dictionary of lists <B> by the third item in each <A>
""""" <A> """" . format ( <B> = <C> )"	format string <A> to be interspersed by <B> three times , specifying the value as <C> only once
<A> . reindex ( [ 'Z' , 'C' , 'A' ] )	reorder indexed rows ['Z', 'C', 'A'] based on a list in pandas data frame <A>
<A> ( isinstance ( el , <B> ) for el <C> <D> )	check if <A> values <C> a <B> <D> is a <B>
len ( <A> )	get the size of list <A>
len ( [ 1 , 2 , 3 ] )	get the size of a list [1,2,3]
<A> . __len__ ( )	get the size of object <A>
len ( )	function to get the size of object
len ( <A> )	get the size of list <A>
<A> . sort ( axis = 1 , ascending = False )	sort each row in a pandas dataframe <A> in descending order
<A> . groupby ( [ <B> , <C> ] ) . size ( ) . groupby ( level = 1 ) . max ( )	get count of rows in each series grouped by column <B> and column <C> of dataframe <A>
<A>   <B> [ <A> , 'd' , 'a' , 's' , 'd' , 's' ]	check if string <A> is <B> list ['x', 'd', 'a', 's', 'd', 's']
<A> . pop ( 'key' , None )	"Delete an item with key ""key"" from <A>"
del <A> [ <B> ]	Delete an item with <B> <B> from <A>
parser . add_argument ( 'input' , nargs = '+' )	specify multiple positional arguments with argparse
<A> . plot ( x , y , <B> = <C> )	Plot using the <B> code <C> in matplotlib <A>
re . sub ( '<[^<]+?>' , '' , text )	strip html from strings
<A> [ np . in1d ( <A> , <B> ) ]	align values in array <B> to the order of corresponding values in array <A>
""""" <A> """" . split ( <B> , 1 )"	split string <A> on the first occurrence of delimiter <B>
<A> ( '[%s]'   % ', ' . join ( '%.3f'   % val for val <B> <C> ) )	<A> numbers <B> <C> <C> with precision of 3 decimal places
<A> ( '['   + ', ' . join ( '%5.3f'   % v for v in <B> ) + ']' )	format <A> output of list of floats <B> to <A> only up to 3 decimal points
<A> ( [ ( '%5.3f'   % val ) for val in <B> ] )	<A> a list of floating numbers <B> using string formatting
os . chdir ( '..' )	Change the current directory one level up
<A> ( <B> . encode ( 'windows-1252' ) )	<A> a unicode string <B>
struct . unpack ( 'd' , struct . pack ( 'Q' , int ( <A> , 0 ) ) ) [ 0 ]	convert string representation <A> of binary string rep of integer to floating point number
<A> ( int ( <B> , 0 ) )	convert a binary <B> to a <A> number
struct . unpack ( 'd' , <A> ) [ 0 ]	convert a binary <A> to a float number
df . colour . value_counts ( ) . plot ( kind = 'bar' )	plot a bar graph from the column 'color' in the DataFrame 'df'
<A> . groupby ( 'colour' ) . size ( ) . plot ( <B> = <C> )	plot categorical data in series <A> with <B> <C> using pandas and matplotlib
<A> . strip ( ) . split ( ' ' )	strip and split each <A> <A> on white spaces
<A> . groupby ( lambda idx : 0 ) . agg ( [ <B> , <C> ] )	apply functions <B> and <C> to each column in dataframe <A>
sorted ( list ( <A> . items ( ) ) , key = lambda x : int ( x [ 1 ] ) , <B> = True )	sort dictionary <A> in <B> order by values cast to integers
int ( math . ceil ( <A> ) ) - 1	find the largest integer less than <A>
it = iter ( <A> ( <B> . items ( ) ) )	iterate over a dictionary <B> in <A> order
return <A> ( <B> . items ( ) )	iterate over a dictionary <B> in <A> order
return iter ( <A> ( <B> . items ( ) ) )	iterate over a dictionary <B> in <A> order
<A> = len ( <B> ) - <B> [ : : -1 ] . index ( <C> ) - 1	assign the index of the <A> occurence of <C> in list <B> to the variable <A>
str1 = '' . join ( <A> )	concatenating values in <A> to a string
' ' . join ( ( str ( x ) for x <A> <B> ) )	concatenating values <A> list <B> to a string , separate by space
str1 = '' . join ( ( str ( e ) for e <A> <B> ) )	concatenating values <A> <B> to a string
makeitastring = '' . join ( map ( str , <A> ) )	concatenating values in list <A> to a string
[ x for x in <A> if x is not <B> ]	remove <B> value from list <A>
<A> . choice ( [ 1 , 2 , 3 ] )	select a <A> element from array [1, 2, 3]
<A> = [ [ <B> for _ in range ( <C> ) ] for _ in range ( 6 ) ]	creating a <C> x6 matrix filled with <B> and save it as <A>
<A> [ ( np . random . choice ( <A> . shape [ 0 ] , <B> , replace = False ) ) , : ]	create a new <B> D array with <B> random rows from array <A>
<A> [ ( np . random . randint ( <A> . shape [ 0 ] , size = <B> ) ) , : ]	create a new <B> dimensional array containing two random rows from array <A>
df . groupby ( df . index ) . sum ( )	combining rows in pandas by adding their values
root . findall ( '{http://www.w3.org/2002/07/owl#}Class' )	find all owl:Class tags by parsing xml with namespace
""""" """" """" . join ( <A> . choice ( <B> . lowercase ) for <C> in range ( X ) )"	generate a <A> <B> of length <C> containing lower cased ASCII letters
sys . path . append ( <A> )	add a path <A> to system path
int ( <A> ( <B> ) )	<A> number <B> to nearest integer
<A> = int ( <B> ( <A> ) )	<B> number <A> to nearest integer
<A> ( <B> , <C> )	<A> number <B> up to <C> decimal points
<A> ( <B> , <C> )	<A> number <B> up to <C> decimal places
<A> ( <B> , <C> )	<A> number <B> up to <C> decimal places
<A> ( <B> , <C> )	<A> number <B> up to <C> decimal places
<A> ( <B> , <C> )	<A> number <B> up to <C> decimal places
<A> ( <B> , <C> )	<A> number <B> up to <C> decimal places
<A> ( <B> , <C> )	<A> number <B> up to <C> decimal places
<A> ( <B> , <C> )	<A> number <B> up to <C> decimal places
<A> ( <B> , <C> )	<A> number <B> up to <C> decimal places
<A> ( <B> , <C> )	<A> number <B> up to <C> decimal places
df [ <A> ] . fillna ( df [ <B> ] )	fill missing value in one column <A> with the value of another column <B>
<A> . info ( 'date=%s' , <B> )	convert the argument <B> with string formatting in <A>
logging . info ( 'date={}' . format ( <A> ) )	Log message of level 'info' with value of <A> in the message
{ k : int ( v ) for k , v <A> <B> . items ( ) }	convert values <A> dictionary <B> into integers
map ( <A> , zip ( * <B> ) )	<A> elements at the same index of each list in list <B>
<A> . decode ( 'hex' )	convert a string <A> containing hex bytes to a hex string
binascii . a2b_hex ( <A> )	convert a string <A> containing hex bytes to a hex string
<A> . send ( 'HTTP/1.0 200 established\r\n\r\n' )	send data 'HTTP/1.0 200 OK\r\n\r\n' to socket <A>
<A> . send ( <B> )	send data <B> to socket <A>
<A> [ 'x' ] [ 'C' ] = <B>	set the value of cell ['x']['C'] equal to <B> in dataframe <A>
np . sqrt ( np . square ( <A> ) . sum ( axis = 1 ) )	normalize the dataframe <A> along the rows
sorted ( set ( <A> ) )	remove identical items from list <A> and sort it alphabetically
max ( enumerate ( <A> ) , key = lambda x : x [ 1 ] ) [ 0 ]	find the index of the element with the maximum value from <A> list 'a' .
[ <A> [ <B> ] <C> <A> <D> <E> ]	create a list where each element is a value of the key <B> <C> each dictionary <A> <D> the list <E>
[ ( <A> [ <B> ] , <A> [ <C> ] ) for <A> <D> <E> ]	create a list of tuples with the values of keys <B> and <C> from each dictionary <A> <D> the list <E>
<A> . objects . all ( ) . order_by ( '?' ) [ 0 ]	grab one random item from a database <A> in django / postgresql
os . system ( 'script2.py 1' )	run python script 'script2.py' from another python script , passing in 1 as an argument
re . findall ( '\\w+(?:-\\w+)+' , <A> )	python regex for hyphenated words in <A>
parser . add_argument ( '--conf' , nargs = 2 , action = 'append' )	create variable key / value pairs with argparse
random . sample ( <A> ( range ( 1 , 16 ) ) , <B> )	get <B> unique items from a <A>
<A> . sort ( key = lambda str : re . sub ( '.*%(.).*' , '\\1' , str ) )	sort list <A> in alphabetical order based on the letter after percent character % in each element
<A> . sort ( key = lambda str : re . sub ( '.*%' , '' , str ) )	sort a list of <A> <A> based on regex match
<A> = [ [ ] for i in range ( <B> ) ]	create list <A> containing <B> empty lists
<A> = np . array ( sorted ( <A> , key = tuple ) )	sort numpy float array <A> column by column
[ ( x + y ) for x in <A>   for y in <B> ]	get a list from two strings <A> and <B> with values as each character concatenated
' Hello ' . strip ( )	"trim string "" Hello """
myString . strip ( )	trim string myString 
' Hello ' . strip ( )	"Trimming a string "" Hello """
' Hello' . strip ( )	"Trimming a string "" Hello"""
'Bob has a cat' . strip ( )	"Trimming a string ""Bob has a cat"""
'          Hello        ' . strip ( )	"Trimming a string ""          Hello        """
<A> . strip ( )	Trimming a string <A>
<A> . strip ( '\n' )	"Trimming ""\n"" from string <A>"
<A> . lstrip ( '\n\r' )	"left trimming ""\n\r"" from string <A>"
<A> . rstrip ( '\n\t' )	"right trimming ""\n\t"" from string <A>"
'  Hello\n' . strip ( ' ' )	"Trimming a string ""  Hello\n"" by space"
sorted ( unsorted , key = lambda element : ( element [ 1 ] , element [ 2 ] ) )	sort a list of tuples 'unsorted' based on two elements , second and third
print ( <A> . decode ( 'utf8' ) )	decode string <A> to UTF -8 code
np . ma . array ( np . tile ( <A> , 2 ) . reshape ( 2 , 3 ) , mask = ~ <B> ) . argmax ( axis = 1 )	find the index of the maximum value in the array <A> where the boolean condition in array <B> is true
pd . to_datetime ( <A> . ID . str [ 1 : -3 ] )	convert a dataframe <A> ' s column ID into datetime , after remove the first and last 3 letters
<A> = pd . read_csv ( <B> , dtype = { <C> : np . float64 } , na_values = [ <D> ] )	read CSV file <B> into a dataframe <A> with datatype of float for column <C> considering character <D> as NaN value
df = pd . read_csv ( 'my.csv' , na_values = [ 'n/a' ] )	convert nan values to ‘ n / a ’  while reading rows from a csv read_csv with pandas
<A> ( itertools . product ( * <B> ) )	create <B> <A> containing all cartesian products of elements in <A> <B>
re . sub ( '[^A-Z]' , '' , <A> )	remove uppercased characters in string <A>
datetime . strptime ( <A> , <B> )	convert string <A> into a DateTime object using format <B>
codecs . open ( <A> , 'r' , <B> ) . read ( )	read file <A> using encoding <B>
[ <A> ( x ) for x in <B> ]	create a <B> containing elements from <B> <B> that are predicate to function <A>
re . findall ( '(?<!\\d)\\d{5}(?!\\d)' , <A> )	regex matching 5 - digit substrings not enclosed with digits in <A>
[ item for item in <A> <B> <C> ( item ) >  <D> ]	create <A> list containing elements of list <A> <B> the <C> of the element is greater than <D>
<A> = int ( round ( float ( <B> . strip ( '$' ) ) * 100 ) )	convert currency string <B> to decimal <A>
""""" """" """" . join ( dropwhile ( lambda x : x <A> <B> , <C> [ : : -1 ] ) ) [ : : -1 ]"	remove letters from string <C> if the letter exist <A> list <B>
<A> = [ ]	Creating an empty list <A>
<A> = <B> ( )	Creating an empty <B> <A>
<A> ( )	Creating an empty <A>
[ ]	Creating an empty list
sys . exit ( 0 )	properly quit a program
<A> [ : 4 ] + <B>   + <A> [ 4 : ]	add string <B> in 4th position of a string <A>
[ [ ] for i <A> range ( <B> ) ]	append <B> lists <A> one list
<A> = [ [ ] for i in range ( <B> ) ]	initialize <A> list of empty lists <A> of size <B>
requests . get ( <A> , headers = { 'referer' : my_referer } )	request URL <A> using http header {'referer': my_referer}
<A> . ylim ( [ 0 , 1000 ] )	set the y axis range to 0, 1000 in subplot using <A>
pd . get_dummies ( <A> . apply ( pd . Series ) . stack ( ) ) . sum ( level = 0 )	convert a column of list in series <A> to dummies
y = str ( int ( <A> , 16 ) )	convert a hex string <A> to string
<A> . isdigit ( )	check if string <A> is an integer
isdigit ( )	function to check if a string is a number
<A> . isdigit ( )	check if string <A> is a number
pd . read_csv ( StringIO ( <A> ) , sep = ',' , comment = <B> )	pandas read comma - separated CSV file <A> and skip commented lines starting with <B>
df [ <A> ] = df [ <A> ] . apply ( lambda x : int ( str ( x ) [ -4 : ] ) )	"pandas : change all the values of a column <A> into ""int(str(x)[-4:])"""
<A> ( <B> )	<A> a list of numbers <B>
max ( <A> , <B> = <C> x : x [ <D> ] )	get an item from a list of dictionary <A> which has maximum value in the <B> <D> using <C> function
soup . findAll ( attrs = { <A> : <B> } )	BeautifulSoup find all tags with attribute <A> equal to <B>
str ( { 'a' : 1 , 'b' : 'as df' } ) . replace ( ': ' , ':' ) . replace ( ', ' , ',' )	remove all spaces from a string converted from dictionary {'a': 1, 'b': 'as df'}
'{'   + ',' . join ( '{0!r}:{1!r}' . format ( * x ) for x in list ( dct . items ( ) ) ) + '}'	convert dictionary dict into a string formatted object
""""" """" """" . join ( <A> [ 1 : ] )"	concatenate items from list <A> into a string starting from the second element
""""" "",+"" """" . join ( c . rsplit ( <A> , 1 ) )"	insert a character ',' into a string in front of <A> character in second part of the string
<A> [ np . all ( <A> != <B> , axis = 1 ) ]	delete all rows in <A> numpy array <A> where any value in <A> row is zero <B>
""""" "" "" """" . join ( re . split ( '[^a-zA-Z]*' , <A> ) )"	extract only alphabetic characters from a string <A>
re . split ( '[^a-zA-Z]*' , 'your string' )	extract only characters from a string as a list
results_union = <A> ( ) . union ( * <B> )	get the union <A> from list of lists <B>
return <A> ( set ( itertools . chain ( * <B> ) ) )	get the union of values in <A> of lists <B>
np . any ( np . in1d ( <A> , <B> ) )	check if a numpy array <A> contains any element of another array <B>
return '' . join ( ch for ch in <A> if unicodedata . category ( ch ) [ 0 ] != 'C' )	remove control characters from a string <A>
all ( i <  j for i , j <A> zip ( <B> , <C> ) )	Compare if each value <A> list <B> is less than respective index value <A> list <C>
driver . find_element_by_css_selector ( <A> ) . click ( )	python selenium click on button <A>
os . system ( 'taskkill /im make.exe' )	kill a process make.exe from python script on windows
print ( <A> ( [ <B> , func . current_date ( ) ] ) . execute ( ) )	SQLAlchemy <A> records of columns of table <B> in addition to current date column
re . sub ( '([a-z])\\1+' , '\\1' , <A> )	remove duplicate characters from string <A>
re . sub ( '(?<!\\w)([A-Z])\\.' , '\\1' , <A> )	remove periods inbetween capital letters that aren ' t immediately preceeded by word character ( <A> ) in a string <A> using regular expressions
split_list = [ <A> [ i : i + <B> ] for i in range ( 0 , len ( <A> ) , <B> ) ]	get a list of strings split_text with fixed chunk size <B> from a string <A>
re . sub ( <A> , <B> , <C> )	match string <C> with regex <A> then replace it with regex <B>
pandas . set_option ( 'display.max_columns' , <A> )	output data of the first <A> columns of Pandas dataframe
<A> . set_option ( 'display.max_columns' , None )	Display maximum output data of columns in dataframe <A> that will fit into the screen
<A> . ix [ <A> . A == <B> , <C> ] = np . nan	set the value in column <C> to NaN if the corresponding value in column 'A' is equal to <B> in pandas dataframe <A>
"<A> . find_element_by_xpath ( ""//li/label/input[contains(..,'polishpottery')]"" )"	"Selecting Element ""//li/label/input"" followed by text ""polishpottery"" with Selenium WebDriver <A>"
<A> . sort ( key = operator . itemgetter ( 'weight' , 'factor' ) )	"sort a list of dictionaries <A> by keys ""weight"" and ""factor"""
<A> . sort ( key = lambda d : ( d [ <B> ] , d [ <C> ] ) )	ordering a list of dictionaries <A> by elements <B> and <C>
{ x [ 1 ] : x for x in <A> }	convert a list of lists <A> to a dictionary with key as second value of a list and value as list itself
sorted ( d , key = lambda k : d [ k ] [ 1 ] )	sort keys of dictionary 'd' based on their values
int ( <A> ( <B> , -2 ) )	<A> <B> to 100
fd = os . open ( <A> , os . O_WRONLY |  os . O_CREAT |  os . O_EXCL )	create file <A> if file <A> does not exist
new_list = [ x . split ( ) [ -1 ] for x in <A> ]	get a list of last trailing words from another list of strings <A>
<A> [ : : ( -1 ) ]	reverse a string <A>
<A> [ : : ( -1 ) ]	reverse list <A>
'' . join ( reversed ( <A> ) )	reverse string <A>
'' . join ( reversed ( <A> ) )	reverse a <A> <A>
'foo' [ : : ( -1 ) ]	"reverse a string ""foo"""
<A> [ : : ( -1 ) ]	reverse a string <A>
'' . join ( reversed ( <A> ) )	reverse a string <A>
""""" "","" """" . join ( str ( i ) for i in range ( 100 ) if i % <A> in ( <B> , <C> ) )"	generate a string of numbers separated by comma which is divisible by <A> with remainder <B> or <C> .
dict ( [ ( e [ 0 ] , int ( e [ 1 ] ) ) for e in <A> ] )	convert list <A> of key , value pairs into a dictionary
sorted ( <A> , key = lambda tup : tup [ : : -1 ] )	sorting a list of tuples <A> where each tuple is reversed
sorted ( <A> , <B> = lambda tup : tup [ 1 ] )	sorting a list of tuples <A> by second <B>
numpy . concatenate ( [ a , b ] )	Concatenating two one - dimensional NumPy arrays 'a' and 'b' .
pickle . dump ( <A> , <B> )	serialize <A> to file <B>
<A> . write ( '\n' . join ( <B> ) )	writing items in list <B> to file <A>
session . query ( User ) . filter_by ( <A> = <B> ) . update ( { 'name' : <C> } )	Update a user ' s name as <C> having <A> <B> in SQLAlchemy
r = <A> . post ( <B> , <C> = <D> )	send <C> <D> in a post request to url <B> with the python <A> library
sys . path . insert ( <A> , <B> )	insert directory <B> at the <A> th index of current directory
datetime . datetime . now ( )	get current date and time
datetime . datetime . now ( ) . time ( )	get current time
strftime ( '%Y-%m-%d %H:%M:%S' , gmtime ( ) )	get current time in pretty format
str ( datetime . now ( ) )	get current time in string format
datetime . datetime . time ( datetime . datetime . now ( ) )	get current time
ord ( <A> )	convert hex <A> to integer
<A> . groupby ( [ <B> , <C> ] ) . cumcount ( ) + 1	identify duplicated rows in columns <B> and <C> with additional column in dataframe <A>
datetime . utcnow ( )	get current utc time
<A> [ -1 : ] + <A> [ : -1 ]	move last item of array <A> to the first position
<A> . set_index ( [ <B> , <C> , <D> ] ) . unstack ( level = -1 )	convert dataframe <A> to a pivot table using column <B> , <C> , and <D> as indexes
df . pivot_table ( values = 'value' , <A> = [ <B> , <C> ] , columns = 'item' )	run a pivot with a multi - <A> <B> and <C> in a pandas data frame
<A> ( '\n\x1b[4m'   + '3'   + '\x1b[0m'   + '\n2' )	<A> a rational number 3/2
range ( <A> , <B> , -1 )	iterate backwards from <A> to <B>
<A> [ 0 ] . firstChild . nodeValue	get value of first child of xml node <A>
<A> . start_new_thread ( <B> , ( <C> , <D> ) )	start a new <A> for <B> with parameters <C> and <D>
<A> . start_new_thread ( <B> , ( <C> , <D> ) )	start a new <A> for <B> with parameters <C> and <D>
<A> . index ( max ( <A> ) )	get index of the first biggest element in list <A>
re . sub ( '\\.(?=[^ .])' , <A> , para )	replace periods . that are not followed by periods or spaces with a period and a space <A>
[ i . split ( ) for i <A> re . findall ( '\\[([^\\[\\]]+)\\]' , <B> ) ]	convert <B> string <B> of letters embedded <A> squared brackets into embedded lists
[ <A> for <A> in <B> if <A> [ <C> ] == <D> ]	extract dictionary <A> from list <B> where the value associated with the key <C> of dictionary <A> is equal to <D>
[ d for d in <A> if d [ 'name' ] == 'pluto' ]	extract dictionary from list of dictionaries based on <A> key ' s value .
<A> ( d . values ( ) )	Retrieve <A> of values from dictionary 'd'
re . sub ( ' +' , <A> , <B> )	replace occurrences of two whitespaces or more with one whitespace <A> in string <B>
os . chmod ( <A> , <B> )	Change the mode of file <A> to permission number <B>
<A> . to_csv ( <B> , index = False )	write pandas dataframe <A> to the file <B> without row names
re . sub ( '\\w*\\d\\w*' , '' , <A> ) . strip ( )	remove all <A> which contains number from a string <A> using regex
<A> . rawinput . click ( 100 , 100 )	control the keyboard and mouse with <A> in linux
datetime . strptime ( <A> , <B> )	parse date string <A> using format <B>
re . search ( '\\bis\\b' , <A> ) . start ( )	get the position of a regex match for word is in a string <A>
re . search ( <A> , <B> ) . start ( )	get the position of a regex match <A> in a string <B>
<A> ( map ( int , <B> ( ) . split ( ',' ) ) )	<B> an integer <A> from user
<A> ( int ( x . strip ( ) ) for x in <B> ( ) . split ( ',' ) )	<B> a <A> of integers from user
str . decode ( 'utf-8' ) . replace ( <A> , <B> ) . encode ( 'utf-8' )	replace unicode character <A> in string 'str' with <B>
<A> . decode ( 'utf-8' ) . replace ( '\u2022' , '*' )	replace unicode characters '' \ u2022 ' in string ' <A> ' with ' * '
np . zeros ( ( <A> , <A> ) ) . ravel ( )	convert ndarray with shape <A> x3 to array
print ( os . name )	get the name of the OS
""""" <A> """" . format ( <B> )"	replace fields delimited by braces {}  in string <A> with string <B>
min ( <A> , key = lambda x : <B> ( 'inf' ) if math . isnan ( x [ 1 ] ) else x [ 1 ] )	get a minimum value from a <A> of tuples <A> with values of type string and <B> with nan
<A> = [ ( sum ( x ) / len ( x ) ) for x in zip ( * <A> ) ]	find average of <A> nested list <A>
logging . info ( <A> , extra = { 'app_name' : 'myapp' } )	Log info message <A> with attributes {'app_name': 'myapp'}
<A> . applymap ( lambda x : isinstance ( x , ( int , float ) ) )	replace values of dataframe <A> with True if numeric
sorted ( <A> , key = lambda x : int ( re . search ( '\\d+' , x ) . group ( 0 ) ) )	sort list <A> based on its elements '  digits
self . root . destroy ( )	close the window in tkinter
<A> . iloc [ : , ( [ 2 , 5 , 6 , 7 , 8 ] ) ] . mean ( axis = 1 )	get mean of columns 2, 5, 6, 7, 8 for all rows in dataframe <A>
<A> [ <A> . index . map ( lambda x : x [ 1 ] . endswith ( <B> ) ) ]	filter dataframe <A> by sub - level index <B> in pandas
db . session . delete ( <A> )	flask - sqlalchemy delete row <A>
""""" """" """" . join ( chr ( ord ( c ) ) for c in 'Andr\xc3\xa9' )"	format a string u'Andr\xc3\xa9' that has unicode characters
""""" """" """" . join ( chr ( ord ( c ) ) for c in <A> ) . decode ( 'utf8' )"	convert a unicode <A> to a string
os . listdir ( <A> )	list all files in directory <A>
os . rename ( <A> , <A> + <B> )	rename file <A> to <A> + <B>
""""" <A> """" . join ( <B> + b for <B> , b <C> zip ( <D> [ : : 2 ] , <D> [ 1 : : 2 ] ) )"	insert <B> character <A> after every two elements <C> <B> string <D>
print ( '%.3f'   % 3.1415 )	printing numbers rounding up to third decimal place
<A> [ 0 ] [ <B> ] = <C>	add variable <C> to key <B> of first element in JSON <A> <A>
print ( <A> . __file__ )	get the path of module <A>
print ( os . getcwd ( ) )	get the path of the current python module
<A> = os . path . abspath ( <B> . __file__ )	get the <A> of the python module <B>
self . myList . extend ( [ <A> ] * ( <B> - len ( self . myList ) ) )	fill list myList with <B> <A> ' s
<A> [ ~ <A> . index . duplicated ( ) ]	drop duplicate indexes in a pandas data frame <A>
<A> ( * <B> )	unpack elements of list <B> as arguments into function <A>
[ ( '%.2d'   % i ) for i <A> range ( 16 ) ]	generate list of numbers <A> specific format using string formatting precision .
sorted ( iter ( <A> . items ( ) ) , key = lambda tup : <B> ( tup [ 1 ] ) , reverse = True ) [ : 3 ]	sort dictionary <A> in descending order based on the <B> of each value in it
heapq . nlargest ( <A> , iter ( <B> . items ( ) ) , key = lambda tup : <C> ( tup [ 1 ] ) )	get top <A> items from a dictionary <B> with largest <C> of values
[ 'a' , <A> ] . index ( <A> )	get index of character <A> in list '[' a ', ' b ']'
<A> . setp ( <B> . get_title ( ) , fontsize = <C> )	set font size of axis <B> of plot <A> to <C>
[ x [ 1 ] for x in <A> ]	extract the 2 nd <A> from a list of tuples
np . diag ( np . rot90 ( <A> ) )	get the opposite diagonal of a numpy <A> <A>
<A> ( chain . from_iterable ( <B> ) )	flatten <A> of tuples <B>
re . sub ( '\\s{2,}' , <A> , <B> . strip ( ) )	substitute two or more whitespace characters with character <A> in string <B>
<A> ( ( '%.2f'   % <B> ) )	<A> float <B> with two decimal points
<A> ( ( '{0:.2f}' . format ( <B> ) ) )	<A> float <B> with two decimal points
<A> ( ( '{0:.2f}' . format ( round ( <B> , 2 ) ) ) )	<A> float <B> with two decimal points
<A> ( ( '%.2f'   % round ( <B> , 2 ) ) )	<A> float <B> with two decimal points
( '%.2f'   % <A> )	limit float <A> to two decimal points
( '%.2f'   % <A> )	limit float <A> to two decimal points
<A> ( '{0:.2f}' . format ( 13.95 ) )	limit <A> 13.949999999999999 to two decimal points
'{0:.2f}' . format ( 13.95 )	limit float 13.949999999999999 to two decimal points
DataFrame . from_csv ( <A> , sep = '\t' )	load a tsv file <A> into a pandas data frame
dateutil . parser . parse ( '2013/09/11 00:17 +0900' )	set UTC offset by 9 hrs ahead for date '2013/09/11 00:17'
cur . mogrify ( <A> , ( ( <B> , <C> , <D> ) , ) )	pass a list of parameters ` ( ( <B> , <C> , <D> ) , ) to sql queue <A>
<A> ( [ <A> ( x ) for x in [ [ 1 , 2 , 3 , 4 ] , [ 2 , 4 , 5 , 6 ] ] ] )	<A> all elements of two - dimensions list [[1, 2, 3, 4], [2, 4, 5, 6]]]
next ( iter ( <A> . values ( ) ) )	Retrieve an arbitrary value from dictionary <A>
next ( iter ( list ( <A> . values ( ) ) ) )	access an arbitrary value from dictionary <A>
<A> . groupby ( [ <B> , <C> ] ) . sum ( ) . unstack ( level = 0 )	group dataframe <A> by columns <B> and <C>
sorted ( <A> , <B> = lambda x : <C> . index ( x [ 1 ] ) )	sort list <A> of tuples by arbitrary <B> from list <C>
sorted ( <A> , <B> = lambda x : x [ 'passport' ] [ 'birth_info' ] [ 'date' ] )	sort a list of dictionary <A> according to the <B> ['passport']['birth_info']['date']
urlparse . urldefrag ( <A> )	remove the fragment identifier #something from a url <A>
urllib . request . urlretrieve ( <A> , <B> )	download to a directory <B> from source <A>
<A> ( set ( frozenset ( item ) for item in <B> ) )	remove all duplicates from a <A> of sets <B>
[ set ( item ) for item in set ( frozenset ( item ) for item in L ) ]	remove duplicates from a list of sets 'L'
<A> . terminate ( )	terminate process <A>
del <A> [ : ]	delete all values in a list <A>
ctypes . windll . user32 . MessageBoxW ( 0 , 'Error' , 'Error' , 0 )	throw an error window in python in windows
<A> = <B> ( [ _f for _f in <A> if _f ] )	remove empty strings from <B> <A>
re . sub ( '[\\ \\n]{2,}' , '' , <A> )	remove newlines and whitespace from string <A>
re . sub ( '\\.[^.]+$' , '' , <A> )	remove the last dot and all text beyond it in string <A>
<A> [ np . all ( np . any ( <A> - <B> [ : , ( None ) ] , axis = 2 ) , axis = 0 ) ]	remove elements from an array <A> that are in array <B>
<A> . to_csv ( <B> , cols = [ <C> ] )	Write column <C> of DataFrame <A> to csv file <B>
exec ( compile ( open ( 'test2.py' ) . read ( ) , 'test2.py' , 'exec' ) )	"call a Python script ""test2.py"""
subprocess . call ( 'test1.py' , shell = True )	"call a Python script ""test1.py"""
sorted ( <A> , key = <B> x : x [ 1 ] )	sort a <A> list <A> using <B> function
sorted ( list ( <A> . items ( ) ) , <B> = lambda x : ( x [ 1 ] , x [ 0 ] ) , reverse = True )	sort a dictionary <A> by value then by <B>
<A> . find_all ( 'div' , class_ = 'crBlock ' )	using beautifulsoup to select div blocks within html <A>
[ element for i , element <A> enumerate ( <B> ) if i not <A> <C> ]	remove elements from list <B> the indexes of which are <A> array <C>
<A> ( set ( <B> ) &  set ( <C> ) )	<A> duplicated elements in two lists <B> and <C>
urllib . request . urlretrieve ( 'http://randomsite.com/file.gz' , 'file.gz' )	"download file from http url ""http://randomsite.com/file.gz"" and save as ""file.gz"""
file_name = wget . download ( <A> )	download file from http url <A>
<A> . set_yticklabels ( [ '\xe9' , '\xe3' , '\xe2' ] )	set an array of unicode characters [u'\xe9', u'\xe3', u'\xe2'] as labels in Matplotlib <A>
<A> ( itertools . product ( <A> ( range ( - x , <B> ) ) , repeat = <C> ) )	get a <A> of all integer points in a <C> dimensional hypercube with coordinates from -x to <B> for all dimensions
print ( <A> . encode ( 'unicode_escape' ) )	convert unicode string <A> into string literals
'Hello %s'   % ', ' . join ( <A> )	how to format a list of arguments <A> into a string
re . split ( <A> , <B> , 1 )	search and split string <B> by delimiter <A>
re . split ( <A> , <B> , 1 )	regex search and split string <B> by delimiter <A>
pd . DataFrame ( <A> )	convert a list of dictionaries <A> to pandas data frame
""""" <A> """" . split ( )"	split string <A> into words that do not contain whitespaces
""""" <A> """" . split ( )"	split string <A> into words that does not contain whitespaces
woduplicates = <A> ( set ( <B> ) )	remove all duplicate items from a <A> <B>
<A> ( [ ( i * j ) for i , j <B> <C> ( itertools . combinations ( <D> , 2 ) ) ] )	<A> of product of combinations <B> a <C> <D>
re . compile ( '{}-\\d*' . format ( user ) )	regular expression for validating string 'user' containing a sequence of characters ending with '-' followed by any number of digits .
[ <A> ( i ) for i <B> <C> ]	convert all of the items <B> a list <C> to <A>
writer . writerow ( <A> )	write a tuple of tuples <A> to a csv file using python
writer . writerows ( <A> )	Write all tuple of tuples <A> at once into csv file
""""" <A> """" . format ( <B> , <C> )"	python , format string <A> to have <B> and <C> in the first and second positions
<A> = [ x . replace ( <B> , '' ) for x <C> <A> ]	Truncate <B> from each string <C> a list of string <A>
[ i . partition ( <A> ) [ -1 ] for i in <B> if <A>   in i ]	split elements of a list <B> by <A>
re . search ( <A> , <B> , re . DOTALL )	search for regex pattern <A> in string <B> including new line character '\n'
<A> = driver . find_element_by_css_selector ( 'li.next>a' )	find button that is in li class <A> and assign it to variable <A>
os . stat ( <A> ) . st_size	get the size of file <A>
imtag = re . match ( <A> , line ) . group ( 0 )	return a string from a regex match with pattern <A> in string 'line'
os . rename ( <A> , <B> )	Rename a folder <A> to <B>
re . findall ( '(?=(\\w\\w))' , <A> )	find overlapping matches from a string <A> using regex
bin ( <A> )	convert <A> to binary string
int ( <A> , 2 )	convert binary string <A> to integer
int ( <A> , 2 )	convert binary string <A> to integer
int ( <A> , 2 )	convert binary string <A> to integer
bin ( <A> )	convert <A> to binary string
int ( <A> , 2 )	convert binary string <A> to integer
re . sub ( '$\\d+\\W+|\\b\\d+\\b|\\W+\\d+$' , '' , <A> )	delete all digits in string <A> that are not directly attached to a word character
re . sub ( '\\b\\d+\\b' , '' , <A> )	delete digits at the end of string <A>
<A> = re . sub ( '^\\d+\\s|\\s\\d+\\s|\\s\\d+$' , ' ' , <A> )	Delete self - contained digits from string <A>
<A> . split ( <B> , 1 ) [ 1 ]	truncate string <A> up to character <B>
<A> ( <B> . split ( <C> ) )	<A> a string <B> by splitting with comma <C>
<A> . split ( ',' )	"create list by splitting string <A> using "","" as delimiter"
re . sub ( '\\((\\w+)\\)' , '\\1' , <A> )	remove parentheses only around single words in a string <A> using regex
<A> . open_new ( <B> )	<A> open <B> <B>
<A> . open ( <B> )	<A> open url <B>
self . pushButton . setStyleSheet ( 'background-color: red' )	change the background colour of the button pushbutton to red
[ x ( y ) for x , y in zip ( <A> , <B> ) ]	apply a list of <A> named 'functions' over a list of <B> named 'values'
wx . TextCtrl ( self , -1 , size = ( <A> , -1 ) )	modify the width of a text control as <A> keeping default height in wxpython
imshow ( <A> , cmap = 'Greys_r' )	display a grayscale image from array of pixels <A>
<A> . fillna ( <B> )	replace all the nan values with <B> in a pandas dataframe <A>
<A> . toPandas ( ) . to_csv ( <B> )	export a table dataframe <A> in pyspark to csv <B>
<A> . write . csv ( <B> )	Write DataFrame <A> to csv file <B>
<A> ( x [ 1 ] for x in <B> )	get the <A> of each second value from a list of tuple <B>
df . groupby ( <A> ) [ <B> ] . agg ( lambda x : x . nlargest ( <C> ) . sum ( ) )	sum the <C> largest integers in groupby by <A> and <B>
datetime . strptime ( <A> , <B> )	Parse string <A> according to format <B>
os . path . dirname ( os . path . abspath ( __file__ ) )	get current script directory
re . sub ( '(.)' , '\\1\\1' , text . read ( ) , 0 , re . S )	double each character in string text.read()
""""" """" """" . join ( ( 'a' , 'b' , 'c' , 'd' , 'g' , 'x' , 'r' , 'e' ) )"	concatenate strings in tuple ('a', 'b', 'c', 'd', 'g', 'x', 'r', 'e') into a single string
os . path . dirname ( os . path . abspath ( __file__ ) )	get full path of current directory
""""" <A> """" . format ( <B> , <C> )"	variable number of <C> <C> in variable <B> in format string <A>
self . request . url	get current requested url
random_choice = <A> . choice ( <B> )	get a <A> item from list <B>
<A> = <B> ( len ( s ) for s <C> <D> )	<B> the <A> of all <D> <C> a list <D>
<A> = sorted ( <A> , key = lambda x : ( x [ 1 ] , x [ 2 ] ) )	sort a list <A> by first and second attributes
<A> . sort ( key = operator . itemgetter ( 1 , 2 ) )	sort a list of lists <A> by second and third element in each list .
con . commit ( )	Mysql commit current transaction
[ k for k in <A> if <B>   in k ]	filtering out strings that contain <B> from a list of strings <A>
output = '' . join ( item [ 0 ] . upper ( ) for item <A> <B> . split ( ) )	find the first letter of each element <A> string <B>
<A> . _meta . pk . name	get name of primary field name of django model <A>
len ( <A> . split ( ) )	count the number of words in a string <A>
np . einsum ( 'ji,i->j' , <A> , <B> )	multiply array <A> and array <B> respective elements then sum each row of the new array
sys . version	check python version
sys . version_info	check python version
print ( '\\num{{{0:.2g}}}' . format ( <A> ) )	format number <A> using latex notation
<A> = [ [ ] for i in range ( <B> ) ]	initialize a list of empty lists <A> of size <B>
{{ <A> |  <B> |  <C> }}	apply jinja2 filters <B> and <C> on variable <A>
<A> ( * [ ( 1 , 4 ) , ( 2 , 5 ) , ( 3 , 6 ) ] )	<A> a list of tuples [(1, 4), (2, 5), (3, 6)] into a list of tuples according to original tuple index
[ <A> ( group ) for key , group in <B> . groupby ( <C> , operator . itemgetter ( 1 ) ) ]	split a <A> of tuples <C> into sub - lists of the same tuple field using <B>
<A> ( 'hello' )	convert a string into a <A>
<A> [ <B> ] = <A> [ <C> ] / <A> [ <D> ]	create new column <B> in dataframe <A> with row values equal to the value in column <C> divided by the value in column <D>
os . walk ( <A> )	getting a list of all subdirectories in the <A> <A>
[ x [ 0 ] for x <A> os . walk ( <B> ) ]	get a list of all subdirectories <A> the <B> <B>
{ <A> : <B>   for <A> , <C> <D> list ( <E> . items ( ) ) <F> <C> != <E> }	update all values associated with key <A> to string <B> <F> value <C> is not equal to <E> <D> dictionary <E>
dict ( ( k , <A> ) for k , v in <B> . items ( ) if v is <C> )	Filter a dictionary <B> to remove keys with value <C> and replace other values with <A>
dict ( ( k , <A> ) for k , v in <B> . items ( ) if v != <C> )	Filter a dictionary <B> to remove keys with value <C> and replace other values with <A>
<A> . groupby ( <B> ) . size ( )	count number of rows in a group <B> in pandas groupby object <A>
<A> = [ <B> ( <C> ) for <C> <D> <E> ]	return list <A> of <B> of elements of each list <C> <D> list of lists <E>
any ( d [ 'site' ] == 'Superuser'   <A> d <B> data )	What ' s the best way to search <A> a Python dictionary value <B> a list of dictionaries ?
nodes = [ [ <A> ( ) for j in range ( <B> ) ] for i in range ( <C> ) ]	create a 2 D array of <A> objects with dimensions <B> columns and <C> <C>
print ( os . path . splitext ( <A> ) [ 0 ] + <B> )	replace extension '.txt' in basename <A> with extension <B>
<A> . display . set_mode ( ( 0 , 0 ) , <A> . FULLSCREEN )	Set the resolution of a monitor as FULLSCREEN in <A>
<A> . set_title ( '$%s \\times 10^{%s}$'   % ( '3.5' , '+20' ) )	format float 3.5e+20 to $3.5 \\times 10^{20}$ and set as title of matplotlib plot <A>
print ( os . path . getmtime ( <A> ) )	get the age of directory ( or file ) <A> in seconds .
<A> . strftime ( '%B' )	how to get month name of datetime <A>
<A> . strftime ( '%B' )	get month name from a datetime object <A>
[ j for i in <A> for j in i ]	convert nested list <A> into a flat list
print ( <A> ( <B> . chain . from_iterable ( <C> ) ) )	get each value from <C> <A> of lists <C> using <B>
datetime . datetime . strptime ( <A> , '%B %d, %Y' ) . strftime ( '%A' )	convert date string <A> into day of week
<A> . remove ( 'b' )	"remove item ""b"" in list <A>"
<A> . remove ( <B> )	remove item <B> in list <A>
<A> . remove ( <B> )	delete the element <B> from list <A>
<A> . remove ( <B> )	delete the element <B> from list <A>
re . findall ( '(?=(a.*?a))' , <A> )	get all matching patterns 'a.*?a' from a string <A> .
np . einsum ( 'ij,kj->jik' , <A> , <A> )	outer product of each column of a 2 d <A> array to form a 3 d array <A>
<A> [ ( -1 ) ]	getting the last element of list <A>
<A> [ ( -2 ) ]	getting the second to last element of list <A>
<A> [ ( - <B> ) ]	gets the <B> th - to - last element in list <A>
<A> [ ( -1 ) ]	get the last element in list <A>
<A> [ ( -1 ) ]	get the last element in list <A>
print ( [ u for v in [ [ i , i ] for i in range ( <A> ) ] for u in v ] )	make a list of integers from 0 to <A> where each second element is a duplicate of the previous element
[ 0 , 0 , 1 , 1 , 2 , 2 , 3 , 3 , 4 , 4 ]	create a list of integers with duplicate values [0, 0, 1, 1, 2, 2, 3, 3, 4, 4]
[ ( i // 2 ) for i in range ( 10 ) ]	create a list of integers from 1 to 5 with each value duplicated
<A> [ <A> . find ( '\n' ) + 1 : <A> . rfind ( '\n' ) ]	remove first and last lines of string <A>
{ ( x ** 2 ) for x <A> <B> ( <C> ) }	create dict of squared int values <A> <B> of <C>
<A> ( * [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ] )	<A> lists [1, 2], [3, 4], [5, 6] in a list
<A> ( * [ [ <B> , <C> ] , [ <D> , <E> ] , [ <F> , <E> ] ] )	<A> lists in a list [ [ <B> , <C> ] , [ <D> , <E> ] , [ <F> , <E> ] ]
requests . get ( <A> , auth = ( <B> , <C> ) )	request page <A> with credentials of username <B> and password <C>
<A> [ 2 : ]	get a new string from the 3 rd character to the end of the string <A>
<A> [ : 2 ]	get a new string including the first two characters of string <A>
<A> [ : ( -2 ) ]	get a new string including all but the last character of string <A>
<A> [ ( -2 ) : ]	get a new string including the last two characters of string <A>
<A> [ 2 : ( -2 ) ]	get a new string with the 3 rd to the second - to - last characters of string <A>
<A> [ : : ( -1 ) ]	reverse a string <A>
'H-e-l-l-o- -W-o-r-l-d' [ : : 2 ]	"select alternate characters of ""H-e-l-l-o- -W-o-r-l-d"""
<A> = <A> [ <B> : ( <B> + <C> ) ]	select a substring of <A> <B> at <B> of length <C>
sys . exit ( )	terminate the program
quit ( )	terminate the program
sys . exit ( 'some error message' )	"Terminating a Python script with error message ""some error message"""
<A> [ <B> ] . encode ( <C> , 'ignore' )	encode value of key <B> in dictionary <A> as <C> , ignoring non - ascii characters
pd . read_csv ( <A> , <B> = list ( 'abcdef' ) )	read a ragged csv file <A> using <B> parameter in pandas
<A> . stack ( ) . groupby ( level = 0 ) . first ( )	get first non - null value per each row from dataframe <A>
""""" ""{0} {1}"" """" . format ( <A> , <B> )"	print two numbers <A> and <B> using string formatting
""""" ""{1} {ham} {0} {foo} {1}"" """" . format ( 10 , 20 , foo = 'bar' , ham = 'spam' )"	replace placeholders in string '{1} {ham} {0} {foo} {1}' with arguments (10, 20, foo='bar', ham='spam')
changed_list = [ ( int ( f ) if f . isdigit ( ) else f ) for f in <A> ]	create list changed_list  containing elements of list <A> whilst converting strings containing digits to integers
dict ( zip ( <A> , zip ( * <B> ) ) )	get a dictionary with <A> from one list <A> and values from other list <B>
<A> . decode ( 'iso-8859-1' ) . encode ( 'utf8' )	convert string <A> from iso -8859 -1 / latin1 to utf -8
<A> . to_csv ( <B> , header = False )	Exclude column names when writing dataframe <A> to a csv file <B>
print ( <A> . format ( '1' , '2' , '3' ) )	Escape character '}' in string <A> while using function format with arguments ('1', '2', '3')
<A> ( <B> , <C> = lambda d : d [ <D> ] )	get dictionary with <A> value of <C> <D> in list of dicts <B>
""""" <A> """" . format ( <B> , <C> )"	format parameters <B> and <C> into plcaeholders in string <A>
<A> = models . ForeignKey ( <B> , unique = True )	django create a foreign key column <A> and link it to table <B>
re . compile ( '^([^A]*)AA([^A]|AA)*$' )	write a regex pattern to match even number of letter A
<A> = np . concatenate ( ( a , a ) , <B> = <C> )	join Numpy array <A> with Numpy array 'a' along <B> <C>
sorted ( <A> , key = lambda x : x . replace ( '0' , 'Z' ) )	custom sort an alphanumeric list <A>
ax . set_yscale ( 'log' )	plot logarithmic axes with matplotlib
os . environ [ 'HOME' ]	"Access environment variable ""HOME"""
os . environ [ 'HOME' ]	"get value of environment variable ""HOME"""
<A> ( os . environ )	<A> all environment variables
os . environ	get all environment variables
print ( os . environ . get ( <A> ) )	get value of the environment variable <A>
print ( os . getenv ( <A> , <B> ) )	get value of the environment variable <A> with default value <B>
print ( os . environ . get ( <A> , <B> ) )	get value of the environment variable <A> with default value <B>
print ( dict ( [ s . split ( <A> ) for s <B> <C> ] ) )	create a dictionary containing each string <B> list <C> split by <A> as a key / value pairs
min ( enumerate ( <A> ) , key = lambda x : abs ( x [ 1 ] - <B> ) )	find the index of element closest to number <B> in list <A>
"e = <A> . xpath ( './/a[contains(text(),""TEXT A"")]' )"	"find element a that contains string ""TEXT A"" in file <A>"
"<A> = <B> . xpath ( './/a[starts-with(text(),""TEXT A"")]' )"	"find the a tag in html <B> which starts with the text ""TEXT A"" and assign it to <A>"
"e = <A> . xpath ( './/a[text()=""TEXT A""]' )"	find the element that holds string 'TEXT A' in file <A>
<A> = [ <B> [ i ] for i <C> <D> ]	create list <A> containing items from list <B> whose <D> is <C> list <D>
np . dot ( a [ : , ( None ) ] , b [ ( None ) , : ] )	get the dot product of two one dimensional numpy arrays
np . outer ( a , b )	multiplication of two 1 - dimensional arrays in numpy
subprocess . call ( [ <A> , <B> , <C> ] )	execute a file <A> with arguments <B> and <C> in python shell
<A> [ [ <B> ] ] . fillna ( <A> . groupby ( <C> ) . transform ( 'mean' ) )	replace NaN values in column <B> with the mean of data in column <C> of dataframe <A>
re . sub ( '(.)(?=.)' , '\\1-' , <A> )	separate each character in string <A> by '-'
re . sub ( '(?<=.)(?=.)' , <A> , <B> )	concatenate <A> in between characters of string <B>
i , j = <A> . where ( <B> == <C> )	get the indexes of the x and y axes in Numpy array <A> where variable <B> is equal to variable <C>
<A> ( collections . Counter ( <B> ) . most_common ( 1 ) [ 0 ] )	<A> letter that appears most frequently in string <B>
<A> ( re . findall ( '(?:^|_)'   + <B> + '(\\d+\\.\\d*)' , <C> ) [ 0 ] )	find <A> number proceeding sub - string <B> in string <C>
re . findall ( '[^a]' , <A> )	get all the matches from a string <A> if it begins with a character a
print ( [ item for item <A> dir ( adfix ) if not item . startswith ( '__' ) ] )	get a list of variables from module 'adfix.py' <A> current module .
[ x [ 0 ] for x <A> <B> ]	get the first element of each tuple <A> a list <B>
<A> = [ x [ 0 ] for x <B> <C> ]	get a list <A> of the first elements of each tuple <B> a list of tuples <C>
pd . concat ( [ <A> ] * <B> , ignore_index = True )	duplicate data in pandas dataframe <A> for <B> times
pd . concat ( [ <A> ] * <B> )	get a repeated pandas data frame object <A> by <B> times
sorted_list_of_keyvalues = sorted ( list ( <A> . items ( ) ) , <B> = item [ 1 ] [ <C> ] )	sort json <A> by a <B> <C>
pd . read_json ( <A> )	read json <A> to pandas dataframe df
numpy . random . choice ( numpy . arange ( <A> , <B> ) , p = [ <C> , <D> , <D> , <E> , <F> , <E> ] )	generate a random number in <A> to <B> with a given distribution [ <C> , <D> , <D> , <E> , <F> , <E> ]
<A> . loc [ <A> [ <B> ] . idxmax ( ) ]	Return rows of data associated with the maximum value of column <B> in dataframe <A>
re . findall ( '^(.+?)((.+)\\3+)$' , <A> ) [ 0 ] [ : -1 ]	find recurring patterns in a string <A>
np . fromstring ( <A> , dtype = '<f4' )	convert binary string <A> to numpy array
np . fromstring ( '\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@' , dtype = '>f4' )	convert binary string to numpy array
cursor . execute ( <A> , ( var1 , var2 , var3 ) )	insert variables (var1, var2, var3) into sql statement <A>
cursor . execute ( 'inSERT inTO table VALUES (%s, %s, %s)' , ( <A> , <B> , <C> ) )	execute a sql statement using variables <A> , <B> and <C>
<A> [ <B> ] . str [ 1 : -1 ] . str . split ( <C> , expand = True ) . astype ( float )	pandas split strings in column <B> by <C> into columns in dataframe <A>
<A> [ <B> ] . str [ 1 : -1 ] . str . split ( <C> ) . apply ( pd . Series ) . astype ( float )	split string in column <B> by <C> into separate columns in dataframe <A>
<A> [ <B> ] . apply ( pd . Series )	Unpack column <B> in dataframe <A> into a series of columns
<A> . wait ( )	wait for shell command <A> evoked by subprocess .Popen to complete
<A> . encode ( 'utf8' )	encode string <A> to utf -8 code
<A> . datetime . strptime ( <B> , <C> )	parse string <B> into a <A> object using format <C>
copyfile ( <A> , <B> )	copy a file from <A> to <B>
shutil . copy2 ( '/dir/file.ext' , '/new/dir/newname.ext' )	"copy file ""/dir/file.ext"" to ""/new/dir/newname.ext"""
shutil . copy2 ( <A> , <B> )	copy file <A> to <B>
<A> ( ', ' . join ( str ( x ) for x in <B> ) )	<A> a list of integers <B> using string formatting
<A> [ [ <B> , <C> ] ] . multiply ( <A> [ <D> ] , axis = 'index' )	multiply column <B> and column <C> by column <D> in datafram <A>
<A> ( ord ( <B> ) )	convert string <B> to <A>
<A> ( j ** i for i , j <B> enumerate ( <C> , 1 ) )	get the <A> of values to the power of their indices <B> a list <C>
""""" "" "" """" . join ( <A> . split ( ) )"	remove extra white spaces &  tabs from a string <A>
<A> = <A> . replace ( ',' , <B> )	replace comma in string <A> with empty string <B>
<A> . resample ( <B> ) . agg ( { <C> : np . sum , <D> : np . mean } )	Resample dataframe <A> to resolution of 1 hour <B> for timeseries index , summing values in the column <C> averaging those in column <D>
<A> = pd . DataFrame . from_dict ( { k : v for k , v in list ( <B> . items ( ) ) if k != 'y3' } )	create a pandas dataframe <A> from elements of a dictionary <B>
first_name = <A> . args . get ( <B> )	Flask get value of <A> variable <B>
first_name = request . form . get ( <A> )	Flask get posted form data <A>
[ s [ : <A> ] for s <B> <C> ]	get a list of substrings consisting of the first <A> characters of every string <B> list <C>
<A> . sort ( key = lambda item : ( - len ( item ) , item ) )	sort list <A> by the length of string followed by alphabetical order
<A> = <A> . set_index ( [ <B> ] )	Set index equal to field <B> in dataframe <A>
list ( accumulate ( list ( <A> ( <B> ) ) ) )	List comprehension with an accumulator in <A> of <B>
datetime . datetime . strptime ( <A> , <B> ) . strftime ( <C> )	How to convert a date string <A> in format <B> to different format <C>
datetime . datetime . strptime ( <A> , <B> ) . strftime ( <C> )	convert a date string <A> in format <B> to different format <C>
<A> = <B> . ix [ : , ( ~ <B> . columns . str . endswith ( <C> ) ) ]	get a dataframe <A> that contains all the columns of dataframe <B> that do not end in <C>
<A> = <B> [ -10 : ]	create list <A> containing the last 10 elements of list <B>
<A> [ -10 : ]	get the last 10 elements from a list <A>
np . array ( <A> . _data ) . reshape ( <A> . size [ : : -1 ] ) . T	convert matlab engine array <A> to a numpy ndarray
<A> . groupby ( <B> = <C> , as_index = False ) . nth ( <C> )	select the first row grouped per <B> <C> of dataframe <A>
<A> . concatenate ( <B> , <C> = 0 )	concatenate sequence of <A> arrays <B> into a one dimensional array along the first <C>
""""" <A> """" . encode ( 'utf-8' ) . decode ( 'unicode_escape' )"	convert and escape string <A> to UTF -8 code
""""" <A> """" . encode ( 'utf-8' )"	encode string <A> to bytes
[ j for i in zip ( <A> , <B> ) for j in i ]	interleave the elements of two lists <A> and <B>
[ j for i in zip ( <A> , <B> ) for j in i ]	merge two lists <A> and <B> into <A> single list
print ( [ <A> . replace ( <B> , '' ) for <A> <C> <D> ] )	delete all occureces of <B> <C> each string <A> <C> list <D>
""""" <A> """" . join ( <B> )"	split string <B> into a string of letters seperated by <A>
Content . objects . all ( ) . order_by ( '?' ) [ : <A> ]	in Django , select <A> random records from the database Content.objects
<A> [ np . arange ( <A> . shape [ 0 ] ) [ : , ( None ) ] , <B> ]	create a NumPy array containing elements of array <A> as pointed to by index in array <B>
<A> . pivot_table ( <B> = <C> , columns = <D> , aggfunc = 'size' , fill_value = 0 )	pivot dataframe <A> so that values for <D> become column headings and values for <C> become the <B>
re . findall ( '([a-z]*)' , 'f233op' )	match zero - or - more instances of lower case alphabet characters in a string f233op 
re . findall ( '([a-z])*' , 'f233op' )	match zero - or - more instances of lower case alphabet characters in a string f233op 
re . split ( <A> , <B> )	split string <B> using string <A>
re . split ( '_(?:for|or|and)_' , <A> )	split string <A> based on string 'and' , 'or' or 'for'
[ re . split ( '_(?:f?or|and)_' , s ) <A> s in <B> ]	split a string <B> by multiple words <A> or or or and
[ dict ( <A> ( <B> , x ) ) for x <C> <D> ]	<A> keys with individual values <C> lists <B> and <D>
sorted ( lst , reverse = True )	sort a list 'lst' in descending order .
<A> . sort ( order = [ <B> , <C> , <D> ] )	sort array <A> based on column <B> , <C> and <D>
df . sort ( [ <A> , <B> , <C> ] )	sort a structured numpy array 'df' on multiple columns <A> , <B> and <C> .
return <A> == <B> ( range ( <A> [ 0 ] , <A> [ -1 ] + 1 ) )	check if elements in <B> <A> are coherent in order
<A> . groupby ( <B> ) . agg ( lambda x : x . tolist ( ) )	group rows of pandas dataframe <A> with same <B>
'X\xc3\xbcY\xc3\x9f' . encode ( 'raw_unicode_escape' ) . decode ( 'utf-8' )	encode u'X\xc3\xbcY\xc3\x9f' as unicode and decode with utf -8
<A> ( <B> )	parse string <B> to <A>
getattr ( <A> , <B> , <C> )	get the value of attribute <B> of object <A> with default value <C>
np . delete ( <A> , list ( range ( 0 , <A> . shape [ 1 ] , <B> ) ) , axis = 1 )	delete every <B> th column in <A> numpy array 'a' .
<A> . datetime . fromtimestamp ( <B> / 1000.0 )	convert <B> milliseconds to a <A> object
np . einsum ( '...j,...j->...' , <A> , <A> )	find the magnitude ( length ) squared of a vector <A> field
r = requests . get ( <A> )	request http <A> <A>
r = requests . get ( <A> , params = <B> )	request http <A> <A> with parameters <B>
r = requests . post ( <A> , data = <B> )	post request <A> <A> with parameters <B>
post_response = requests . post ( url = 'http://httpbin.org/post' , json = <A> )	make an HTTP post request with data <A>
{{ ( <A> |  <B> ) : <C> }}	django jinja <B> list <A> by <C>
df1 = pd . read_hdf ( <A> , <B> )	create dataframe df with content of hdf store file <A> with key of <B>
max ( <A> . rfind ( i ) for i <B> <C> )	get the largest index of the last occurrence of characters <C> <B> string <A>
<A> ( <B>   + <C> )	<A> <B> plus unicode character u <C>
<A> ( <B> )	<A> unicode characters in a string <B>
print ( '{0}' . format ( <A> . zfill ( 2 ) ) )	pads string <A> on the left with 1 zero
sorted ( set ( itertools . chain . from_iterable ( <A> ) ) )	remove duplicates elements from list <A> and sort it in ascending order
<A> [ <B> ] . values . tolist ( )	pandas dataframe <A> column <B> to list
<A> [ <B> ] . tolist ( )	get a list of all values in column <B> in pandas data frame <A>
"replace ( '""' , '\\""' )"	escaping quotes in string
print ( <A> ( word [ 0 ] . isupper ( ) for word <B> <C> ) )	check if <A> string elements <B> list <C> are upper - cased
<A> = { key : <B> for key , <B> in list ( <A> . items ( ) ) <C> <B> != <D> }	remove items from dictionary <A> <C> the item ' s value <B> is equal to <D>
{ key : val for key , val in list ( <A> . items ( ) ) if val != <B> }	remove all items from a dictionary <A> whose values are <B>
return len ( <A> . encode ( 'utf-8' ) )	Determine the byte length of a utf -8 encoded string <A>
os . kill ( <A> . pid , signal . SIGKILL )	kill a <A> with id process.pid
<A> [ pd . isnull ( <A> ) . any ( axis = 1 ) ]	get data of columns with Null values in dataframe <A>
<A> . split ( <B> ) [ -1 ] . replace ( <C> , '' ) + <D>	strip everything up to and including the character <B> from <A> <A> , strip the character <C> from the remaining string and concatenate <D> to the end
parser . ParseFile ( open ( <A> , 'rb' ) )	Parse a file <A> using expat parsing in python 3
sys . exit ( )	Exit script
setattr ( self , <A> , <B> )	assign value in <B> dynamically to class property <A>
urllib . parse . unquote ( urllib . parse . unquote ( <A> ) )	decode url - encoded string <A> to its character equivalents
urllib . parse . unquote ( urllib . parse . unquote ( <A> ) )	decode a double URL encoded string <A> to 'FireShot3+(2).png'
app . config [ 'SECURITY_REGISTER_URL' ] = <A>	change flask security register url to <A>
output = <A> ( <B> , 'wb' )	<A> a file <B> in binary write mode
del <A> [ ( -1 ) ]	remove the last element in list <A>
<A> . pop ( <B> )	remove the element in list <A> with index <B>
<A> . pop ( )	remove the last element in list <A>
<A> . pop ( <B> )	remove the element in list <A> at <B> <B>
del <A> [ <B> ]	remove the element in list <A> at <B> <B>
<A> . set_xlabel ( 'Temperature (\u2103)' )	print a celsius symbol on x axis of a plot <A>
ax . set_xlabel ( 'Temperature ($^\\circ$C)' )	Print a celsius symbol with matplotlib
[ <A> . join ( l ) for l in <B> ]	convert a list of lists <B> into a list of strings keeping empty sub - lists as empty string <A>
pd . concat ( g for _ , g <A> <B> . groupby ( 'ID' ) if len ( g ) >  1 )	get a list of all the duplicate items <A> dataframe <B> using pandas
<A> = <B> . delete ( <A> , 2 , axis = 1 )	Delete third row in a <B> array <A>
<A> = numpy . delete ( <A> , 0 , axis = 0 )	delete first row of array <A>
pd . concat ( ( <A> , <B> ) , <C> = <D> ) . mean ( <C> = <D> )	merge rows from dataframe <A> with rows from dataframe <B> and calculate the mean for rows that have the same value of <C> <D>
np . mean ( np . array ( [ <A> , <B> ] ) , axis = 0 )	get the average values from two numpy arrays <A> and <B>
scatter ( x , y , s = <A> , color = 'green' , <B> = 'h' )	Matplotlib change <B> size to <A>
<A> = [ <B> for word <C> <D> for <B> <C> word . split ( ',' ) ]	create new list <A> by splitting each <B> <C> list <D>
datetime . datetime . strptime ( <A> , <B> )	convert JSON string <A> into a DateTime object using format <B>
sum ( item [ <A> ] for item <B> list ( <C> . values ( ) ) )	count True values associated with key <A> <B> dictionary <C>
<A> = open ( <B> , 'rb' ) . read ( ) . encode ( <C> )	encode <A> pdf file <B> with <C> encoding
<A> . rstrip ( ) . split ( <B> )	split string <A> using new - line character <B> as separator
<A> . split ( '\n' ) [ : -1 ]	split <A> string <A> with new line character
<A> HttpResponse ( <B> = <C> )	<A> http <B> code <C> from a django view
( <A> <B> <C> )	check if <A> is <B> <C>
( <A>   <B> a )	check if <A> is <B> list <A>
sorted ( <A> , key = itemgetter ( <B> ) )	sort list <A> by keys value <B>
print ( <A> . current_url )	get current url in selenium webdriver <A>
re . split ( '; |, ' , <A> )	split string <A> with delimiter '; ' or delimiter ', '
""""" ""\\u003Cp\\u003E"" """" . decode ( 'unicode-escape' )"	un - escaping characters in a string with python
time . mktime ( datetime . datetime . strptime ( <A> , <B> ) . timetuple ( ) )	convert date string <A> in format pattern <B> into a timestamp
int ( datetime . datetime . strptime ( <A> , '%d/%m/%Y' ) . strftime ( '%s' ) )	convert string <A> to an integer timestamp
request . headers [ <A> ]	get http header of the key <A> in flask
<A> . groupby ( <B> ) [ <C> ] . filter ( lambda x : x . sum ( ) == <D> )	select records of dataframe <A> where the sum of column <C> for each value in column <B> is <D>
<A> . loc [ <A> . groupby ( <B> ) [ <C> ] . transform ( <D> ) == <E> ]	get data of dataframe <A> where the <D> of column <C> grouped by column <B> is equal to <E>
<A> . groupby ( 'User' ) [ <B> ] . transform ( sum ) == <C>	get data from dataframe <A> where column <B> is equal to <C>
df . set_index ( [ <A> , <B> ] )	convert pandas group by object to multi - indexed dataframe with indices <A> and <B>
print ( re . sub ( '(\\W)\\1+' , '\\1' , <A> ) )	coalesce non - word - characters in string <A>
"os . system ( 'start ""$file""' )"	"open a file ""$file"" under Unix"
unicodedata . normalize ( 'NFKD' , <A> ) . encode ( <B> , 'ignore' )	convert a Unicode string <A> to a <B> string
<A> . encode ( <B> , 'ignore' )	convert <A> Unicode string <A> to <A> <B> string
<A> = [ f for f <B> os . listdir ( <C> ) if re . match ( '[0-9]+.*\\.jpg' , f ) ]	create a list <A> containing all <A> <B> directory <C> that starts with numbers between 0 and 9 and ends with the extension '.jpg'
np . zeros ( ( 6 , 9 , 20 ) ) + np . array ( [ <A> , 2 , <B> , 4 , 5 , 6 , 7 , 8 , 9 ] ) [ ( None ) , : , ( None ) ]	adding a <A> - d array [1, 2, 3, 4, 5, 6, 7, 8, 9] to a <B> - d array np.zeros((6, 9, 20))
np . zeros ( ( 6 , 9 , 20 ) ) + np . array ( [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ) . reshape ( ( 1 , 9 , 1 ) )	add array of shape (6, 9, 20) to array [1, 2, 3, 4, 5, 6, 7, 8, 9]
print ( max ( <A> , key = <B> ) )	get the list with the highest <B> value in list <A>
<A> ( len ( y ) for y <B> <C> if len ( y ) >  <D> )	<A> the length of lists <B> list <C> that are more than <D> item <B> length
"re . sub ( '(\\d+)' , '""\\1""' , <A> )"	Enclose numbers in quotes in a string <A>
numpy . dot ( numpy . dot ( <A> , <B> ) , <A> )	multiply the columns of sparse matrix <B> by array <A> then multiply the rows of the resulting matrix by array <A>
<A> . objects . filter ( name = <B> , title = <C> ) . exists ( )	Django check if an object with criteria <B> equal to <B> and criteria <C> equal to <C> exists in model <A>
sorted ( l , key = lambda x : ( - int ( x [ <A> ] ) , x [ 0 ] ) )	sort a nested list by the inverse of element 2 , then by element <A>
<A> . META [ 'HTTP_HOST' ]	get domain / host name from <A> object in Django
"re . findall ( ""api\\('(.*?)'"" , <A> )"	get a string 'randomkey123xyz987' between two substrings in a string <A> using regex
subprocess . call ( [ <A> , <B> , <C> ] )	invoke perl script <B> using perl interpeter <A> and send argument <C> to it
<A> ( '\n' . join ( str ( p ) for p in <B> ) )	<A> list of items <B>
<A> . update ( { <B> : <C> [ <D> ] } )	update the dictionary <A> with dynamic keys <B> and values with key <D> from dictionary <C>
<A> ( <B> . decode ( <C> ) )	split a <C> encoded string <B> into a <A> of characters
<A> = <B> . decode ( 'utf-8-sig' )	convert utf -8 with bom string <B> to utf -8 with no bom <A>
Entry . objects . filter ( ~ Q ( id = <A> ) )	Filter model 'Entry' where 'id' is not equal to <A> in Django
getattr ( __builtins__ , <A> )	lookup an attribute in any scope by name <A>
<A> . call ( [ 'shutdown' , '/r' , '/t' , <B> ] )	restart a computer after <B> seconds using <A>
<A> . call ( [ 'shutdown' , '/s' ] )	shutdown a computer using <A>
<A> . call ( [ 'shutdown' , '/a ' ] )	abort a computer shutdown using <A>
subprocess . call ( [ 'shutdown' , '/l ' ] )	logoff computer having windows operating system using python
subprocess . call ( [ 'shutdown' , '/r' ] )	shutdown and restart a computer running windows from script
open ( <A> , 'w' ) . close ( )	erase the contents of a file <A>
<A> . to_dict ( 'index' )	convert dataframe <A> to list of dictionaries including the index values
<A> . to_dict ( 'records' )	create list of dictionaries from pandas dataframe <A>
df . groupby ( pd . TimeGrouper ( freq = <A> ) )	Group a pandas data frame by monthly frequenct <A> using groupby
[ ( c / t ) for c , t in zip ( <A> , <B> ) ]	divide the members of a list <A> by the corresponding members of another list <B>
sorted ( <A> , key = <A> . get )	sort dict <A> by value
sorted ( <A> . values ( ) )	sort a dictionary <A> by its values
<A> ( <B> ( <C> . items ( ) ) , <D> = lambda x : x [ 1 ] )	get a <B> of pairs of <D> - value <A> by values in dictionary <C>
now = datetime . datetime . now ( ) . strftime ( '%H:%M:%S' )	display current time
""""" <A> """" . replace ( <B> , 'XXX' , 1 ) . find ( <B> )"	find the index of the second occurrence of the substring <B> in string <A>
set ( [ <A> , <B> ] ) . issubset ( <C> )	check if key <A> and key <B> are presented in dictionary <C>
<A> . replace ( <B> , <C> )	replace string <B> in string <A> with character <C>
<A> . savez ( <B> , * [ getarray [ <C> ] , getarray [ <D> ] , getarray [ <E> ] ] )	Save array at index <C> , index <D> and index <E> of array <A> to <B> file <B>
( <A> - datetime . timedelta ( hours = <B> , <C> = <D> ) )	subtract <B> hour and <D> <C> from time object <A>
dt = datetime . datetime . combine ( datetime . date . today ( ) , <A> )	add 1 hour and 2 minutes to time object <A>
<A> -= datetime . timedelta ( <B> = <C> )	subtract <C> <B> from the time object <A>
print ( <A> . encode ( <B> ) )	encode string <A> using hex <B> encoding
print ( ' ' . join ( [ str ( ord ( a ) ) <A> a <B> <C> ] ) )	Return the decimal value <A> each hex character <B> <C> <C>
[ x for x <A> l if x [ 1 ] == 1 ]	get all the items from a list of tuple 'l' where second item <A> tuple is '1' .
<A> . fromlist ( [ int ( val ) for val in <B> . read ( ) . split ( ) ] )	create array <A> containing integers from <B>
print ( re . sub ( '[_%^$]' , '\\\\\\g<0>' , <A> ) )	place '\'  infront of each non - letter char in string <A>
"doc . xpath ( ""//a[starts-with(text(),'some text')]"" )"	get all a tags where the text starts with value 'some text' using regex
zip ( * <A> )	convert <A> list of lists <A> into list of tuples of appropriate elements form nested lists
[ map ( int , sublist ) for sublist in <A> ]	convert a list of strings <A> to list of integers
[ [ int ( x ) for x <A> sublist ] for sublist <A> <B> ]	convert strings <A> list - of - lists <B> to ints
np . where ( np . in1d ( <A> , <B> ) ) [ 0 ]	get index of elements in array <A> that occur in another array <B>
[ { <A> : <B> , <C> : b }  for <B> , b <D> zip ( <E> [ <A> ] , <E> [ <C> ] ) ]	create <B> list where each element is <B> dictionary with keys <A> and <C> and values corresponding to each value <D> the lists referenced by keys <A> and <C> <D> dictionary <E>
calendar . monthrange ( <A> , 1 )	get Last Day of the first month in <A>
calendar . monthrange ( 2008 , 2 )	get Last Day of the second month in 2002
calendar . monthrange ( <A> , 2 )	get Last Day of the second month in <A>
calendar . monthrange ( <A> , <B> ) [ 1 ]	get Last Day of the <B> <B> in <A> <A>
monthrange ( <A> , 2 )	get Last Day of the second month in year <A>
( datetime . date ( <A> , 2 , 1 ) - datetime . timedelta ( days = 1 ) )	get Last Day of the first month in year <A>
from subprocess import call	"Calling an external command ""ls -l"""
os . system ( 'some_command with args' )	"Calling an external command ""some_command with args"""
os . system ( 'some_command < input_file | another_command > output_file' )	"Calling an external command ""some_command < input_file | another_command > output_file"""
stream = os . popen ( 'some_command with args' )	"Calling an external command ""some_command with args"""
print ( subprocess . Popen ( 'echo Hello World' , shell = True , stdout = subprocess . PIPE ) . stdout . read ( ) )	"Calling an external command ""echo Hello World"""
print ( os . popen ( 'echo Hello World' ) . read ( ) )	"Calling an external command ""echo Hello World"""
return_code = subprocess . call ( 'echo Hello World' , shell = True )	"Calling an external command ""echo Hello World"""
call ( [ 'ls' , '-l' ] )	"Calling an external command ""ls -l"""
<A> ( urllib . parse . unquote ( <B> ) . decode ( 'utf8' ) )	decode <B> <B> with utf8 and <A> it
<A> = <B> . parse . unquote ( <A> ) . decode ( <C> )	decode a <B> escaped <A> string <A> with <C>
""""" """" """" . join ( filter ( str . isdigit , <A> ) )"	delete letters from string <A>
df [ <A> ] . str . split ( '-' ) . str [ 0 ] . astype ( int )	Update row values for a column <A> using vectorized string operation in pandas
<A> . sort ( key = lambda x : x [ 1 ] )	sort a list of tuples <A> by second parameter in the tuple
[ m . start ( ) for m <A> re . finditer ( '(?=tt)' , <B> ) ]	find indexes of all occurrences of a substring tt <A> a string <B>
[ m . start ( ) for m <A> re . finditer ( 'test' , 'test test test test' ) ]	find all occurrences of a substring <A> a string
re . findall ( '\\s+|\\S+' , <A> )	split string <A> based on white spaces
<A> . set_index ( [ 'race_date' , 'track_code' , 'race_number' ] )	set columns ['race_date', 'track_code', 'race_number'] as indexes in dataframe <A>
<A> . sort ( key = lambda item : item [ <B> ] , <C> = True )	sort a <A> of dictionary values by <B> in <C> order
""""" ""{:.5}"" """" . format ( <A> )"	display first 5 characters of string <A>
struct . unpack ( '11B' , <A> )	unpack hexadecimal string <A> to a list of integer values
[ i for i , j in enumerate ( [ <A> , 'bar' , 'baz' ] ) if j == <A> ]	finding the index of an item <A> given a list ['foo', 'bar', 'baz'] containing it
print ( <A> ( itertools . product ( [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ) ) )	generate all permutations of <A> [1, 2, 3] and <A> [4, 5, 6]
itertools . permutations ( [ 1 , 2 , 3 ] )	generate all permutations of a list [1, 2, 3]
return re . sub ( <A> , <B> , <C> )	substitute occurrences of unicode regex pattern u <A> with empty string <B> in string <C>
<A> <B> ( <C> )	manually throw / <A> a <B> exception with the message <C>
raise Exception ( 'I know Python!' )	"throw an exception ""I know Python!"""
raise Exception ( 'I know python!' )	"Manually throw an exception ""I know python!"""
raise <A> ( <B> )	throw a <A> with message <B>
raise <A> ( <B> )	throw an <A> with message <B>
raise ValueError ( <A> )	throw a value error with message <A> , 'foo' , 'bar' , 'baz'
raise RuntimeError ( <A> )	throw a runtime error with message <A>
raise AssertionError ( <A> , <B> )	throw an assertion error with message <A> , <B>
driver . find_element_by_id ( <A> ) . clear ( )	if Selenium textarea element <A> is not empty , clear the field
driver . find_element_by_id ( <A> ) . clear ( )	clear text from textarea <A> with selenium
socket . inet_ntoa ( struct . pack ( '!L' , <A> ) )	convert a number <A> to ip string
<A> = <A> [ [ <B> , <C> , <D> , <E> ] ]	Rearrange the columns <D> , <E> , <B> , <C> of pandas DataFrame <A> in mentioned sequence <B> , <C> , <D> , <E>
super ( <A> , self ) . __init__ ( * args , ** kwargs )	call base class ' s __init__ method from the child class <A>
<A> ( <B> . values ( ) )	<A> of all values in a python dict <B>
<A> . dumps ( <B> , ensure_ascii = False )	convert python dictionary <B> to <A> array
<A> = np . array ( [ i for i <B> <C> ( <D> ) ] , dtype = np . float64 )	assign an array of floats <B> <C> from 0 to <D> to a variable <A>
sorted ( <A> , key = lambda x : <B> . index ( <C> ( x . values ( ) ) [ 0 ] ) )	sort a <C> of dictionaries <A> by values in an <B> <B>
return <A> [ 0 ] . upper ( ) + <A> [ 1 : ]	change the case of the first letter in string <A>
""""" """" """" . join ( [ 1 , 2 , 3 , 4 ] )"	join list of numbers [1,2,3,4]  to string of numbers .
<A> = <A> . decode ( <B> , 'ignore' ) . encode ( <B> )	delete every non <B> characters from a string <A>
os . system ( <A> )	execute a <A> command  in the terminal from a python script
c . execute ( <A> , ( <B> , <C> ) )	MySQL execute query <A> with parameters <B> and <C>
dateobj = <A> . datetime . strptime ( <B> , <C> ) . date ( )	Parse string <B> into a <A> object using format pattern <C>
