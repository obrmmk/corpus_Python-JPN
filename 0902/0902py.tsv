x = y	yをxに代入する
x = y	xをyとする
x = y	xはyである
x, y = y, x	xとyをスワップする
x, y = y, x	xとyの値をスワップする
x, y = y, x	xとyを入れ替える
x % 2 == 0	xが偶数かどうか
if x % 2 == 0:	xが偶数ならば
x % 2 == 1	xが奇数か否か
if x % 2 == 1:	xが奇数のとき
x % 2 != 0	xが奇数か
if x % 2 != 0:	xが奇数ならば
x % 2 != 1	xが偶数かどうか
if x % 2 != 1:	もしxが偶数ならば
x % y == 0	xがyの倍数か否か
if x % y == 0:	xがyの倍数のとき
x % y == 0	xがyの倍数でないか
if x % y == 0:	xがyの倍数でないとき
x == y	xがyに等しいか否か
if x == y:	xがyに等しいならば
x != y	xがyに等しくないか
if x != y:	もしxがyに等しくないならば
x is y	xがyと同一か否か
if x is y:	xがyと同一ならば
x is y	xがyと同じかどうか
if x is y:	もしxがyと同じならば
x is not y	xがyと同一でないか
if x is not y:	もしxがyと同一でないならば
x is not y	xがyと同じでないか
if x is not y:	xがyと同じでない場合
x in y	xがyに含まれるか否か
if x in y:	もしxがyに含まれるならば
x in y	xがy内にあるか
if x in y:	xがy内にあるとき
x in y	xがy中に含まれるかどうか
if x in y:	xがy中に含まれるとき
x in y	xがy中にあるか
if x in y:	xがy中にある場合
x not in y	xがy中に存在しないかどうか
if x not in y:	xがy中に存在しないならば
x not in y	xがy中にないかどうか
if x not in y:	xがy中にないとき
x not in y	xがyにないかどうか
if x not in y:	xがyにないならば
x not in y	xがy中に含まれないかどうか
if x not in y:	もしxがy中に含まれないならば
x not in y	xがy内にないか
if x not in y:	xがy内にないとき
x not in y	xがy内に含まれないか
if x not in y:	もしxがy内に含まれないならば
x not in y	xがy内に存在しないか
if x not in y:	もしxがy内に存在しないならば
x ** y	xのy乗
x | y	xとyの論理和
x ^ y	xとyの排他的論理和
x & y	xとyの論理積
x << n	xのnビット左シフト
x >> n	xのnビット右シフト
~x	xのビット反転
x += y	xをyだけ増加させる
x += y	xをyだけ増やす
x += y	xをy増やす
x += y	xをyだけ多くする
x += 1	xを1つ増やす
x += 1	xを1つ増加させる
x += 1	xを1つ多くする
x -= y	xをy少なくする
x -= y	xをyだけ減少させる
x -= y	xをy減らす
x -= y	xをy減少させる
x -= 1	xを1つ減少させる
x -= 1	xを1つ少なくする
x -= 1	xを1つ減らす
x *= y	xをy倍にする
x /= y	xをy分の1にする
x //= y	xをy分の1にする
x //= y	xを切り捨てながらy分の1にする
x /= 2	xを半分にする
x //= 2	xを半分にする
x //= 2	xを切り捨てながら半分にする
x **= y	xをy乗にする
x %= y	xをyで割った余りにする
x %= y	xをyの剰余にする
x |= y	xをyとの論理和にする
x &= y	xをyとの論理積にする
x ^= y	xをyとの排他論理和にする
x <<= y	xをyビット左にシフトする
x <<= y	xをyビット、左シフトする
x >>= y	xをyビット右にシフトする
x >>= y	xをyビット、右シフトする
abs(x)	xの絶対値
bool(x)	xが真か
if bool(x):	xが真ならば
not bool(x)	xが真でないか否か
if bool(x) :	もしxが真ならば
if not bool(x) :	もしxが真でなとき
while bool(x) :	xが真間
while not bool(x) :	xが真でな間
complex(x, y)	x,yの複素数
divmod(x, y)	xとyの商と余り
divmod(x, y)[0]	xとyの商
divmod(x, y)[1]	xとyの余り
float(x)	数にxを変換する
float(x)	小数点数にxを変換する
float(x)	数にxをする
float(x)	小数点数にxをする
float(x)	xを小数点数に変換する
float(x)	xを浮動小数点数に変換する
float(x)	実数にxをする
float(x)	実数にxを変換する
float(x)	xを数に変換する
float(x)	xの小数点数
float(x)	xの実数
float(x)	xの浮動小数点数
float(x)	xの数
int(x)	xを整数値にする
int(x)	xを整数に変換する
int(x)	整数にxをする
int(x)	整数にxを変換する
int(x)	整数値にxをする
int(x)	整数値にxを変換する
int(x)	xを自然数に変換する
int(x)	自然数にxをする
int(x)	xを変換した整数値
int(x)	xの整数値
int(s, 2)	2進数表現sから自然数にする
int(s, 2)	2進数表現sから整数に変換する
int(s, 2)	2進数表記sから整数に変換する
int(s, 2)	2進数表現sから整数にする
int(s, 2)	2進数表記sから自然数に変換する
int(s, 2)	2進数表記sから整数にする
int(s, 2)	2進数表記sから整数値にする
int(s, 2)	2進数文字列sから整数に変換する
int(s, 2)	2進数としてs文字列を整数にする
int(s, 2)	2進数としてs文字列を自然数にする
int(s, 2)	2進数としてs文字列を整数に変換する
int(s, 2)	文字列sを2進数として整数値にする
int(s, 2)	2進数として文字列sを自然数に変換する
int(s, 2)	sを2進数として整数値にする
int(s, 2)	文字列sを2進数として整数に変換する
int(s, 2)	2進数としてsを自然数に変換する
int(s, 2)	2進数としてsを整数にする
int(s, 2)	sを2進数として整数にする
int(s, 2)	2進数として文字列sを自然数にする
int(s, 2)	2進数表現sから変換した整数値
int(s, 2)	2進数表現sから変換した自然数
int(s, 2)	2進数文字列sから変換した自然数
int(s, 2)	2進数表現sから変換した整数
int(s, 2)	2進数文字列sから変換した整数値
int(s, 2)	2進数表記sから変換した整数
ord(c)	cのコードポイント
max(x)	数列xの最大値
max(x)	xの最大値
max(x, y)	xとyの大きな方
max(x, y)	xとyの最大値
max(x, y, z)	x,y,zの最大値
min(x)	数列xの最小値
min(x)	xの最小値
min(x, y)	xとyの小さな方
min(x, y)	xとyの小さな値
min(x, y)	xとyの最小値
min(x, y, z)	x,y,zの最小値
pow(x, y)	xのy乗
pow(x, y, z)	xのy乗をzで剰余した値
round(x)	xを四捨五入する
round(x)	xを丸める
round(x)	xを四捨五入した整数値
round(x)	xを丸めた整数
round(x)	xを四捨五入した自然数
round(x)	xを丸めた整数値
round(x)	xを四捨五入した整数
round(x, n)	xを少数部n桁まで丸める
round(x, n)	xを少数部n桁で四捨五入する
round(x, n)	xを少数部n桁まで四捨五入する
round(x, n)	xを少数部n桁で丸める
round(x, n)	xの少数をn桁で四捨五入した自然数
round(x, n)	xの少数をn桁まで四捨五入した整数値
round(x, n)	xの少数部をn桁で四捨五入した整数値
round(x, n)	xの少数部をn桁で丸めた整数
round(x, n)	xの少数をn桁で四捨五入した整数
round(x, n)	xの少数をn桁まで丸めた整数値
round(x, n)	xの少数をn桁まで丸めた自然数
round(x, n)	xの少数をn桁まで四捨五入した自然数
round(x, n)	xの少数をn桁で四捨五入した整数値
round(x, n)	xの少数部をn桁まで丸めた整数
round(x, n)	xの少数部をn桁で丸めた自然数
round(x, n)	xの少数をn桁まで四捨五入した整数
round(x, n)	xの少数をn桁で丸めた自然数
round(x, n)	xの少数をn桁で丸めた整数値
round(x, n)	xの少数部をn桁まで丸めた整数値
round(x, n)	xの少数部をn桁で四捨五入した整数
math.trunc(x)	xの少数を切り捨てる
math.trunc(x)	xを切り捨てる
math.trunc(x)	xの少数部を切り捨てる
math.trunc(x)	xの少数を切り捨てた整数
math.trunc(x)	xの少数部を切り捨てた整数
math.trunc(x)	xの少数部を切り捨てた整数値
math.trunc(x)	xの少数部を切り捨てた自然数
math.trunc(x)	xの少数を切り捨てた自然数
math.trunc(x)	xを切り捨てた整数
math.trunc(x)	xを切り捨てた整数値
math.trunc(x)	xの少数を切り捨てた整数値
math.floor(x)	xを切り上げる
math.floor(x)	xの少数部を切り上げる
math.floor(x)	xの少数を切り上げる
math.floor(x)	x以下の最大な自然数
math.floor(x)	x以下の最大の自然数
math.floor(x)	x以下の最大の整数
math.floor(x)	x以下の最大の整数値
math.floor(x)	x以下の最大な整数
math.floor(x)	x以下の最大な整数値
math.floor(x)	xの少数を切り上げた整数値
math.floor(x)	xの少数部を切り上げた自然数
math.floor(x)	xの少数部を切り上げた整数値
math.floor(x)	xを切り上げた自然数
math.floor(x)	xを切り上げた整数値
math.floor(x)	xの少数部を切り上げた整数
math.ceil(x)	xの少数を切り捨てる
math.ceil(x)	xの少数部を切り捨てる
math.ceil(x)	xを切り捨てる
math.ceil(x)	x以上の最小の自然数
math.ceil(x)	x以上の最小な整数
math.ceil(x)	x以上の最小の整数
math.ceil(x)	x以上の最小な整数値
math.ceil(x)	x以上の最小な自然数
math.ceil(x)	x以上の最小の整数値
math.ceil(x)	xを切り捨てた整数
math.ceil(x)	xを切り捨てた自然数
math.ceil(x)	xの少数部を切り捨てた整数
math.ceil(x)	xを切り捨てた整数値
math.ceil(x)	xの少数を切り捨てた整数値
math.ceil(x)	xの少数部を切り捨てた自然数
math.ceil(x)	xの少数を切り捨てた整数
ascii(x)	xを印字できる文字列にする
ascii(x)	xの印字可能な文字列
bin(x)	xを2進数文字列にする
bin(x)	xを2進数表記にする
bin(x)	xを2進数表現にする
bin(x)	xの2進数文字列
hex(x)	xを16進数文字列にする
hex(x)	xを16進数表現にする
hex(x)	xを16進数表記にする
hex(x)	xの16進数文字列
oct(x)	xを8進数表記にする
oct(x)	xを8進数文字列にする
oct(x)	xを8進数表現にする
oct(x)	xの8進数文字列
chr(c)	文字コードcの文字
chr(c)	cの文字
chr(c)	コードポイントcの文字
chr(c)	コードポイントcを文字に変換する
chr(c)	cを文字にする
chr(c)	文字コードcを文字に変換する
chr(c)	コードポイントcを文字にする
chr(c)	cを文字に変換する
chr(c)	文字コードcを文字にする
repr(object)	objectの印字できる文字列
repr(object)	objectの印字文字列
repr(object)	objectの印字可能な文字列
str(x)	xを文字列に変換する
str(x)	xを文字列にする
str(x)	xの文字列
all(iterable)	iterableの全てが真か
if all(iterable):	もしiterableの全てが真ならば
not all(iterable)	iterableの全てが真でないか
if all(iterable) :	iterableの全てが真ならば
if not all(iterable) :	もしiterableの全てが真でないならば
while all(iterable) :	iterableの全てが真間
all(iterable)	iterableが全て真か
if all(iterable):	もしiterableが全て真ならば
not all(iterable)	iterableが全て真でないか否か
if all(iterable) :	iterableが全て真とき
if not all(iterable) :	iterableが全て真でなならば
while not all(iterable) :	iterableが全て真でな間
any(iterable)	iterableのいずれかが真か
if any(iterable):	iterableのいずれかが真のとき
not any(iterable)	iterableのいずれかが真でないか
if any(iterable) :	iterableのいずれかが真場合
if not any(iterable) :	もしiterableのいずれかが真でないならば
while any(iterable) :	iterableのいずれかが真間
while not any(iterable) :	iterableのいずれかが真でない間
any(iterable)	iterableのひとつでも真か
if any(iterable):	iterableのひとつでも真の場合
not any(iterable)	iterableのひとつでも真でないか
if any(iterable) :	もしiterableのひとつでも真とき
if not any(iterable) :	もしiterableのひとつでも真でないとき
while any(iterable) :	iterableのひとつでも真間
enumerate(x)	xを順番付けする
enumerate(x)	xを順序付けする
enumerate(x)	xを番号付けする
enumerate(x)	xの順序付けされた列
enumerate(x)	xの順序列
enumerate(x)	xの順序を数える
enumerate(x)	xの順番を数える
enumerate(x, y)	xをyから順番付けする
enumerate(x, y)	xをyから順序付けする
enumerate(x, y)	yからxをナンバリングする
enumerate(x, y)	xをyから番号付けする
enumerate(x, y)	yからxを順序付けする
enumerate(x, y)	xのyから開始する順序列
enumerate(x, y)	xのyから始まる順序列
enumerate(x, y)	xのyから始まる順序付けされた列
enumerate(x, y)	xのyから開始する順序付けされた列
enumerate(x, y)	xの順番をyから数える
enumerate(x, y)	xの順序をyから数える
enumerate(x, y)	xのyから順番を数える
enumerate(x, y)	xのyから順序を数える
iter(x)	xのイテレータ
len(x)	xの長さ
len(x)	xの要素数
len(x)	xのサイズ
len(x) == 0	xが空であるか否か
if len(x) == 0:	xが空であるとき
len(x) != 0	xが空であるでないかどうか
if len(x) == 0 :	もしxが空である場合
if len(x) != 0 :	xが空であるでないとき
len('abc')	文字列'abc'の文字数
len('abc')	'abc'の文字数
len('abc')	'abc'文字列の文字数
list(x)	xのリスト
range(x)	0からxまでの数列
range(x, y)	xからyまでの数列
range(x, y, z)	xからyまでのz間隔の数列
reversed(x)	xを逆順にする
reversed(x)	xの逆順
set()	空集合
set(x)	xの集合
slice(x)	0からxまでの部分列
slice(x)	0からxまでのスライス
slice(x, y)	xからyまでの部分列
slice(x, y)	xからyまでのスライス
slice(x, y, z)	xからyまでのzごとによるスライス
sum(x)	xの合計
sum(x)	xの総和
sum(x)	数列xの合計値
sum(x)/len(x)	数列xの平均
sum(x)/len(x)	xの平均値
sum(x)/len(x)	数列xの平均値
sum(x)/len(x)	xの平均
tuple(x)	xのタプル
tuple(x)	xの組
zip(x, y)	列xとyの各要素のペア
zip(x, y)	xとyをzipする
zip(x, y, z)	列x,y,zの各要素のタプル
zip(x, y, z)	列x,y,zの各要素の組
dict(x)	xの辞書
dict(x)	xのハッシュ表
dict[key]	辞書dictのkeyの値
dict[key]	辞書dictのkey項目名の値
dict[key]	dictのkey項目名の値
dict[key]	辞書dictのkeyキーの値
dict[key]	マップdictのkeyキーの値
dict[key]	マップdictのkeyの値
dict[key]	dictのキーkeyの値
dict[key]	辞書dictのkeyを参照した値
dict[key]	辞書dictのkey項目名を参照した値
dict[key]	dictの項目名keyを参照した値
dict[key]	辞書dictのキーkeyを参照した値
dict[key]	辞書dictのkeyキーを参照した値
dict[key]	辞書dictの項目名keyを参照した値
list(dict)	辞書dictの項目名一覧
list(dict)	dictのキー一覧
list(dict)	dictの項目名一覧
list(dict)	マップdictの項目名一覧
list(dict)	辞書dictのキー一覧
len(dict)	辞書dictの値数
len(dict)	マップdictの値数
len(dict)	辞書dictの項目数
len(dict)	辞書dictのエントリ数
dict.clear()	辞書dictの全値を消去する
dict.clear()	辞書dictの全エントリを消去する
dict.clear()	辞書dictの全項目を消去する
dict.copy()	辞書dictのコピー
dict.copy()	辞書dictの浅いコピー
dict.copy()	マップdictのコピー
dict.copy()	ハッシュ表dictの浅いコピー
dict.get(key)	辞書dictからkeyの値を得る
dict.get(key)	辞書dictからkeyキーの値を得る
dict.get(key)	マップdictから項目名keyの値を得る
dict.get(key)	辞書dictから項目名keyの値を得る
dict.get(key)	dictから項目名keyの値を得る
dict.get(key)	マップdictからキーkeyの値を得る
dict.get(key)	辞書dictにおけるkey(キー)に対応した値
dict.get(key)	dictにおけるkey(キー)に対応した値
dict.get(key)	マップdictにおけるkey(キー)に対応した値
dict.get(key, x)	マップdictの項目名keyの値、もしなければxを得る
dict.get(key, x)	ハッシュ表dictのキーkeyの値、もしなければxを得る
dict.get(key, x)	辞書dictのkeyの値、もし存在しなければxを得る
dict.get(key, x)	dictのkey項目名の値、もしなければxを得る
dict.get(key, x)	辞書dictのキーkeyの値、もしなければxを得る
dict.get(key, x)	辞書dictのkeyキーの値、もし存在しなければxを得る
dict.get(key, x)	ハッシュ表dictのkeyの値、もし存在しなければxを得る
dict.get(key, x)	辞書dictのkeyの値、もしなければxを得る
dict.get(key, x)	辞書dictのキーkeyの値、もし存在しなければxを得る
dict.items()	辞書dictの値一覧
dict.items()	辞書dictの項目一覧
dict.items()	ハッシュ表dictのエントリ一覧
dict.keys()	辞書dictのキー一覧
dict.keys()	辞書dictの項目名一覧
dict.pop(key)	辞書dictのキーkeyを取り出す
dict.pop(key)	ハッシュ表dictのkeyを取り出す
dict.pop(key)	辞書dictのkeyを取り出す
dict.pop(key)	辞書dictのkeyキーを取り出す
dict.pop(key)	辞書dictの項目名keyを取り出す
dict.pop(key)	辞書dictのkey項目名を取り出す
dict.pop(key)	dictのkeyを取り出す
dict.popitem()	辞書dictから最後に追加したエントリを取り出す
dict.popitem()	ハッシュ表dictから最後に追加したエントリを取り出す
dict.setdefault(key, x)	dict内にkeyエントリがなければ、そのエントリをxにする
dict.setdefault(key, x)	dict内にkeyが存在しなければ、そのエントリをxにする
dict.setdefault(key, x)	dict内に項目keyが存在しなければ、その項目をxにする
dict.setdefault(key, x)	dict中にkeyがなければ、その値をxにする
dict.setdefault(key, x)	dict中にkey値が存在しなければ、その値をxにする
dict.setdefault(key, x)	dict内にkey項目が存在しなければ、その項目をxにする
dict.setdefault(key, x)	dict内にkeyがなければ、そのエントリをxにする
dict.setdefault(key, x)	dict中にkeyがなければ、そのエントリをxにする
dict.setdefault(key, x)	dict内に値keyが存在しなければ、その値をxにする
dict.setdefault(key, x)	dict内にkeyが存在しなければ、その項目をxにする
dict.setdefault(key, x)	dict内にkeyエントリが存在しなければ、そのエントリをxにする
dict.setdefault(key, x)	dictに値keyがなければ、その値をxにする
dict.update(x)	ハッシュ表dictをxでアップデートする
dict.update(x)	辞書dictをxで更新する
dict.update(x)	辞書dictをxでアップデートする
dict.update(x)	dictをxで更新する
dict.values()	辞書dictの値一覧
dict | dict2	辞書dictとdict2をマージする
dict | dict2	マップdictとdict2をマージする
dict |= dict2	辞書dictに辞書dict2を追加する
dict |= dict2	マップdict2をdictマップに追加する
dict |= dict2	辞書dictにdict2を追加する
dict |= dict2	辞書dictにdict2を加える
dict |= dict2	辞書dict2をdict辞書に加える
dict |= dict2	ハッシュ表dictに辞書dict2を追加する
dict |= dict2	dict2をdict辞書に加える
dict |= dict2	辞書dict2をdictに加える
dict |= dict2	辞書dict2をdictに追加する
bytearray(x)	xのバイト配列
bytes(x)	xのバイト列
input()	入力された文字列
input(s)	sに対し、入力された文字列
input(s)	プロンプトsに対し、入力された文字列
memoryview(x)	xのメモリビュー
open(filename)	ファイル名filenameを開く
open(filename)	ファイル名filenameをオープンする
open(filename)	ファイル名filenameを読み込む
open(filename)	filenameを読む
open(filename)	filenameを読み込む
with open(filename) as f:	filenameをオープンし、fとする
with open(filename) as f:	ファイル名filenameをオープンし、fとする
open(filename, 'r')	読み込み用にでfilenameファイル名をオープンする
open(filename, 'r')	ファイル名filenameを読み込みモードでで開く
open(filename, 'r')	読み込みモードででfilenameファイル名を開く
open(filename, 'r')	ファイル名filenameを読み込み用にでオープンする
open(filename, 'r')	読み込みモードででファイル名filenameを開く
open(filename, 'r')	読み込みモードででfilenameファイル名をオープンする
open(filename, 'r')	読み込み用にでfilenameファイル名を開く
open(filename, 'r')	filenameを読み込み用にで開く
open(filename, 'r')	読み込みモードででfilenameを開く
open(filename, 'r')	ファイル名filenameを読み込み用にで開く
open(filename, 'r')	ファイル名filenameを読み込みモードででオープンする
open(filename, 'r')	ファイル名filenameを'r'モードででオープンする
open(filename, 'r')	'r'モードでfilenameファイル名をでオープンする
open(filename, 'r')	'r'モードでfilenameをでオープンする
open(filename, 'r')	'r'モードでファイル名filenameをでオープンする
open(filename, 'w')	保存用にファイル名filenameを開く
open(filename, 'w')	ファイル名filenameを書き込みモードで開く
open(filename, 'w')	保存用にfilenameをオープンする
open(filename, 'w')	保存用にfilenameファイル名を開く
open(filename, 'w')	ファイル名filenameを書き込み用に開く
open(filename, 'w')	ファイル名filenameを保存用に開く
open(filename, 'w')	書き込みモードでfilenameをオープンする
open(filename, 'w')	filenameを書き込み用にオープンする
open(filename, 'w')	filenameを書き込み用に開く
open(filename, 'w')	filenameを保存用に開く
open(filename, 'w')	書き込みモードでfilenameを開く
open(filename, 'w')	ファイル名filenameを書き込みモードでオープンする
open(filename, 'w')	filenameを書き込みモードでオープンする
open(filename, 'w')	保存用にfilenameを開く
open(filename, 'a')	filenameを追加用に開く
open(filename, 'a')	filenameを追加用にオープンする
open(filename, 'a')	ファイル名filenameを追加用にオープンする
open(filename, 'a')	ファイル名filenameを追加モードで開く
open(filename, 'a')	追加モードでfilenameをオープンする
open(filename, 'a')	ファイル名filenameを追加用に開く
open(filename, 'a')	追加用にファイル名filenameを開く
open(filename, 'a')	追加モードでファイル名filenameを開く
open(filename, 'a')	追加用にfilenameファイル名を開く
open(filename, 'a')	ファイル名filenameを追加モードでオープンする
open(filename, 'b')	filenameをバイナリモードで開く
open(filename, 'b')	ファイル名filenameをバイナリモードで開く
open(filename, 'b')	ファイル名filenameをバイナリ用に開く
open(filename, 'b')	バイナリモードでfilenameを開く
open(filename, 'b')	バイナリ用にファイル名filenameをオープンする
open(filename, 'b')	filenameをバイナリモードでオープンする
open(filename, 'b')	バイナリ用にfilenameを開く
open(filename, 'b')	バイナリ用にfilenameをオープンする
open(filename, 'b')	バイナリ用にfilenameファイル名を開く
open(filename, 'b')	バイナリモードでfilenameをオープンする
print()	空行を出力する
print()	空行を表示する
print(x)	xを出力する
print(x)	xを表示する
print(x, y)	xと順にyを表示する
print(x, y)	xと順にyを出力する
print(x, y)	xとyを順に出力する
print(x, y)	xとyを表示する
print(x, y)	xとyをプリントする
print(x, y)	xと順にyをプリントする
print(x, y, z)	x、y、zをプリントする
print(x, y, z)	x、y、順にzを出力する
print(x, y, z)	x、y、zを出力する
print(x, y, z)	x、y、zを順にプリントする
print(x, y, z)	x、y、zを表示する
print(x, y, z)	x、y、zを順に出力する
print(x, y, z)	x、y、zを順に表示する
print(x, y, z)	x、y、順にzを表示する
print(x, end='')	xを
print(x, y, end='')	xとyを改行なく表示する
print(x, y, end='')	xとyを改行せず出力する
print(x, y, end='')	xとyを改行せず表示する
print(x, y, end='')	xとyを改行なく出力する
print(x, y, z, end='')	x、y、zを表示する
print(x, y, z, end='')	x、y、zをプリントする
print(x, y, z, end='')	x、y、zを出力する
print(x, y, z, end='')	x、y、zを改行なく出力する
print(x, y, z, end='')	x、y、zを改行せず][順に出力する
print(x, y, z, end='')	x、y、zを改行せず][順に表示する
print(x, y, z, end='')	x、y、zを改行なく表示する
callable(x)	xが関数か否か
if callable(x):	xが関数のとき
eval(s)	式sを評価した結果
globals()	グローバル変数の一覧
filter(function, x)	functionでxの各要素をフィルタする
filter(function, x)	functionで列xのそれぞれをフィルタする
filter(function, x)	列xの各要素をfunction関数でフィルタする
filter(function, x)	関数functionでxの各要素をフィルタする
filter(function, x)	列xのそれぞれをfunctionでフィルタする
filter(function, x)	xをfunctionでフィルタする
filter(function, x)	関数functionでxのそれぞれをフィルタする
filter(function, x)	列xの各要素を関数functionでフィルタする
filter(function, x)	列xのそれぞれをfunction関数でフィルタする
filter(function, x)	xのそれぞれをfunction関数でフィルタする
filter(function, x)	xを関数functionでフィルタする
filter(function, x)	functionでxのそれぞれをフィルタする
map(function, x)	関数functionでx列のそれぞれをマップする
map(function, x)	xのそれぞれをfunctionでマップする
map(function, x)	functionで列xの各要素をマップする
map(function, x)	関数functionで列xのそれぞれをマップする
map(function, x)	列xをfunction関数でマップする
map(function, x)	xの各要素を関数functionでマップする
map(function, x)	列xをfunctionでマップする
map(function, x)	xをfunctionでマップする
map(function, x)	関数functionでxの各要素をマップする
map(function, x)	関数functionでx列をマップする
delattr(x, attrname)	xのプロパティattrnameを削除する
delattr(x, attrname)	オブジェクトxのプロパティattrnameを削除する
delattr(x, attrname)	xのattrnameプロパティを削除する
delattr(x, attrname)	オブジェクトxのattrname属性を削除する
delattr(x, attrname)	オブジェクトxのattrnameフィールドを削除する
getattr(x, attrname)	xのプロパティattrnameの値
getattr(x, attrname)	xのattrnameプロパティの値
getattr(x, attrname)	xのattrnameフィールドの値
getattr(x, attrname)	オブジェクトxのattrnameプロパティの値
hasattr(x, attrname)	xがプロパティattrnameを持つか否か
if hasattr(x, attrname):	xがプロパティattrnameを持つならば
hasattr(x, attrname)	オブジェクトxがプロパティattrnameを持つか否か
if hasattr(x, attrname):	オブジェクトxがプロパティattrnameを持つのとき
hasattr(x, attrname)	オブジェクトxがフィールドattrnameを持つか否か
if hasattr(x, attrname):	もしオブジェクトxがフィールドattrnameを持つならば
hasattr(x, attrname)	オブジェクトxが属性attrnameを持つか
if hasattr(x, attrname):	オブジェクトxが属性attrnameを持つのとき
not hasattr(x, attrname)	xがプロパティattrnameを持たないか
not hasattr(x, attrname)	オブジェクトxがプロパティattrnameを持たないか
not hasattr(x, attrname)	オブジェクトxがフィールドattrnameを持たないか
not hasattr(x, attrname)	オブジェクトxが属性attrnameを持たないか
if hasattr(x, attrname) :	もしxがプロパティattrnameを持てば
if hasattr(x, attrname) :	オブジェクトxがプロパティattrnameを持てば
if hasattr(x, attrname) :	オブジェクトxがプロパティattrnameを持ったなら
if hasattr(x, attrname) :	もしオブジェクトxがフィールドattrnameを持てば
if hasattr(x, attrname) :	オブジェクトxがフィールドattrnameを持ったら
if hasattr(x, attrname) :	もしオブジェクトxが属性attrnameを持てば
if hasattr(x, attrname) :	オブジェクトxが属性attrnameを持った場合
if not hasattr(x, attrname) :	xがプロパティattrnameを持たないとき
if not hasattr(x, attrname) :	もしxがプロパティattrnameを持たなければ
if not hasattr(x, attrname) :	オブジェクトxがプロパティattrnameを持たなければ
if not hasattr(x, attrname) :	もしオブジェクトxがフィールドattrnameを持たない場合
if not hasattr(x, attrname) :	もしオブジェクトxがフィールドattrnameを持たなければ
if not hasattr(x, attrname) :	オブジェクトxがフィールドattrnameを持たなかったとき
if not hasattr(x, attrname) :	もしオブジェクトxが属性attrnameを持たなければ
if not hasattr(x, attrname) :	もしオブジェクトxが属性attrnameを持たなかったなら
while hasattr(x, attrname) :	オブジェクトxがプロパティattrnameを持つ間
while hasattr(x, attrname) :	オブジェクトxがフィールドattrnameを持つ間
while not hasattr(x, attrname) :	オブジェクトxがプロパティattrnameを持たない間
while not hasattr(x, attrname) :	オブジェクトxがフィールドattrnameを持たない間
hasattr(x, attrname)	オブジェクトxがattrname属性を持つか
if hasattr(x, attrname):	オブジェクトxがattrname属性を持つの場合
hasattr(x, attrname)	xがattrname属性を持つか否か
if hasattr(x, attrname):	もしxがattrname属性を持つならば
hasattr(x, attrname)	オブジェクトxがattrnameプロパティを持つか否か
if hasattr(x, attrname):	オブジェクトxがattrnameプロパティを持つならば
hasattr(x, attrname)	xがattrnameフィールドを持つか
if hasattr(x, attrname):	xがattrnameフィールドを持つの場合
hasattr(x, attrname)	xがattrnameプロパティを持つかどうか
if hasattr(x, attrname):	xがattrnameプロパティを持つのとき
not hasattr(x, attrname)	オブジェクトxがattrname属性を持たないかどうか
not hasattr(x, attrname)	xがattrname属性を持たないか
not hasattr(x, attrname)	オブジェクトxがattrnameプロパティを持たないかどうか
not hasattr(x, attrname)	xがattrnameフィールドを持たないか
not hasattr(x, attrname)	xがattrnameプロパティを持たないかどうか
if hasattr(x, attrname) :	オブジェクトxがattrname属性を持てば
if hasattr(x, attrname) :	オブジェクトxがattrname属性を持ったら
if hasattr(x, attrname) :	もしxがattrname属性を持てば
if hasattr(x, attrname) :	もしオブジェクトxがattrnameプロパティを持てば
if hasattr(x, attrname) :	もしxがattrnameフィールドを持つ場合
if hasattr(x, attrname) :	もしxがattrnameフィールドを持てば
if hasattr(x, attrname) :	xがattrnameフィールドを持ったとき
if hasattr(x, attrname) :	xがattrnameプロパティを持てば
if not hasattr(x, attrname) :	オブジェクトxがattrname属性を持たないならば
if not hasattr(x, attrname) :	もしオブジェクトxがattrname属性を持たなかったとき
if not hasattr(x, attrname) :	xがattrname属性を持たない場合
if not hasattr(x, attrname) :	もしxがattrname属性を持たなければ
if not hasattr(x, attrname) :	xがattrname属性を持たなかったら
if not hasattr(x, attrname) :	もしオブジェクトxがattrnameプロパティを持たないならば
if not hasattr(x, attrname) :	もしオブジェクトxがattrnameプロパティを持たなければ
if not hasattr(x, attrname) :	オブジェクトxがattrnameプロパティを持たなかったならば
if not hasattr(x, attrname) :	もしxがattrnameフィールドを持たないとき
if not hasattr(x, attrname) :	xがattrnameフィールドを持たなければ
if not hasattr(x, attrname) :	xがattrnameフィールドを持たなかったとき
if not hasattr(x, attrname) :	もしxがattrnameプロパティを持たなければ
if not hasattr(x, attrname) :	xがattrnameプロパティを持たなかったなら
while hasattr(x, attrname) :	オブジェクトxがattrname属性を持つ間
while hasattr(x, attrname) :	xがattrnameプロパティを持つ間
while not hasattr(x, attrname) :	オブジェクトxがattrname属性を持たない間
while not hasattr(x, attrname) :	xがattrname属性を持たない間
while not hasattr(x, attrname) :	xがattrnameフィールドを持たない間
while not hasattr(x, attrname) :	xがattrnameプロパティを持たない間
hasattr(x, attrname)	オブジェクトxにフィールドattrnameがあるか否か
if hasattr(x, attrname):	オブジェクトxにフィールドattrnameがあるならば
hasattr(x, attrname)	xにプロパティattrnameがあるか
if hasattr(x, attrname):	xにプロパティattrnameがあるならば
hasattr(x, attrname)	オブジェクトxにプロパティattrnameがあるか
if hasattr(x, attrname):	オブジェクトxにプロパティattrnameがあるならば
hasattr(x, attrname)	xに属性attrnameがあるかどうか
if hasattr(x, attrname):	もしxに属性attrnameがあるならば
not hasattr(x, attrname)	オブジェクトxにフィールドattrnameがあらないかどうか
not hasattr(x, attrname)	xにプロパティattrnameがあらないか否か
not hasattr(x, attrname)	オブジェクトxにプロパティattrnameがあらないか否か
not hasattr(x, attrname)	xに属性attrnameがあらないか否か
if hasattr(x, attrname) :	オブジェクトxにフィールドattrnameがあれば
if hasattr(x, attrname) :	もしxにプロパティattrnameがあれば
if hasattr(x, attrname) :	もしxにプロパティattrnameがあったならば
if hasattr(x, attrname) :	オブジェクトxにプロパティattrnameがあれば
if hasattr(x, attrname) :	もしオブジェクトxにプロパティattrnameがあったら
if hasattr(x, attrname) :	xに属性attrnameがあるとき
if hasattr(x, attrname) :	もしxに属性attrnameがあれば
if hasattr(x, attrname) :	もしxに属性attrnameがあったなら
if not hasattr(x, attrname) :	もしオブジェクトxにフィールドattrnameがあらないならば
if not hasattr(x, attrname) :	xにプロパティattrnameがあれば
if not hasattr(x, attrname) :	xにプロパティattrnameがあったなら
if not hasattr(x, attrname) :	もしオブジェクトxにプロパティattrnameがあらな場合
if not hasattr(x, attrname) :	xに属性attrnameがあれば
if not hasattr(x, attrname) :	xに属性attrnameがあったら
while hasattr(x, attrname) :	オブジェクトxにフィールドattrnameがある間
while hasattr(x, attrname) :	xにプロパティattrnameがある間
while hasattr(x, attrname) :	オブジェクトxにプロパティattrnameがある間
while not hasattr(x, attrname) :	xにプロパティattrnameがあらな間
while not hasattr(x, attrname) :	xに属性attrnameがあらな間
hasattr(x, attrname)	xにattrnameプロパティがあるかどうか
if hasattr(x, attrname):	xにattrnameプロパティがある場合
hasattr(x, attrname)	xにattrnameフィールドがあるかどうか
if hasattr(x, attrname):	もしxにattrnameフィールドがあるならば
hasattr(x, attrname)	オブジェクトxにattrnameプロパティがあるかどうか
if hasattr(x, attrname):	オブジェクトxにattrnameプロパティがある場合
not hasattr(x, attrname)	xにattrnameプロパティがあらないか
not hasattr(x, attrname)	xにattrnameフィールドがあらないかどうか
not hasattr(x, attrname)	オブジェクトxにattrnameプロパティがあらないか
if hasattr(x, attrname) :	xにattrnameプロパティがある場合
if hasattr(x, attrname) :	もしxにattrnameプロパティがあった場合
if hasattr(x, attrname) :	もしxにattrnameフィールドがあるとき
if hasattr(x, attrname) :	xにattrnameフィールドがあれば
if hasattr(x, attrname) :	もしxにattrnameフィールドがあったとき
if hasattr(x, attrname) :	もしオブジェクトxにattrnameプロパティがあるとき
if hasattr(x, attrname) :	オブジェクトxにattrnameプロパティがあれば
if not hasattr(x, attrname) :	xにattrnameプロパティがあらなければ
if not hasattr(x, attrname) :	もしxにattrnameプロパティがあらなかったなら
if not hasattr(x, attrname) :	xにattrnameフィールドがあらなければ
if not hasattr(x, attrname) :	もしオブジェクトxにattrnameプロパティがあらないならば
if not hasattr(x, attrname) :	もしオブジェクトxにattrnameプロパティがあらなければ
if not hasattr(x, attrname) :	オブジェクトxにattrnameプロパティがあらなかった場合
while hasattr(x, attrname) :	xにattrnameプロパティがある間
while not hasattr(x, attrname) :	xにattrnameプロパティがあらない間
while not hasattr(x, attrname) :	オブジェクトxにattrnameプロパティがあらない間
setattr(x, attrname, y)	xのフィールドattrnameの値をyにする
setattr(x, attrname, y)	オブジェクトxのプロパティattrnameの値をyに設定する+
setattr(x, attrname, y)	xのプロパティattrnameの値をyに設定する+
setattr(x, attrname, y)	xのプロパティattrnameの値をyにする
setattr(x, attrname, y)	xの属性attrnameの値をyに設定する+
setattr(x, attrname, y)	オブジェクトxのプロパティattrnameの値をyにする
setattr(x, attrname, y)	xのフィールドattrnameの値をyに設定する+
setattr(x, attrname, y)	オブジェクトxの属性attrnameの値をyに設定する+
setattr(x, attrname, y)	オブジェクトxのフィールドattrnameの値をyにする
setattr(x, attrname, y)	オブジェクトxのattrnameプロパティの値をyにする
setattr(x, attrname, y)	xのattrnameプロパティの値をyに設定する+
setattr(x, attrname, y)	オブジェクトxのattrname属性の値をyに設定する+
setattr(x, attrname, y)	xのattrname属性の値をyにする
setattr(x, attrname, y)	オブジェクトxのattrnameプロパティの値をyに設定する+
hash(x)	xのハッシュ値
isinstance(x, class1)	xがclass1のインスタンスか否か
if isinstance(x, class1):	xがclass1のインスタンスの場合
isinstance(x, class1)	オブジェクトxがclass1か
if isinstance(x, class1):	オブジェクトxがclass1のとき
isinstance(x, class1)	オブジェクトxがclass1のインスタンスか
if isinstance(x, class1):	もしオブジェクトxがclass1のインスタンスならば
isinstance(x, class1)	xがclass1か
if isinstance(x, class1):	xがclass1ならば
not isinstance(x, class1)	xがclass1のインスタンスでないか否か
not isinstance(x, class1)	オブジェクトxがclass1でないかどうか
not isinstance(x, class1)	オブジェクトxがclass1のインスタンスでないか
not isinstance(x, class1)	xがclass1でないか
if isinstance(x, class1) :	xがclass1のインスタンス場合
if isinstance(x, class1) :	オブジェクトxがclass1とき
if isinstance(x, class1) :	もしオブジェクトxがclass1のインスタンス場合
if isinstance(x, class1) :	xがclass1場合
if not isinstance(x, class1) :	もしxがclass1のインスタンスでなならば
if not isinstance(x, class1) :	オブジェクトxがclass1でないとき
if not isinstance(x, class1) :	もしオブジェクトxがclass1のインスタンスでないならば
if not isinstance(x, class1) :	xがclass1でないとき
isinstance(x, (class1, class2))	オブジェクトxがclass1またclass2か
if isinstance(x, (class1, class2)):	オブジェクトxがclass1またclass2ならば
isinstance(x, (class1, class2))	オブジェクトxがclass1あるいはclass2か
if isinstance(x, (class1, class2)):	オブジェクトxがclass1あるいはclass2の場合
isinstance(x, (class1, class2))	オブジェクトxがclass1またはclass2のインスタンスかどうか
if isinstance(x, (class1, class2)):	オブジェクトxがclass1またはclass2のインスタンスのとき
isinstance(x, (class1, class2))	オブジェクトxがclass1またはclass2か否か
if isinstance(x, (class1, class2)):	オブジェクトxがclass1またはclass2の場合
isinstance(x, (class1, class2))	xがclass1またはclass2か
if isinstance(x, (class1, class2)):	xがclass1またはclass2の場合
isinstance(x, (class1, class2))	オブジェクトxがclass1またclass2のインスタンスか否か
if isinstance(x, (class1, class2)):	もしオブジェクトxがclass1またclass2のインスタンスならば
isinstance(x, (class1, class2))	xがclass1またはclass2のインスタンスか
if isinstance(x, (class1, class2)):	xがclass1またはclass2のインスタンスのとき
not isinstance(x, (class1, class2))	オブジェクトxがclass1またclass2でないか否か
not isinstance(x, (class1, class2))	オブジェクトxがclass1あるいはclass2でないか
not isinstance(x, (class1, class2))	オブジェクトxがclass1またはclass2のインスタンスでないか
not isinstance(x, (class1, class2))	オブジェクトxがclass1またはclass2でないかどうか
not isinstance(x, (class1, class2))	xがclass1またはclass2でないか
not isinstance(x, (class1, class2))	オブジェクトxがclass1またclass2のインスタンスでないかどうか
not isinstance(x, (class1, class2))	xがclass1またはclass2のインスタンスでないかどうか
if isinstance(x, (class1, class2)) :	オブジェクトxがclass1またclass2場合
if isinstance(x, (class1, class2)) :	もしオブジェクトxがclass1あるいはclass2ならば
if isinstance(x, (class1, class2)) :	オブジェクトxがclass1またはclass2のインスタンスならば
if isinstance(x, (class1, class2)) :	もしオブジェクトxがclass1またはclass2場合
if isinstance(x, (class1, class2)) :	もしxがclass1またはclass2とき
if isinstance(x, (class1, class2)) :	もしオブジェクトxがclass1またclass2のインスタンスならば
if isinstance(x, (class1, class2)) :	もしxがclass1またはclass2のインスタンス場合
if not isinstance(x, (class1, class2)) :	オブジェクトxがclass1またclass2でなならば
if not isinstance(x, (class1, class2)) :	もしオブジェクトxがclass1あるいはclass2でないとき
if not isinstance(x, (class1, class2)) :	オブジェクトxがclass1またはclass2のインスタンスでない場合
if not isinstance(x, (class1, class2)) :	オブジェクトxがclass1またはclass2でないならば
if not isinstance(x, (class1, class2)) :	xがclass1またはclass2でない場合
if not isinstance(x, (class1, class2)) :	もしオブジェクトxがclass1またclass2のインスタンスでない場合
if not isinstance(x, (class1, class2)) :	xがclass1またはclass2のインスタンスでない場合
isinstance(x, int)	xが整数値か否か
if isinstance(x, int):	xが整数値の場合
isinstance(x, int)	オブジェクトxが自然数か否か
if isinstance(x, int):	もしオブジェクトxが自然数ならば
isinstance(x, int)	xが整数か否か
if isinstance(x, int):	xが整数の場合
isinstance(x, int)	xが自然数か
if isinstance(x, int):	xが自然数ならば
not isinstance(x, int)	xが整数値でないか
not isinstance(x, int)	オブジェクトxが自然数でないか否か
not isinstance(x, int)	xが整数でないかどうか
not isinstance(x, int)	xが自然数でないか
if isinstance(x, int) :	もしxが整数値ならば
if isinstance(x, int) :	オブジェクトxが自然数ならば
if isinstance(x, int) :	もしxが整数ならば
if isinstance(x, int) :	xが自然数とき
if not isinstance(x, int) :	もしxが整数値でない場合
if not isinstance(x, int) :	オブジェクトxが自然数でなとき
if not isinstance(x, int) :	xが整数でないならば
if not isinstance(x, int) :	xが自然数でないならば
isinstance(x, float)	xが小数点数か否か
if isinstance(x, float):	xが小数点数ならば
isinstance(x, float)	オブジェクトxが小数点数か
if isinstance(x, float):	オブジェクトxが小数点数のとき
isinstance(x, float)	xが浮動小数点数か否か
if isinstance(x, float):	xが浮動小数点数ならば
isinstance(x, float)	オブジェクトxが数かどうか
if isinstance(x, float):	もしオブジェクトxが数ならば
isinstance(x, float)	オブジェクトxが浮動小数点数か
if isinstance(x, float):	オブジェクトxが浮動小数点数のとき
isinstance(x, float)	xが実数か
if isinstance(x, float):	もしxが実数ならば
not isinstance(x, float)	xが小数点数でないか
not isinstance(x, float)	オブジェクトxが小数点数でないかどうか
not isinstance(x, float)	xが浮動小数点数でないかどうか
not isinstance(x, float)	オブジェクトxが数でないか
not isinstance(x, float)	オブジェクトxが浮動小数点数でないかどうか
not isinstance(x, float)	xが実数でないか
if isinstance(x, float) :	もしxが小数点数とき
if isinstance(x, float) :	オブジェクトxが小数点数とき
if isinstance(x, float) :	もしxが浮動小数点数場合
if isinstance(x, float) :	オブジェクトxが数とき
if isinstance(x, float) :	オブジェクトxが浮動小数点数とき
if isinstance(x, float) :	もしxが実数とき
if not isinstance(x, float) :	xが小数点数でない場合
if not isinstance(x, float) :	オブジェクトxが小数点数でないとき
if not isinstance(x, float) :	もしxが浮動小数点数でないとき
if not isinstance(x, float) :	もしオブジェクトxが数でない場合
if not isinstance(x, float) :	もしオブジェクトxが浮動小数点数でない場合
if not isinstance(x, float) :	もしxが実数でないならば
isinstance(x, str)	オブジェクトxが文字列か否か
if isinstance(x, str):	もしオブジェクトxが文字列ならば
isinstance(x, str)	xが文字列か
if isinstance(x, str):	xが文字列のとき
not isinstance(x, str)	オブジェクトxが文字列でないかどうか
not isinstance(x, str)	xが文字列でないかどうか
if isinstance(x, str) :	もしオブジェクトxが文字列ならば
if isinstance(x, str) :	xが文字列ならば
if not isinstance(x, str) :	オブジェクトxが文字列でないとき
if not isinstance(x, str) :	xが文字列でないならば
isinstance(x, list)	オブジェクトxがリストか
if isinstance(x, list):	オブジェクトxがリストの場合
isinstance(x, list)	xがリストか否か
if isinstance(x, list):	xがリストのとき
not isinstance(x, list)	オブジェクトxがリストでないか
not isinstance(x, list)	xがリストでないか
if isinstance(x, list) :	もしオブジェクトxがリスト場合
if isinstance(x, list) :	もしxがリストならば
if not isinstance(x, list) :	もしオブジェクトxがリストでないとき
if not isinstance(x, list) :	もしxがリストでないとき
isinstance(x, (list, tuple))	オブジェクトxがリストまたはタプルか
if isinstance(x, (list, tuple)):	もしオブジェクトxがリストまたはタプルならば
isinstance(x, (list, tuple))	xがリストまたタプルか
if isinstance(x, (list, tuple)):	xがリストまたタプルの場合
isinstance(x, (list, tuple))	オブジェクトxがリストまた組か否か
if isinstance(x, (list, tuple)):	オブジェクトxがリストまた組の場合
isinstance(x, (list, tuple))	オブジェクトxがリストまたは組かどうか
if isinstance(x, (list, tuple)):	オブジェクトxがリストまたは組の場合
isinstance(x, (list, tuple))	xがリストあるいはタプルか
if isinstance(x, (list, tuple)):	xがリストあるいはタプルの場合
isinstance(x, (list, tuple))	オブジェクトxがリストあるいは組かどうか
if isinstance(x, (list, tuple)):	もしオブジェクトxがリストあるいは組ならば
isinstance(x, (list, tuple))	xがリストまたはタプルか
if isinstance(x, (list, tuple)):	もしxがリストまたはタプルならば
isinstance(x, (list, tuple))	xがリストあるいは組かどうか
if isinstance(x, (list, tuple)):	xがリストあるいは組のとき
not isinstance(x, (list, tuple))	オブジェクトxがリストまたはタプルでないかどうか
not isinstance(x, (list, tuple))	xがリストまたタプルでないか
not isinstance(x, (list, tuple))	オブジェクトxがリストまた組でないか
not isinstance(x, (list, tuple))	オブジェクトxがリストまたは組でないか
not isinstance(x, (list, tuple))	xがリストあるいはタプルでないか否か
not isinstance(x, (list, tuple))	オブジェクトxがリストあるいは組でないかどうか
not isinstance(x, (list, tuple))	xがリストまたはタプルでないか否か
not isinstance(x, (list, tuple))	xがリストあるいは組でないかどうか
if isinstance(x, (list, tuple)) :	オブジェクトxがリストまたはタプルとき
if isinstance(x, (list, tuple)) :	xがリストまたタプルならば
if isinstance(x, (list, tuple)) :	オブジェクトxがリストまた組とき
if isinstance(x, (list, tuple)) :	もしオブジェクトxがリストまたは組とき
if isinstance(x, (list, tuple)) :	もしxがリストあるいはタプルとき
if isinstance(x, (list, tuple)) :	もしオブジェクトxがリストあるいは組場合
if isinstance(x, (list, tuple)) :	もしxがリストまたはタプル場合
if isinstance(x, (list, tuple)) :	もしxがリストあるいは組場合
if not isinstance(x, (list, tuple)) :	もしオブジェクトxがリストまたはタプルでないならば
if not isinstance(x, (list, tuple)) :	xがリストまたタプルでない場合
if not isinstance(x, (list, tuple)) :	もしオブジェクトxがリストまた組でないならば
if not isinstance(x, (list, tuple)) :	オブジェクトxがリストまたは組でないならば
if not isinstance(x, (list, tuple)) :	もしxがリストあるいはタプルでなとき
if not isinstance(x, (list, tuple)) :	オブジェクトxがリストあるいは組でないとき
if not isinstance(x, (list, tuple)) :	もしxがリストまたはタプルでな場合
if not isinstance(x, (list, tuple)) :	xがリストあるいは組でない場合
issubclass(class1, class2)	クラスclassがclass2のサブクラスか
if issubclass(class1, class2):	クラスclassがclass2のサブクラスのとき
issubclass(class1, class2)	classがclass2のサブクラスかどうか
if issubclass(class1, class2):	classがclass2のサブクラスのとき
not issubclass(class1, class2)	クラスclassがclass2のサブクラスでないか
not issubclass(class1, class2)	classがclass2のサブクラスでないか
if issubclass(class1, class2) :	もしクラスclassがclass2のサブクラスとき
if issubclass(class1, class2) :	classがclass2のサブクラス場合
if not issubclass(class1, class2) :	クラスclassがclass2のサブクラスでないとき
if not issubclass(class1, class2) :	classがclass2のサブクラスでないとき
id(x)	xのオブジェクト識別子
id(x)	xのオブジェクトID
id(x)	xのユニークな識別値
id(x)	xのポインタ
type(x)	xの型
type(x)	xのクラス
type(x)	xの種類
n.bit_length()	整数nのビット長
n.bit_length()	整数値nのビット長
n.bit_length()	nのビット数
n.bit_length()	整数nのビット数
n.bit_length()	nのビット長
n.bit_length()	整数値nのビット数
n.to_bytes(x)	整数nをxビット長のバイト列に変換する
n.to_bytes(x)	整数値nをxビット長のバイト列にする
n.to_bytes(x)	nをxビット長のバイト列に変換する
n.to_bytes(x)	整数nをxビット長のバイト列にする
n.to_bytes(x)	自然数nをxビット長のバイト列にする
n.to_bytes(x)	nのxビット長バイト列
n.to_bytes(x)	整数値nのxビット長バイト列
n.to_bytes(x)	整数nのxビット長バイト列
n.to_bytes(x)	自然数nのxビット長バイト列
int.from_bytes(bytes)	バイト列bytesbytesから自然数に変換する
int.from_bytes(bytes)	bytesbytesから整数に変換する
int.from_bytes(bytes)	bytesbytesから整数値に変換する
int.from_bytes(bytes)	bytesbytesから自然数に変換する
int.from_bytes(bytes)	バイト列bytesbytesから整数に変換する
x.is_integer()	小数点数xが整数か
if x.is_integer():	もし小数点数xが整数ならば
x.is_integer()	xが整数か
if x.is_integer():	xが整数のとき
x.is_integer()	xが整数値か
if x.is_integer():	xが整数値のとき
x.is_integer()	小数点数xが整数値かどうか
if x.is_integer():	もし小数点数xが整数値ならば
x.is_integer()	数xが自然数か否か
if x.is_integer():	数xが自然数ならば
x.is_integer()	実数xが整数か
if x.is_integer():	もし実数xが整数ならば
not x.is_integer()	小数点数xが整数でないかどうか
not x.is_integer()	xが整数でないかどうか
not x.is_integer()	xが整数値でないか
not x.is_integer()	小数点数xが整数値でないか
not x.is_integer()	数xが自然数でないか
not x.is_integer()	実数xが整数でないか
if x.is_integer() :	もし小数点数xが整数場合
if x.is_integer() :	もしxが整数場合
if x.is_integer() :	もしxが整数値とき
if x.is_integer() :	もし小数点数xが整数値ならば
if x.is_integer() :	もし数xが自然数場合
if x.is_integer() :	もし実数xが整数とき
if not x.is_integer() :	小数点数xが整数でない場合
if not x.is_integer() :	もしxが整数でないとき
if not x.is_integer() :	xが整数値でない場合
if not x.is_integer() :	小数点数xが整数値でない場合
if not x.is_integer() :	数xが自然数でない場合
if not x.is_integer() :	実数xが整数でないならば
x.hex()	小数点数xを16進文字列にする
x.hex()	16進文字列に小数点数xをする
x.hex()	小数点数xを16進文字列に変換する
x.hex()	16進文字列にx数をする
x.hex()	16進文字列にxをする
x.hex()	xを16進文字列に変換する
x.hex()	16進文字列にxを変換する
x.hex()	xを16進文字列にする
x.hex()	実数xを16進文字列にする
x.hex()	16進文字列に実数xを変換する
x.hex()	浮動小数点数xを16進文字列に変換する
x.hex()	16進文字列にx実数をする
x.hex()	小数点数xの16進文字列表現
x.hex()	浮動小数点数xの16進文字列表現
x.hex()	xの16進文字列表現
float.fromhex(s)	16進数文字列sから浮動小数点数に変換する
float.fromhex(s)	16進数文字列sから小数点数にする
float.fromhex(s)	sから数にする
float.fromhex(s)	16進数文字列sから実数に変換する
float.fromhex(s)	sから実数に変換する
float.fromhex(s)	sから数に変換する
float.fromhex(s)	16進数文字列sから数にする
float.fromhex(s)	sから浮動小数点数にする
float.fromhex(s)	sから小数点数に変換する
float.fromhex(s)	sから実数にする
float.fromhex(s)	sから浮動小数点数に変換する
float.fromhex(s)	16進数文字列sから数に変換する
string.ascii_letters	全アルファベット
string.ascii_lowercase	全英小文字
string.ascii_uppercase	全英大文字
string.digits	全数字
string.hexdigits	全16進文字列
string.octdigits	全8進文字列
string.punctuation	全記号
string.printable	全印刷可能なASCII文字
string.whitespace	全空白文字
s.capitalize()	sをキャピタライズする
s.capitalize()	文字列sをキャピタライズする
s.casefold()	文字列sをケースフォルドする
s.casefold()	sをケースフォルドする
s.center(x)	幅xで文字列sをセンタリングする
s.center(x)	sを幅xでセンタリングする
s.center(x)	文字列sを幅xで中央寄せする
s.center(x)	sを幅xで中央寄せする
s.center(x)	幅xで文字列sを中央寄せする
s.ljust(x)	sを幅xで右寄せする
s.ljust(x)	幅xで文字列sを右寄せする
s.ljust(x)	幅xでs文字列を右寄せする
s.ljust(x)	幅xでsを右寄せする
s.ljust(x)	文字列sを幅xで右寄せする
s.rjust(x)	幅xでsを左寄せする
s.rjust(x)	幅xで文字列sを左寄せする
s.rjust(x)	sを幅xで左寄せする
s.rjust(x)	文字列sを幅xで左寄せする
s.rjust(x)	幅xでs文字列を左寄せする
s.count(sub)	s内のsubの数をカウントする
s.count(sub)	sに現れるsubの数をカウントする
s.count(sub)	s内に現れるsubの数をカウントする
s.count(sub)	文字列s中のsubを数える
s.count(sub)	文字列sに含まれるsubの数をカウントする
s.count(sub)	文字列s内のsubの数をカウントする
s.count(sub)	sのsubの数をカウントする
s.count(sub)	s内に含まれるsubの数を数える
s.count(sub)	sに含まれるsubの数を数える
s.count(sub)	sに現れるsubの数を数える
s.count(sub)	文字列s中のsubをカウントする
s.count(sub)	s中に含まれるsubの数を数える
s.count(sub)	s中のsubの数を数える
s.count(sub)	文字列s内に現れるsubの数を数える
s.count(sub)	sのsubを数える
s.count(sub)	文字列s中に現れるsubをカウントする
s.count(sub)	sに含まれるsubを数える
s.count(sub)	s中に含まれるsubを数える
s.count(sub)	文字列s内のsubをカウントする
s.count(sub)	s中のsubの数をカウントする
s.count(sub)	文字列s内に含まれるsubの数をカウントする
s.count(sub)	s内に含まれるsubをカウントする
s.count(sub)	s内のsubの出現回数
s.count(sub)	文字列s中のsubの出現回数
s.count(sub)	文字列s内のsubの出現回数
s.count(sub)	文字列sのsubの出現回数
s.count(sub)	sのsubの出現回数
s.encode()	文字列sをバイト列にする
s.encode()	sをバイト列にする
s.encode()	文字列sをバイト列に変換する
s.encode()	sをバイト列に変換する
s.encode(enc)	sをenc文字コードでバイト列に変換する
s.encode(enc)	文字コードencでs文字列をバイト列に変換する
s.encode(enc)	encでsをバイト列に変換する
s.encode(enc)	文字コードencでsをバイト列に変換する
s.encode(enc)	sを文字コードencでバイト列にする
s.encode(enc)	文字列sをenc文字コードでバイト列にする
s.encode(enc)	sをencでバイト列にする
s.encode(enc)	文字列sを文字コードencでバイト列に変換する
s.encode(enc)	文字列sをencでバイト列にする
s.encode(enc)	encで文字列sをバイト列にする
s.encode(enc)	encでs文字列をバイト列にする
s.encode('shift-jis')	文字列sをSJISコードでバイト列にする
s.encode('shift-jis')	SJISでs文字列をバイト列に変換する
s.encode('shift-jis')	SJISで文字列sをバイト列にする
s.encode('shift-jis')	sをSJISでバイト列にする
s.encode('shift-jis')	文字列sをSJISでバイト列にする
s.encode('shift-jis')	SJISコードでs文字列をバイト列にする
s.encode('shift-jis')	sをSJISコードでバイト列に変換する
s.encode('shift-jis')	SJISコードでsをバイト列に変換する
s.startswith(prefix)	sがprefixで開始するか否か
if s.startswith(prefix):	もしsがprefixで開始するならば
s.startswith(prefix)	文字列sがprefixで開始するか
if s.startswith(prefix):	文字列sがprefixで開始するとき
s.startswith(prefix)	sがprefixで始まるかどうか
if s.startswith(prefix):	sがprefixで始まる場合
s.startswith(prefix)	文字列sがprefixで始まるかどうか
if s.startswith(prefix):	文字列sがprefixで始まるならば
not s.startswith(prefix)	sがprefixで開始しないか
not s.startswith(prefix)	文字列sがprefixで開始しないかどうか
not s.startswith(prefix)	sがprefixで始まらないか
not s.startswith(prefix)	文字列sがprefixで始まらないか
if s.startswith(prefix) :	sがprefixで開始すれば
if s.startswith(prefix) :	もしsがprefixで開始した場合
if s.startswith(prefix) :	文字列sがprefixで開始すれば
if s.startswith(prefix) :	もしsがprefixで始まれば
if s.startswith(prefix) :	文字列sがprefixで始まれば
if s.startswith(prefix) :	文字列sがprefixで始まったならば
if not s.startswith(prefix) :	もしsがprefixで開始しなかったなら
if not s.startswith(prefix) :	もし文字列sがprefixで開始しない場合
if not s.startswith(prefix) :	文字列sがprefixで開始しなければ
if not s.startswith(prefix) :	文字列sがprefixで開始しなかった場合
if not s.startswith(prefix) :	もしsがprefixで始まらないならば
if not s.startswith(prefix) :	もしsがprefixで始まらなければ
if not s.startswith(prefix) :	もしsがprefixで始まらなかったなら
if not s.startswith(prefix) :	文字列sがprefixで始まらなかったら
while s.startswith(prefix) :	文字列sがprefixで開始する間
while s.startswith(prefix) :	sがprefixで始まる間
while s.startswith(prefix) :	文字列sがprefixで始まる間
while not s.startswith(prefix) :	sがprefixで開始しない間
while not s.startswith(prefix) :	文字列sがprefixで始まらない間
s.startswith(prefix)	sの接頭辞がsuffixであるか否か
if s.startswith(prefix):	sの接頭辞がsuffixである場合
s.startswith(prefix)	文字列sの先頭がsuffixか
if s.startswith(prefix):	もし文字列sの先頭がsuffixならば
s.startswith(prefix)	sの接頭辞がsuffixか
if s.startswith(prefix):	sの接頭辞がsuffixならば
s.startswith(prefix)	文字列sの始端がsuffixか
if s.startswith(prefix):	文字列sの始端がsuffixのとき
s.startswith(prefix)	文字列sの始まりがsuffixか
if s.startswith(prefix):	文字列sの始まりがsuffixのとき
s.startswith(prefix)	文字列sの接頭辞がsuffixか否か
if s.startswith(prefix):	文字列sの接頭辞がsuffixのとき
s.startswith(prefix)	sの始まりがsuffixか否か
if s.startswith(prefix):	もしsの始まりがsuffixならば
s.startswith(prefix)	文字列sのプレフィックスがsuffixであるかどうか
if s.startswith(prefix):	文字列sのプレフィックスがsuffixであるとき
s.startswith(prefix)	文字列sの始まりがsuffixであるか
if s.startswith(prefix):	文字列sの始まりがsuffixであるとき
not s.startswith(prefix)	sの接頭辞がsuffixであるでないか
not s.startswith(prefix)	文字列sの先頭がsuffixでないか
not s.startswith(prefix)	sの接頭辞がsuffixでないか
not s.startswith(prefix)	文字列sの始端がsuffixでないか
not s.startswith(prefix)	文字列sの始まりがsuffixでないかどうか
not s.startswith(prefix)	文字列sの接頭辞がsuffixでないか
not s.startswith(prefix)	sの始まりがsuffixでないか否か
not s.startswith(prefix)	文字列sのプレフィックスがsuffixであるでないか
not s.startswith(prefix)	文字列sの始まりがsuffixであるでないか否か
if s.startswith(prefix) :	sの接頭辞がsuffixである場合
if s.startswith(prefix) :	文字列sの先頭がsuffix場合
if s.startswith(prefix) :	sの接頭辞がsuffixならば
if s.startswith(prefix) :	文字列sの始端がsuffix場合
if s.startswith(prefix) :	もし文字列sの始まりがsuffixとき
if s.startswith(prefix) :	文字列sの接頭辞がsuffixならば
if s.startswith(prefix) :	もしsの始まりがsuffix場合
if s.startswith(prefix) :	文字列sのプレフィックスがsuffixであるとき
if s.startswith(prefix) :	文字列sの始まりがsuffixであるならば
if not s.startswith(prefix) :	もしsの接頭辞がsuffixであるでないとき
if not s.startswith(prefix) :	文字列sの先頭がsuffixでない場合
if not s.startswith(prefix) :	もしsの接頭辞がsuffixでないならば
if not s.startswith(prefix) :	もし文字列sの始端がsuffixでないならば
if not s.startswith(prefix) :	文字列sの始まりがsuffixでないならば
if not s.startswith(prefix) :	もし文字列sの接頭辞がsuffixでないならば
if not s.startswith(prefix) :	もしsの始まりがsuffixでなならば
if not s.startswith(prefix) :	文字列sのプレフィックスがsuffixであるでない場合
if not s.startswith(prefix) :	文字列sの始まりがsuffixであるでな場合
while s.startswith(prefix) :	sの接頭辞がsuffixである間
while s.startswith(prefix) :	文字列sの接頭辞がsuffix間
while s.startswith(prefix) :	sの始まりがsuffix間
while s.startswith(prefix) :	文字列sのプレフィックスがsuffixである間
while s.startswith(prefix) :	文字列sの始まりがsuffixである間
while not s.startswith(prefix) :	文字列sの先頭がsuffixでない間
while not s.startswith(prefix) :	文字列sの始端がsuffixでない間
while not s.startswith(prefix) :	文字列sの始まりがsuffixでない間
while not s.startswith(prefix) :	文字列sの接頭辞がsuffixでない間
while not s.startswith(prefix) :	sの始まりがsuffixでな間
while not s.startswith(prefix) :	文字列sの始まりがsuffixであるでな間
s.endswith(suffix)	sがsuffixで終わるかどうか
if s.endswith(suffix):	もしsがsuffixで終わるならば
s.endswith(suffix)	文字列sがsuffixで終了するかどうか
if s.endswith(suffix):	文字列sがsuffixで終了するならば
s.endswith(suffix)	文字列sがsuffixで終わるか否か
if s.endswith(suffix):	文字列sがsuffixで終わるとき
not s.endswith(suffix)	sがsuffixで終わらないか
not s.endswith(suffix)	文字列sがsuffixで終了しないか
not s.endswith(suffix)	文字列sがsuffixで終わらないか
if s.endswith(suffix) :	sがsuffixで終われば
if s.endswith(suffix) :	もしsがsuffixで終わったならば
if s.endswith(suffix) :	もし文字列sがsuffixで終われば
if s.endswith(suffix) :	文字列sがsuffixで終わったとき
if not s.endswith(suffix) :	sがsuffixで終わらないならば
if not s.endswith(suffix) :	もしsがsuffixで終わらなければ
if not s.endswith(suffix) :	sがsuffixで終わらなかったならば
if not s.endswith(suffix) :	もし文字列sがsuffixで終了しないとき
if not s.endswith(suffix) :	もし文字列sがsuffixで終わらないならば
if not s.endswith(suffix) :	文字列sがsuffixで終わらなければ
if not s.endswith(suffix) :	文字列sがsuffixで終わらなかったなら
while s.endswith(suffix) :	sがsuffixで終わる間
while s.endswith(suffix) :	文字列sがsuffixで終了する間
while not s.endswith(suffix) :	sがsuffixで終わらない間
while not s.endswith(suffix) :	文字列sがsuffixで終了しない間
while not s.endswith(suffix) :	文字列sがsuffixで終わらない間
s.endswith(suffix)	sのサフィックスがsuffixであるか
if s.endswith(suffix):	もしsのサフィックスがsuffixであるならば
s.endswith(suffix)	sの接尾辞がsuffixであるか
if s.endswith(suffix):	sの接尾辞がsuffixであるならば
s.endswith(suffix)	文字列sの末尾がsuffixか
if s.endswith(suffix):	文字列sの末尾がsuffixならば
s.endswith(suffix)	文字列sの終端がsuffixであるか
if s.endswith(suffix):	文字列sの終端がsuffixである場合
s.endswith(suffix)	sの末尾がsuffixか否か
if s.endswith(suffix):	sの末尾がsuffixのとき
s.endswith(suffix)	sの終わりがsuffixかどうか
if s.endswith(suffix):	sの終わりがsuffixならば
s.endswith(suffix)	sの終端がsuffixか否か
if s.endswith(suffix):	sの終端がsuffixならば
s.endswith(suffix)	文字列sのサフィックスがsuffixであるか
if s.endswith(suffix):	文字列sのサフィックスがsuffixである場合
s.endswith(suffix)	sの末尾がsuffixであるか
if s.endswith(suffix):	sの末尾がsuffixである場合
s.endswith(suffix)	文字列sの接尾辞がsuffixか
if s.endswith(suffix):	もし文字列sの接尾辞がsuffixならば
s.endswith(suffix)	文字列sの終端がsuffixかどうか
if s.endswith(suffix):	もし文字列sの終端がsuffixならば
s.endswith(suffix)	文字列sの末尾がsuffixであるかどうか
if s.endswith(suffix):	文字列sの末尾がsuffixであるとき
s.endswith(suffix)	sのサフィックスがsuffixか
if s.endswith(suffix):	sのサフィックスがsuffixならば
not s.endswith(suffix)	sのサフィックスがsuffixであるでないか
not s.endswith(suffix)	sの接尾辞がsuffixであるでないか
not s.endswith(suffix)	文字列sの末尾がsuffixでないか
not s.endswith(suffix)	文字列sの終端がsuffixであるでないかどうか
not s.endswith(suffix)	sの末尾がsuffixでないか
not s.endswith(suffix)	sの終わりがsuffixでないか
not s.endswith(suffix)	sの終端がsuffixでないか
not s.endswith(suffix)	文字列sのサフィックスがsuffixであるでないか否か
not s.endswith(suffix)	sの末尾がsuffixであるでないか
not s.endswith(suffix)	文字列sの接尾辞がsuffixでないか否か
not s.endswith(suffix)	文字列sの終端がsuffixでないか
not s.endswith(suffix)	文字列sの末尾がsuffixであるでないかどうか
not s.endswith(suffix)	sのサフィックスがsuffixでないか
if s.endswith(suffix) :	sのサフィックスがsuffixであるならば
if s.endswith(suffix) :	もしsの接尾辞がsuffixである場合
if s.endswith(suffix) :	文字列sの末尾がsuffixとき
if s.endswith(suffix) :	もし文字列sの終端がsuffixであるならば
if s.endswith(suffix) :	もしsの末尾がsuffixとき
if s.endswith(suffix) :	もしsの終わりがsuffix場合
if s.endswith(suffix) :	sの終端がsuffix場合
if s.endswith(suffix) :	文字列sのサフィックスがsuffixであるとき
if s.endswith(suffix) :	sの末尾がsuffixである場合
if s.endswith(suffix) :	文字列sの接尾辞がsuffixとき
if s.endswith(suffix) :	文字列sの終端がsuffixならば
if s.endswith(suffix) :	もし文字列sの末尾がsuffixである場合
if s.endswith(suffix) :	sのサフィックスがsuffixならば
if not s.endswith(suffix) :	もしsのサフィックスがsuffixであるでないならば
if not s.endswith(suffix) :	もしsの接尾辞がsuffixであるでないとき
if not s.endswith(suffix) :	文字列sの末尾がsuffixでないとき
if not s.endswith(suffix) :	もし文字列sの終端がsuffixであるでない場合
if not s.endswith(suffix) :	sの末尾がsuffixでない場合
if not s.endswith(suffix) :	もしsの終わりがsuffixでないとき
if not s.endswith(suffix) :	もしsの終端がsuffixでない場合
if not s.endswith(suffix) :	文字列sのサフィックスがsuffixであるでなならば
if not s.endswith(suffix) :	もしsの末尾がsuffixであるでないとき
if not s.endswith(suffix) :	文字列sの接尾辞がsuffixでなならば
if not s.endswith(suffix) :	文字列sの終端がsuffixでない場合
if not s.endswith(suffix) :	もし文字列sの末尾がsuffixであるでない場合
if not s.endswith(suffix) :	sのサフィックスがsuffixでないならば
while s.endswith(suffix) :	sのサフィックスがsuffixである間
while s.endswith(suffix) :	sの末尾がsuffix間
while s.endswith(suffix) :	文字列sの終端がsuffix間
while s.endswith(suffix) :	sのサフィックスがsuffix間
while not s.endswith(suffix) :	sの接尾辞がsuffixであるでない間
while not s.endswith(suffix) :	文字列sの末尾がsuffixでない間
while not s.endswith(suffix) :	文字列sの終端がsuffixであるでない間
while not s.endswith(suffix) :	sの終わりがsuffixでない間
while not s.endswith(suffix) :	文字列sのサフィックスがsuffixであるでな間
while not s.endswith(suffix) :	sの末尾がsuffixであるでない間
while not s.endswith(suffix) :	文字列sの接尾辞がsuffixでな間
while not s.endswith(suffix) :	文字列sの終端がsuffixでない間
s.expandtabs()	空白で文字列sのタブを置換する
s.expandtabs()	文字列sのタブ記号を空白で置き換える
s.expandtabs()	文字列sのTABを空白で置換する
s.expandtabs()	sのTABを空白で置換する
s.expandtabs()	空白でsのタブ記号を置き換える
s.expandtabs()	文字列sのタブ記号を空白で置換する
s.expandtabs()	空白でs文字列のタブを置換する
s.expandtabs()	空白で文字列sのタブ記号を置き換える
s.expandtabs()	sのタブを空白で置換する
s.expandtabs()	空白でsのTABを置換する
s.expandtabs()	文字列sのタブを空白で置き換える
s.expandtabs()	空白で文字列sのタブを置き換える
s.expandtabs()	文字列sのタブを空白で置換する
s.expandtabs()	空白でsのタブを置換する
s.expandtabs()	文字列sのTABを空白で置き換える
s.expandtabs(n)	s中のタブ記号をn文字の空白で置き換える
s.expandtabs(n)	s内のTABをn文字の空白で置き換える
s.expandtabs(n)	n文字の空白でs中のTABを置換する
s.expandtabs(n)	文字列s内のタブをn文字の空白で置換する
s.expandtabs(n)	文字列s内のTABをn文字の空白で置き換える
s.expandtabs(n)	文字列s内のタブをn文字の空白で置き換える
s.expandtabs(n)	n文字の空白で文字列s内のタブ記号を置き換える
s.expandtabs(n)	n文字の空白でs文字列中のTABを置き換える
s.expandtabs(n)	s中のタブをn文字の空白で置換する
s.expandtabs(n)	n文字の空白で文字列s中のTABを置換する
s.expandtabs(n)	n文字の空白でs中のタブを置換する
s.expandtabs(n)	s中のTABをn文字の空白で置き換える
s.find(sub) >= 0	subがs文字列内にあるか否か
if s.find(sub) >= 0:	subがs文字列内にあるとき
s.find(sub) >= 0	s内にsubがあるか否か
if s.find(sub) >= 0:	s内にsubがある場合
s.find(sub) >= 0	subがs内にあるか否か
if s.find(sub) >= 0:	subがs内にあるとき
s.find(sub) >= 0	sにsubがあるか
if s.find(sub) >= 0:	sにsubがあるならば
s.find(sub) >= 0	subがs文字列中にあるかどうか
if s.find(sub) >= 0:	subがs文字列中にあるならば
s.find(sub) >= 0	subが文字列s内にあるか
if s.find(sub) >= 0:	subが文字列s内にあるとき
s.find(sub) >= 0	subがsにあるか
if s.find(sub) >= 0:	subがsにある場合
s.find(sub) >= 0	subがs中にあるか
if s.find(sub) >= 0:	subがs中にある場合
s.find(sub) >= 0	文字列s内にsubがあるか
if s.find(sub) >= 0:	文字列s内にsubがある場合
s.find(sub) >= 0	subが文字列s中にあるか否か
if s.find(sub) >= 0:	subが文字列s中にあるとき
if s.find(sub) >= 0 :	もしsubがs文字列内にあったなら
if s.find(sub) >= 0 :	s内にsubがある場合
if s.find(sub) >= 0 :	s内にsubがあれば
if s.find(sub) >= 0 :	もしsubがs内にあれば
if s.find(sub) >= 0 :	もしsubがs内にあった場合
if s.find(sub) >= 0 :	もしsにsubがあれば
if s.find(sub) >= 0 :	もしsubがs文字列中にあるとき
if s.find(sub) >= 0 :	もしsubがs文字列中にあれば
if s.find(sub) >= 0 :	subが文字列s内にあるならば
if s.find(sub) >= 0 :	もしsubが文字列s内にあれば
if s.find(sub) >= 0 :	subが文字列s内にあったなら
if s.find(sub) >= 0 :	subがsにあるとき
if s.find(sub) >= 0 :	もしsubがsにあれば
if s.find(sub) >= 0 :	subがs中にある場合
if s.find(sub) >= 0 :	subがs中にあれば
if s.find(sub) >= 0 :	文字列s内にsubがあれば
if s.find(sub) >= 0 :	もし文字列s内にsubがあったならば
if s.find(sub) >= 0 :	もしsubが文字列s中にあれば
while s.find(sub) >= 0 :	subがs文字列内にある間
while s.find(sub) >= 0 :	subがs文字列中にある間
while s.find(sub) >= 0 :	subがs中にある間
while s.find(sub) >= 0 :	文字列s内にsubがある間
while s.find(sub) >= 0 :	subが文字列s中にある間
s.find(sub) >= 0	subがs中で出現するか否か
if s.find(sub) >= 0:	subがs中で出現する場合
s.find(sub) >= 0	文字列s内でsubが出現するか
if s.find(sub) >= 0:	文字列s内でsubが出現する場合
s.find(sub) >= 0	subがs中で発見されるか
if s.find(sub) >= 0:	もしsubがs中で発見されるならば
s.find(sub) >= 0	sでsubが出現するか
if s.find(sub) >= 0:	sでsubが出現するならば
s.find(sub) >= 0	s中でsubが出現するか否か
if s.find(sub) >= 0:	s中でsubが出現するとき
s.find(sub) >= 0	s内でsubが発見されるか
if s.find(sub) >= 0:	s内でsubが発見されるとき
s.find(sub) >= 0	subがs中で見つかるかどうか
if s.find(sub) >= 0:	subがs中で見つかるならば
s.find(sub) >= 0	subが文字列sで出現するか
if s.find(sub) >= 0:	subが文字列sで出現するとき
s.find(sub) >= 0	文字列s内でsubが発見されるか
if s.find(sub) >= 0:	文字列s内でsubが発見される場合
s.find(sub) >= 0	s内でsubが見つかるか否か
if s.find(sub) >= 0:	もしs内でsubが見つかるならば
s.find(sub) >= 0	s中でsubが発見されるか
if s.find(sub) >= 0:	s中でsubが発見される場合
s.find(sub) >= 0	subがs内で見つかるか
if s.find(sub) >= 0:	subがs内で見つかるとき
s.find(sub) >= 0	subが文字列sで発見されるか
if s.find(sub) >= 0:	もしsubが文字列sで発見されるならば
s.find(sub) >= 0	文字列s中でsubが出現するか否か
if s.find(sub) >= 0:	文字列s中でsubが出現するとき
s.find(sub) >= 0	subがs文字列中で出現するかどうか
if s.find(sub) >= 0:	subがs文字列中で出現する場合
s.find(sub) >= 0	subが文字列s中で出現するか
if s.find(sub) >= 0:	もしsubが文字列s中で出現するならば
s.find(sub) >= 0	文字列s中でsubが見つかるか
if s.find(sub) >= 0:	文字列s中でsubが見つかるとき
if s.find(sub) >= 0 :	もしsubがs中で出現する場合
if s.find(sub) >= 0 :	subがs中で出現すれば
if s.find(sub) >= 0 :	文字列s内でsubが出現すれば
if s.find(sub) >= 0 :	文字列s内でsubが出現した場合
if s.find(sub) >= 0 :	もしsubがs中で発見されれば
if s.find(sub) >= 0 :	もしsでsubが出現すれば
if s.find(sub) >= 0 :	もしsでsubが出現したとき
if s.find(sub) >= 0 :	もしs中でsubが出現する場合
if s.find(sub) >= 0 :	もしs中でsubが出現すれば
if s.find(sub) >= 0 :	s中でsubが出現したならば
if s.find(sub) >= 0 :	s内でsubが発見される場合
if s.find(sub) >= 0 :	subが文字列sで出現した場合
if s.find(sub) >= 0 :	もし文字列s内でsubが発見されるとき
if s.find(sub) >= 0 :	文字列s内でsubが発見されれば
if s.find(sub) >= 0 :	もしs内でsubが見つかれば
if s.find(sub) >= 0 :	s中でsubが発見されれば
if s.find(sub) >= 0 :	s中でsubが発見されたとき
if s.find(sub) >= 0 :	もしsubがs内で見つかるならば
if s.find(sub) >= 0 :	もしsubが文字列sで発見されるならば
if s.find(sub) >= 0 :	もしsubが文字列sで発見されれば
if s.find(sub) >= 0 :	文字列s中でsubが出現する場合
if s.find(sub) >= 0 :	文字列s中でsubが出現すれば
if s.find(sub) >= 0 :	もしsubがs文字列中で出現すれば
if s.find(sub) >= 0 :	もしsubが文字列s中で出現したら
if s.find(sub) >= 0 :	文字列s中でsubが見つかる場合
if s.find(sub) >= 0 :	文字列s中でsubが見つかったなら
while s.find(sub) >= 0 :	文字列s内でsubが出現する間
while s.find(sub) >= 0 :	subがs中で発見される間
while s.find(sub) >= 0 :	sでsubが出現する間
while s.find(sub) >= 0 :	s中でsubが出現する間
while s.find(sub) >= 0 :	s内でsubが発見される間
while s.find(sub) >= 0 :	s内でsubが見つかる間
while s.find(sub) >= 0 :	s中でsubが発見される間
while s.find(sub) >= 0 :	subが文字列sで発見される間
while s.find(sub) >= 0 :	subがs文字列中で出現する間
while s.find(sub) >= 0 :	subが文字列s中で出現する間
s.find(sub) == -1	subがs文字列内にないかどうか
if s.find(sub) == -1:	もしsubがs文字列内にないならば
s.find(sub) == -1	subがs文字列中にないか否か
if s.find(sub) == -1:	subがs文字列中にないならば
s.find(sub) == -1	s内にsubがないか否か
if s.find(sub) == -1:	もしs内にsubがないならば
s.find(sub) == -1	subがs内にないか否か
if s.find(sub) == -1:	subがs内にない場合
s.find(sub) == -1	subが文字列s中にないか
if s.find(sub) == -1:	subが文字列s中にないとき
s.find(sub) == -1	文字列s内にsubがないか
if s.find(sub) == -1:	もし文字列s内にsubがないならば
s.find(sub) == -1	文字列s中にsubがないか否か
if s.find(sub) == -1:	文字列s中にsubがない場合
s.find(sub) == -1	sにsubがないかどうか
if s.find(sub) == -1:	sにsubがないとき
s.find(sub) == -1	文字列sにsubがないか
if s.find(sub) == -1:	文字列sにsubがないとき
s.find(sub) == -1	subがs中にないか否か
if s.find(sub) == -1:	もしsubがs中にないならば
if s.find(sub) == -1 :	もしsubがs文字列内になくなければ
if s.find(sub) == -1 :	subがs文字列内になくなかったならば
if s.find(sub) == -1 :	subがs文字列中になくなかった場合
if s.find(sub) == -1 :	s内にsubがないとき
if s.find(sub) == -1 :	s内にsubがなくなかったとき
if s.find(sub) == -1 :	もしsubがs内になくなかったならば
if s.find(sub) == -1 :	もしsubが文字列s中にない場合
if s.find(sub) == -1 :	もしsubが文字列s中になくなかったとき
if s.find(sub) == -1 :	文字列s内にsubがないとき
if s.find(sub) == -1 :	文字列s内にsubがなくなければ
if s.find(sub) == -1 :	文字列s中にsubがないとき
if s.find(sub) == -1 :	文字列s中にsubがなくなければ
if s.find(sub) == -1 :	文字列s中にsubがなくなかったなら
if s.find(sub) == -1 :	もしsにsubがなくなければ
if s.find(sub) == -1 :	もしsにsubがなくなかったならば
if s.find(sub) == -1 :	もし文字列sにsubがなくなかったなら
if s.find(sub) == -1 :	もしsubがs中にないならば
if s.find(sub) == -1 :	subがs中になくなければ
if s.find(sub) == -1 :	もしsubがs中になくなかったとき
while s.find(sub) == -1 :	subがs文字列中にない間
while s.find(sub) == -1 :	s内にsubがない間
while s.find(sub) == -1 :	subがs内にない間
while s.find(sub) == -1 :	文字列s内にsubがない間
while s.find(sub) == -1 :	sにsubがない間
s.find(sub) == -1	subがsで見つからないかどうか
if s.find(sub) == -1:	subがsで見つからない場合
s.find(sub) == -1	文字列s内でsubが見つからないか否か
if s.find(sub) == -1:	文字列s内でsubが見つからないとき
s.find(sub) == -1	文字列s中でsubが見つからないか否か
if s.find(sub) == -1:	もし文字列s中でsubが見つからないならば
s.find(sub) == -1	subが文字列sで見つからないか
if s.find(sub) == -1:	もしsubが文字列sで見つからないならば
s.find(sub) == -1	文字列sでsubが見つからないかどうか
if s.find(sub) == -1:	もし文字列sでsubが見つからないならば
s.find(sub) == -1	s中でsubが見つからないか否か
if s.find(sub) == -1:	s中でsubが見つからないとき
s.find(sub) == -1	s内でsubが見つからないか
if s.find(sub) == -1:	s内でsubが見つからない場合
s.find(sub) == -1	subがs中で見つからないか否か
if s.find(sub) == -1:	subがs中で見つからないとき
s.find(sub) == -1	subがs文字列中で見つからないか
if s.find(sub) == -1:	subがs文字列中で見つからない場合
s.find(sub) == -1	subが文字列s内で見つからないか
if s.find(sub) == -1:	subが文字列s内で見つからないとき
s.find(sub) == -1	subがs内で見つからないか
if s.find(sub) == -1:	もしsubがs内で見つからないならば
s.find(sub) == -1	subがs文字列で見つからないか否か
if s.find(sub) == -1:	subがs文字列で見つからないとき
s.find(sub) == -1	sでsubが見つからないかどうか
if s.find(sub) == -1:	sでsubが見つからないならば
if s.find(sub) == -1 :	subがsで見つからないならば
if s.find(sub) == -1 :	subがsで見つからなければ
if s.find(sub) == -1 :	もしsubがsで見つからなかったら
if s.find(sub) == -1 :	文字列s内でsubが見つからなかった場合
if s.find(sub) == -1 :	文字列s中でsubが見つからなかったら
if s.find(sub) == -1 :	もしsubが文字列sで見つからなければ
if s.find(sub) == -1 :	subが文字列sで見つからなかったならば
if s.find(sub) == -1 :	文字列sでsubが見つからない場合
if s.find(sub) == -1 :	もし文字列sでsubが見つからなければ
if s.find(sub) == -1 :	文字列sでsubが見つからなかった場合
if s.find(sub) == -1 :	もしs中でsubが見つからなかったなら
if s.find(sub) == -1 :	s内でsubが見つからないとき
if s.find(sub) == -1 :	s内でsubが見つからなければ
if s.find(sub) == -1 :	s内でsubが見つからなかったならば
if s.find(sub) == -1 :	subがs中で見つからなかったら
if s.find(sub) == -1 :	subが文字列s内で見つからなかったとき
if s.find(sub) == -1 :	もしsubがs内で見つからないとき
if s.find(sub) == -1 :	もしsubがs内で見つからなければ
if s.find(sub) == -1 :	subがs内で見つからなかったなら
if s.find(sub) == -1 :	subがs文字列で見つからない場合
if s.find(sub) == -1 :	subがs文字列で見つからなければ
if s.find(sub) == -1 :	subがs文字列で見つからなかったならば
if s.find(sub) == -1 :	もしsでsubが見つからなかった場合
while s.find(sub) == -1 :	subが文字列sで見つからない間
while s.find(sub) == -1 :	s中でsubが見つからない間
while s.find(sub) == -1 :	subがs内で見つからない間
while s.find(sub) == -1 :	subがs文字列で見つからない間
while s.find(sub) == -1 :	sでsubが見つからない間
s.find(sub)	部分文字列subの位置をs中で探す
s.find(sub)	文字列s内で部分文字列subの位置を探す
s.find(sub)	文字列s内でsub部分文字列を探す
s.find(sub)	部分文字列subをs文字列中で探す
s.find(sub)	部分文字列subの位置をs文字列内で探す
s.find(sub)	subをsで探す
s.find(sub)	s内で部分文字列subの位置を探す
s.find(sub)	文字列sでsubを探す
s.find(sub)	subの位置を文字列s内で探す
s.find(sub)	sで部分文字列subを探す
s.find(sub)	sでsubの位置を探す
s.find(sub)	文字列s中でsub部分文字列を探す
s.find(sub)	部分文字列subの位置を文字列sで探す
s.find(sub)	文字列s内でsub部分文字列の位置を探す
s.find(sub)	subを文字列s内で探す
s.find(sub)	部分文字列subを文字列s中で探す
s.find(sub)	s内でsubを探す
s.find(sub)	文字列s中で部分文字列subの位置を探す
s.find(sub)	部分文字列subを文字列s内で探す
s.find(sub)	文字列s内で部分文字列subを探す
s.find(sub, start)	s中で部分文字列subをstartから探す
s.find(sub, start)	s中でsubの位置をstartから探す
s.find(sub, start)	startからsub部分文字列を文字列s中で探す
s.find(sub, start)	文字列s内でsub部分文字列をstartから探す
s.find(sub, start)	subの位置を文字列s内でstartから探す
s.find(sub, start)	部分文字列subをs中でstartから探す
s.find(sub, start)	部分文字列subの位置をstartから文字列s中で探す
s.find(sub, start)	部分文字列subをstartからsで探す
s.find(sub, start)	startから部分文字列subの位置をs内で探す
s.find(sub, start)	sでsubをstartから探す
s.find(sub, start)	subをstartからs文字列内で探す
s.find(sub, start)	startからsubを文字列s内で探す
s.find(sub, start)	startからsub部分文字列をs文字列中で探す
s.find(sub, start)	文字列s中で部分文字列subの位置をstartから探す
s.find(sub, start)	subの位置をstartから文字列sで探す
s.find(sub, start)	subを文字列sでstartから探す
s.find(sub, start)	subの位置をsでstartから探す
s.find(sub, start)	文字列s内でstartからsub部分文字列の位置を探す
s.find(sub, start)	subの位置をs内でstartから探す
s.find(sub, start)	startから部分文字列subの位置を文字列s中で探す
s.find(sub, start)	文字列s中でsubの位置をstartから探す
s.find(sub, start)	subの位置をs文字列中でstartから探す
s.find(sub, start)	文字列sでstartからsubを探す
s.find(sub, start)	startからs文字列内で部分文字列subの位置を探す
s.find(sub, start)	部分文字列subの位置をstartからs文字列で探す
s.find(sub, start)	s内でsubをstartから探す
s.find(sub, start)	subの位置をstartからs文字列中で探す
s.find(sub, start)	部分文字列subの位置をstartからs文字列中で探す
s.find(sub, start)	部分文字列subをs文字列内でstartから探す
s.find(sub, start)	文字列s内でstartからsubの位置を探す
s.find(sub, start)	文字列s中でstartからsubを探す
s.find(sub, start)	文字列s内でsub部分文字列の位置をstartから探す
s.find(sub, start)	startから文字列sで部分文字列subの位置を探す
s.find(sub, start)	startからs中で部分文字列subの位置を探す
s.find(sub, start)	s中でstartからsubの位置を探す
s.find(sub, start)	startからs中でsub部分文字列の位置を探す
s.find(sub, start)	subの位置をstartからs文字列内で探す
s.find(sub, start)	subをstartからs内で探す
s.find(sub, start)	s内で部分文字列subの位置をstartから探す
s.find(sub, start)	startからs文字列中で部分文字列subを探す
s.find(sub, start)	startから部分文字列subの位置をs文字列内で探す
s.find(sub, start)	subをsでstartから探す
s.find(sub, start)	startからs文字列内でsubを探す
s.find(sub, start)	文字列s中でsub部分文字列をstartから探す
s.find(sub, start)	部分文字列subをs内でstartからendまで探す
s.find(sub, start)	startからs文字列内で部分文字列subの位置をendまで探す
s.find(sub, start)	文字列sでsubの位置をstartからendまで探す
s.find(sub, start)	部分文字列subの位置を文字列sでstartからendまで探す
s.find(sub, start)	subの位置をstartからs中でendまで探す
s.find(sub, start)	startからs中でsubをendまで探す
s.find(sub, start)	startからsubの位置を文字列s中でendまで探す
s.find(sub, start)	startから部分文字列subを文字列sでendまで探す
s.find(sub, start)	startから文字列s中でsubの位置をendまで探す
s.find(sub, start)	s内でstartからsub部分文字列の位置をendまで探す
s.find(sub, start)	startから文字列s内でsubをendまで探す
s.find(sub, start)	subをstartからs文字列内でendまで探す
s.find(sub, start)	文字列s内でstartから部分文字列subの位置をendまで探す
s.find(sub, start)	文字列s内で部分文字列subの位置をstartからendまで探す
s.find(sub, start)	startから部分文字列subの位置をs文字列でendまで探す
s.find(sub, start)	文字列s内でstartからsub部分文字列をendまで探す
s.find(sub, start)	文字列s内でstartからsubをendまで探す
s.find(sub, start)	startから文字列s内でsubの位置をendまで探す
s.find(sub, start)	startからs内でsubの位置をendまで探す
s.find(sub, start)	sでstartから部分文字列subの位置をendまで探す
s.find(sub, start)	subの位置をs文字列でstartからendまで探す
s.find(sub, start)	部分文字列subの位置をstartからs文字列内でendまで探す
s.find(sub, start)	sでsub部分文字列の位置をstartからendまで探す
s.find(sub, start)	部分文字列subの位置をstartからs中でendまで探す
s.find(sub, start)	startからsub部分文字列の位置をs中でendまで探す
s.find(sub, start)	startからs文字列内で部分文字列subをendまで探す
s.find(sub, start)	startから部分文字列subをs中でendまで探す
s.find(sub, start)	部分文字列subをstartからsでendまで探す
s.find(sub, start)	startからsubをs中でendまで探す
s.find(sub, start)	sでsubをstartからendまで探す
s.find(sub, start)	文字列s内でstartから部分文字列subをendまで探す
s.find(sub, start)	s内でsubの位置をstartからendまで探す
s.find(sub, start)	subの位置をs文字列中でstartからendまで探す
s.find(sub, start)	subの位置をstartから文字列s内でendまで探す
s.find(sub, start)	startからsでsubをendまで探す
s.find(sub, start)	部分文字列subの位置を文字列s中でstartからendまで探す
s.find(sub, start)	startからsubの位置をsでendまで探す
s.find(sub, start)	subをs文字列内でstartからendまで探す
s.find(sub, start)	subをstartからs中でendまで探す
s.find(sub, start)	subをs内でstartからendまで探す
s.rfind(sub)	末尾から文字列sでsubの位置を探す
s.rfind(sub)	後ろからsでsubの位置を探す
s.rfind(sub)	subを末尾からs中で探す
s.rfind(sub)	末尾からsで部分文字列subの位置を探す
s.rfind(sub)	部分文字列subを右からs文字列で探す
s.rfind(sub)	後ろからs文字列内で部分文字列subを探す
s.rfind(sub)	右からsub部分文字列を文字列s内で探す
s.rfind(sub)	右からs内でsub部分文字列の位置を探す
s.rfind(sub)	文字列s中でsubの位置を右から探す
s.rfind(sub)	右から部分文字列subの位置を文字列s中で探す
s.rfind(sub)	文字列s内で末尾からsubの位置を探す
s.rfind(sub)	右からs内でsubの位置を探す
s.rfind(sub)	文字列s中で後ろから部分文字列subの位置を探す
s.rfind(sub)	subの位置を末尾からs内で探す
s.rfind(sub)	subを後ろからs内で探す
s.rfind(sub)	subを後ろからs文字列で探す
s.rfind(sub)	右から文字列s内でsub部分文字列を探す
s.rfind(sub)	文字列s内で部分文字列subの位置を後ろから探す
s.rfind(sub)	部分文字列subの位置を右からs文字列内で探す
s.rfind(sub)	s内で末尾からsub部分文字列の位置を探す
s.rfind(sub)	右からs内でsubを探す
s.rfind(sub)	subの位置を右からs内で探す
s.rfind(sub)	s内で右からsubを探す
s.rfind(sub)	部分文字列subを右から文字列s中で探す
s.rfind(sub)	文字列s内で部分文字列subを右から探す
s.rfind(sub)	subの位置を右から文字列sで探す
s.rfind(sub)	s内でsub部分文字列を末尾から探す
s.rfind(sub)	文字列sでsub部分文字列を末尾から探す
s.rfind(sub)	subの位置を後ろからs文字列中で探す
s.rfind(sub)	s内でsub部分文字列を後ろから探す
s.rfind(sub)	s内で部分文字列subの位置を後ろから探す
s.rfind(sub)	文字列sで部分文字列subを末尾から探す
s.rfind(sub)	部分文字列subを右からs内で探す
s.rfind(sub)	文字列s内で末尾からsubを探す
s.rfind(sub)	s中で末尾から部分文字列subの位置を探す
s.rfind(sub)	文字列s内で後ろからsubの位置を探す
s.rfind(sub)	文字列s内でsubの位置を末尾から探す
s.rfind(sub)	後ろからs文字列でsubの位置を探す
s.rfind(sub)	s中で右からsubの位置を探す
s.rfind(sub)	s内で部分文字列subを右から探す
s.rfind(sub)	subをs文字列内で末尾から探す
s.rfind(sub)	文字列sでsubの位置を右から探す
s.rfind(sub)	subの位置を後ろからs文字列内で探す
s.rfind(sub)	subの位置を右からsで探す
s.rfind(sub)	末尾から部分文字列subをs内で探す
s.rfind(sub)	右からsubをs文字列で探す
s.rfind(sub)	subをs文字列内で右から探す
s.rfind(sub)	文字列s内で右からsub部分文字列の位置を探す
s.rfind(sub)	部分文字列subの位置をs文字列内で後ろから探す
s.rfind(sub)	末尾からsub部分文字列をs中で探す
s.rfind(sub)	後ろからs内で部分文字列subの位置を探す
s.rfind(sub)	s内で後ろからsubの位置を探す
s.rfind(sub)	s内で末尾からsubの位置を探す
s.rfind(sub)	部分文字列subの位置を後ろからs文字列中で探す
s.rfind(sub)	文字列sでsub部分文字列を右から探す
s.rfind(sub)	部分文字列subの位置をs中で末尾から探す
s.rfind(sub)	部分文字列subを後ろからs中で探す
s.rfind(sub)	subの位置を文字列s中で末尾から探す
s.rfind(sub)	右から文字列s内でsub部分文字列の位置を探す
s.rfind(sub)	右からs文字列内でsub部分文字列を探す
s.rfind(sub)	文字列s内でsubを右から探す
s.rfind(sub)	後ろからsub部分文字列をs文字列中で探す
s.rfind(sub)	右からs文字列内でsubを探す
s.rfind(sub)	subの位置をs文字列で後ろから探す
s.rfind(sub)	部分文字列subの位置をs文字列中で右から探す
s.rfind(sub)	subをs中で右から探す
s.rfind(sub)	文字列s中でsubを末尾から探す
s.rfind(sub)	subをs文字列中で右から探す
s.rfind(sub)	末尾からsub部分文字列をs内で探す
s.rfind(sub)	右からsub部分文字列をs内で探す
s.rfind(sub)	右からs文字列内でsubの位置を探す
s.rfind(sub)	後ろから文字列s内で部分文字列subを探す
s.rfind(sub)	部分文字列subの位置を右から文字列s内で探す
s.rfind(sub)	s内でsub部分文字列の位置を末尾から探す
s.rfind(sub)	末尾から部分文字列subを文字列s内で探す
s.rfind(sub)	部分文字列subをs内で右から探す
s.rfind(sub)	部分文字列subの位置をs内で右から探す
s.rfind(sub)	文字列sで末尾から部分文字列subを探す
s.rfind(sub)	文字列s内で末尾から部分文字列subの位置を探す
s.rfind(sub)	s内で末尾からsub部分文字列を探す
s.rfind(sub, start)	末尾からsubの位置をs中でstartまで探す
s.rfind(sub, start)	末尾から部分文字列subの位置をs中でstartまで探す
s.rfind(sub, start)	sで後ろからsubの位置をstartまで探す
s.rfind(sub, start)	subの位置を末尾からs文字列中でstartまで探す
s.rfind(sub, start)	subを後ろからs文字列内でstartまで探す
s.rfind(sub, start)	文字列s内でsubを後ろからstartまで探す
s.rfind(sub, start)	部分文字列subの位置を後ろからs内でstartまで探す
s.rfind(sub, start)	subの位置をs文字列で右からstartまで探す
s.rfind(sub, start)	s中でsubを後ろからstartまで探す
s.rfind(sub, start)	末尾からsでsub部分文字列をstartまで探す
s.rfind(sub, start)	末尾からsubの位置を文字列s内でstartまで探す
s.rfind(sub, start)	部分文字列subを右からs文字列でstartまで探す
s.rfind(sub, start)	右から文字列s中で部分文字列subの位置をstartまで探す
s.rfind(sub, start)	部分文字列subの位置を後ろからs中でstartまで探す
s.rfind(sub, start)	後ろからsubをs中でstartまで探す
s.rfind(sub, start)	右からsで部分文字列subの位置をstartまで探す
s.rfind(sub, start)	部分文字列subの位置をs文字列中で末尾からstartまで探す
s.rfind(sub, start)	文字列s内でsubの位置を後ろからstartまで探す
s.rfind(sub, start)	末尾からs内で部分文字列subをstartまで探す
s.rfind(sub, start)	subの位置を右からs文字列中でstartまで探す
s.rfind(sub, start)	部分文字列subの位置をs内で右からstartまで探す
s.rfind(sub, start)	s内でsubを末尾からstartまで探す
s.rfind(sub, start)	部分文字列subの位置を右からsでstartまで探す
s.rfind(sub, start)	subの位置を末尾からs中でstartまで探す
s.rfind(sub, start)	sでsubの位置を末尾からstartまで探す
s.rfind(sub, start)	部分文字列subを末尾からs文字列中でstartまで探す
s.rfind(sub, start)	右からsub部分文字列の位置をs文字列でstartまで探す
s.rfind(sub, start)	s中で右からsubの位置をstartまで探す
s.rfind(sub, start)	subの位置をs中で末尾からstartまで探す
s.rfind(sub, start)	末尾からs内でsub部分文字列をstartまで探す
s.rfind(sub, start)	右から文字列sでsubをstartまで探す
s.rfind(sub, start)	文字列sで末尾からsubの位置をstartまで探す
s.rfind(sub, start)	部分文字列subの位置を後ろから文字列sでstartまで探す
s.rfind(sub, start)	部分文字列subの位置を末尾からs内でstartまで探す
s.rfind(sub, start)	s中で後ろからsubの位置をstartまで探す
s.rfind(sub, start)	s内で後ろからsub部分文字列の位置をstartまで探す
s.rfind(sub, start)	文字列s中で部分文字列subの位置を右からstartまで探す
s.rfind(sub, start)	部分文字列subの位置をs文字列内で末尾からstartまで探す
s.rfind(sub, start)	s内でsub部分文字列の位置を末尾からstartまで探す
s.rfind(sub, start)	右からs文字列内でsub部分文字列の位置をstartまで探す
s.rfind(sub, start)	文字列sで後ろからsubをstartまで探す
s.rfind(sub, start)	subをs文字列で後ろからstartまで探す
s.rfind(sub, start)	末尾からsubをs中でstartまで探す
s.rfind(sub, start)	後ろからsub部分文字列の位置を文字列s内でstartまで探す
s.rfind(sub, start)	後ろから部分文字列subを文字列s内でstartまで探す
s.rfind(sub, start)	右からs文字列中でsubをstartまで探す
s.rfind(sub, start)	s内で部分文字列subを後ろからstartまで探す
s.rfind(sub, start)	s内で右からsubをstartまで探す
s.rfind(sub, start)	後ろからsub部分文字列をsでstartまで探す
s.rfind(sub, start)	末尾からsubの位置をs内でstartまで探す
s.rfind(sub, start)	右からsubを文字列s中でstartまで探す
s.rfind(sub, start)	部分文字列subを右からsでstartまで探す
s.rfind(sub, start)	s中で後ろからsub部分文字列をstartまで探す
s.rfind(sub, start)	文字列s内で末尾から部分文字列subの位置をstartまで探す
s.rfind(sub, start)	後ろからs内で部分文字列subをstartまで探す
s.rfind(sub, start)	s中でsubを右からstartまで探す
s.rfind(sub, start)	subの位置を後ろからs文字列中でstartまで探す
s.rfind(sub, start)	文字列s内でsub部分文字列の位置を右からstartまで探す
s.rfind(sub, start)	文字列s中で部分文字列subの位置を後ろからstartまで探す
s.rfind(sub, start)	部分文字列subの位置を右からs文字列内でstartまで探す
s.rfind(sub, start)	s中で後ろからsub部分文字列の位置をstartまで探す
s.rfind(sub, start)	末尾から文字列sでsub部分文字列の位置をstartまで探す
s.rfind(sub, start)	後ろから文字列s中でsubの位置をstartまで探す
s.rfind(sub, start)	末尾からs文字列でsub部分文字列の位置をstartまで探す
s.rfind(sub, start)	subを末尾からs中でstartまで探す
s.rfind(sub, start)	部分文字列subの位置をs中で末尾からstartまで探す
s.rfind(sub, start)	末尾からs文字列内でsubの位置をstartまで探す
s.rfind(sub, start)	文字列s中で部分文字列subの位置を末尾からstartまで探す
s.rfind(sub, start)	文字列s中でsubを後ろからstartまで探す
s.rfind(sub, start)	subをs文字列中で右からstartまで探す
s.rfind(sub, start)	部分文字列subを後ろからs内でstartまで探す
s.rfind(sub, start)	文字列s中でsubを右からstartまで探す
s.rfind(sub, start)	sでsubの位置を後ろからstartまで探す
s.rfind(sub, start)	部分文字列subをs文字列で右からstartまで探す
s.rfind(sub, start)	文字列s内でsubの位置を末尾からstartまで探す
s.rfind(sub, start)	文字列s内で部分文字列subを後ろからstartまで探す
s.rfind(sub, start)	文字列s中でsub部分文字列を後ろからstartまで探す
s.rfind(sub, start)	文字列s中でsubの位置を右からstartまで探す
s.rfind(sub, start)	s内で末尾から部分文字列subをstartまで探す
s.rfind(sub, start)	subを末尾から文字列s内でstartまで探す
s.rfind(sub, start, end)	endからsub部分文字列をs内でstartまで探す
s.rfind(sub, start, end)	endからsでsubをstartまで探す
s.rfind(sub, start, end)	subの位置をs文字列内でendからstartまで探す
s.rfind(sub, start, end)	endからs中で部分文字列subをstartまで探す
s.rfind(sub, start, end)	endからs中でsub部分文字列をstartまで探す
s.rfind(sub, start, end)	文字列s中でendからsubをstartまで探す
s.rfind(sub, start, end)	endからsubの位置を文字列s中でstartまで探す
s.rfind(sub, start, end)	endからsubを文字列s内でstartまで探す
s.rfind(sub, start, end)	部分文字列subをendからs中でstartまで探す
s.rfind(sub, start, end)	s内でsub部分文字列の位置をendからstartまで探す
s.rfind(sub, start, end)	文字列s中でsubをendからstartまで探す
s.rfind(sub, start, end)	subをendからs文字列でstartまで探す
s.rfind(sub, start, end)	endから部分文字列subを文字列s中でstartまで探す
s.rfind(sub, start, end)	文字列sで部分文字列subをendからstartまで探す
s.rfind(sub, start, end)	endからs文字列で部分文字列subの位置をstartまで探す
s.rfind(sub, start, end)	文字列sでsubの位置をendからstartまで探す
s.rfind(sub, start, end)	endからsでsub部分文字列の位置をstartまで探す
s.rfind(sub, start, end)	endからsub部分文字列を文字列s内でstartまで探す
s.rfind(sub, start, end)	subの位置をendからs内でstartまで探す
s.rfind(sub, start, end)	s内でsubをendからstartまで探す
s.rfind(sub, start, end)	subの位置をendからs文字列でstartまで探す
s.rfind(sub, start, end)	endから文字列sでsub部分文字列の位置をstartまで探す
s.rfind(sub, start, end)	部分文字列subの位置をs文字列中でendからstartまで探す
s.rfind(sub, start, end)	文字列s内でsubの位置をendからstartまで探す
s.rfind(sub, start, end)	部分文字列subを文字列s内でendからstartまで探す
s.rfind(sub, start, end)	endから部分文字列subの位置をs内でstartまで探す
s.rfind(sub, start, end)	s内でendからsub部分文字列の位置をstartまで探す
s.rfind(sub, start, end)	endからsub部分文字列をsでstartまで探す
s.rfind(sub, start, end)	subをendからs文字列内でstartまで探す
s.rfind(sub, start, end)	文字列s内で部分文字列subの位置をendからstartまで探す
s.rfind(sub, start, end)	部分文字列subの位置を文字列s中でendからstartまで探す
s.rfind(sub, start, end)	endから部分文字列subの位置をsでstartまで探す
s.rfind(sub, start, end)	部分文字列subをs中でendからstartまで探す
s.rfind(sub, start, end)	文字列s内でendから部分文字列subをstartまで探す
s.rfind(sub, start, end)	s中でendからsubをstartまで探す
s.rfind(sub, start, end)	subの位置をs文字列でendからstartまで探す
s.rfind(sub, start, end)	部分文字列subの位置をs文字列内でendからstartまで探す
s.rfind(sub, start, end)	部分文字列subをendからs文字列でstartまで探す
s.rfind(sub, start, end)	endからs文字列で部分文字列subをstartまで探す
s.rfind(sub, start, end)	文字列s内でsubをendからstartまで探す
s.rfind(sub, start, end)	文字列s内で部分文字列subをendからstartまで探す
s.rfind(sub, start, end)	部分文字列subを文字列sでendからstartまで探す
s.rfind(sub, start, end)	endからsでsubの位置をstartまで探す
s.rfind(sub, start, end)	endからsubの位置をs文字列中でstartまで探す
s.rfind(sub, start, end)	部分文字列subをendからs内でstartまで探す
s.rfind(sub, start, end)	文字列sでendからsubの位置をstartまで探す
s.rfind(sub, start, end)	endから部分文字列subをs内でstartまで探す
s.rfind(sub, start, end)	subの位置をendから文字列s内でstartまで探す
s.rfind(sub, start, end)	部分文字列subの位置をendからs文字列中でstartまで探す
s.rfind(sub, start, end)	部分文字列subの位置をendからs内でstartまで探す
s.rfind(sub, start, end)	s中でsubをendからstartまで探す
s.rfind(sub, start, end)	s内でsubの位置をendからstartまで探す
s.rfind(sub, start, end)	subをendからs中でstartまで探す
s.rfind(sub, start, end)	sでendからsubの位置をstartまで探す
s.rfind(sub, start, end)	subの位置をendから文字列sでstartまで探す
s.rfind(sub, start, end)	文字列sでsub部分文字列をendからstartまで探す
s.rfind(sub, start, end)	endからsubをs文字列中でstartまで探す
s.rfind(sub, start, end)	endからsubの位置をs中でstartまで探す
s.index(sub)	s中でsubが最初に見つかった位置
s.index(sub)	subがs内で見つかった位置
s.index(sub)	subがsで見つかった位置
s.index(sub)	subが文字列s中で最初に見つかった位置
s.index(sub)	subがs文字列中で見つかった位置
s.index(sub)	文字列s中でsubが見つかった位置
s.index(sub)	s中でsubが見つかった位置
s.rindex(sub)	文字列s中でsubが最後に見つかった位置
s.rindex(sub)	s中でsubが最後に見つかった位置
s.rindex(sub)	文字列sでsubが最後に見つかった位置
s.rindex(sub)	文字列s内でsubが最後に見つかった位置
s.rindex(sub)	subがs内で最後に見つかった位置
s.rindex(sub)	s内でsubが最後に見つかった位置
s.rindex(sub)	sでsubが最後に見つかった位置
s.rindex(sub)	subがsで最後に見つかった位置
fmt.format(x)	xでfmt(テンプレを整形する
fmt.format(x)	xでfmt(テンプレをフォーマットする
fmt.format(x)	fmt(テンプレをxでフォーマットする
fmt.format(x, y)	xとyでテンプレートfmtをフォーマットする
fmt.format(x, y)	fmtをxとyでフォーマットする
fmt.format(x, y)	xとyでfmt書式をフォーマットする
fmt.format(x, y)	書式fmtをxとyでフォーマットする
fmt.format(x, y)	テンプレfmtをxとyで整形する
fmt.format(x, y)	テンプレfmtをxとyでフォーマットする
fmt.format(x, y, z)	x,y,zで書式fmtをフォーマットする
fmt.format(x, y, z)	書式fmtをx,y,zで整形する
fmt.format(x, y, z)	x,y,zでfmtをフォーマットする
fmt.format(x, y, z)	x,y,zでfmt書式をフォーマットする
fmt.format(x, y, z)	x,y,zでテンプレートfmtを整形する
fmt.format(x, y, z)	テンプレfmtをx,y,zでフォーマットする
fmt.format(x, y, z)	fmtをx,y,zでフォーマットする
s.isalnum()	文字列sが英数字か
if s.isalnum():	文字列sが英数字の場合
s.isalnum()	sが英数字か否か
if s.isalnum():	もしsが英数字ならば
not s.isalnum()	文字列sが英数字でないか
not s.isalnum()	sが英数字でないか
if s.isalnum() :	もし文字列sが英数字とき
if s.isalnum() :	sが英数字場合
if not s.isalnum() :	文字列sが英数字でないとき
if not s.isalnum() :	sが英数字でないとき
s.isalpha()	文字列sが英字か
if s.isalpha():	文字列sが英字のとき
s.isalpha()	sがアルファベットかどうか
if s.isalpha():	sがアルファベットならば
s.isalpha()	文字列sがアルファベットか否か
if s.isalpha():	文字列sがアルファベットのとき
s.isalpha()	sが英字か
if s.isalpha():	sが英字ならば
not s.isalpha()	文字列sが英字でないかどうか
not s.isalpha()	sがアルファベットでないかどうか
not s.isalpha()	文字列sがアルファベットでないか
not s.isalpha()	sが英字でないか
if s.isalpha() :	文字列sが英字とき
if s.isalpha() :	sがアルファベット場合
if s.isalpha() :	もし文字列sがアルファベットならば
if s.isalpha() :	sが英字とき
if not s.isalpha() :	もし文字列sが英字でない場合
if not s.isalpha() :	もしsがアルファベットでないならば
if not s.isalpha() :	文字列sがアルファベットでないとき
if not s.isalpha() :	sが英字でないとき
s.isascii()	文字列sがASCII文字か
if s.isascii():	文字列sがASCII文字ならば
s.isascii()	sがASCII文字か
if s.isascii():	sがASCII文字のとき
not s.isascii()	文字列sがASCII文字でないか
not s.isascii()	sがASCII文字でないかどうか
if s.isascii() :	文字列sがASCII文字場合
if s.isascii() :	sがASCII文字ならば
if not s.isascii() :	もし文字列sがASCII文字でないとき
if not s.isascii() :	もしsがASCII文字でない場合
s.isdecimal()	sが数字か否か
if s.isdecimal():	sが数字の場合
s.isdecimal()	文字列sが数字か
if s.isdecimal():	文字列sが数字の場合
not s.isdecimal()	sが数字でないか
not s.isdecimal()	文字列sが数字でないか否か
if s.isdecimal() :	もしsが数字ならば
if s.isdecimal() :	もし文字列sが数字とき
if not s.isdecimal() :	sが数字でないならば
if not s.isdecimal() :	文字列sが数字でな場合
s.isdigit()	文字列sが数字かどうか
if s.isdigit():	文字列sが数字の場合
s.isdigit()	sが数字か否か
if s.isdigit():	sが数字の場合
not s.isdigit()	文字列sが数字でないか
not s.isdigit()	sが数字でないか
if s.isdigit() :	文字列sが数字ならば
if s.isdigit() :	もしsが数字ならば
if not s.isdigit() :	もし文字列sが数字でないとき
if not s.isdigit() :	もしsが数字でないとき
s.isidentifier()	文字列sが識別子文字か否か
if s.isidentifier():	もし文字列sが識別子文字ならば
s.isidentifier()	sが識別子文字か否か
if s.isidentifier():	sが識別子文字の場合
not s.isidentifier()	文字列sが識別子文字でないか
not s.isidentifier()	sが識別子文字でないか否か
if s.isidentifier() :	文字列sが識別子文字場合
if s.isidentifier() :	もしsが識別子文字ならば
if not s.isidentifier() :	もし文字列sが識別子文字でない場合
if not s.isidentifier() :	もしsが識別子文字でな場合
s.islower()	sが英小文字か
if s.islower():	sが英小文字の場合
s.islower()	文字列sが小文字か
if s.islower():	文字列sが小文字のとき
s.islower()	sが小文字か
if s.islower():	もしsが小文字ならば
not s.islower()	sが英小文字でないか否か
not s.islower()	文字列sが小文字でないか
not s.islower()	sが小文字でないか
if s.islower() :	もしsが英小文字ならば
if s.islower() :	文字列sが小文字とき
if s.islower() :	sが小文字場合
if not s.islower() :	sが英小文字でなとき
if not s.islower() :	文字列sが小文字でないとき
if not s.islower() :	sが小文字でない場合
s.isnumeric()	文字列sが数字かどうか
if s.isnumeric():	もし文字列sが数字ならば
s.isnumeric()	sが数字か否か
if s.isnumeric():	もしsが数字ならば
not s.isnumeric()	文字列sが数字でないか
not s.isnumeric()	sが数字でないかどうか
if s.isnumeric() :	もし文字列sが数字ならば
if s.isnumeric() :	sが数字ならば
if not s.isnumeric() :	もし文字列sが数字でないならば
if not s.isnumeric() :	もしsが数字でないならば
s.isprintable()	sが印字可能か
if s.isprintable():	sが印字可能の場合
s.isprintable()	文字列sが印字可能か
if s.isprintable():	文字列sが印字可能ならば
s.isprintable()	sが印字できるか
if s.isprintable():	sが印字できるとき
s.isprintable()	文字列sが印字できるか
if s.isprintable():	文字列sが印字できるとき
not s.isprintable()	sが印字可能でないか
not s.isprintable()	文字列sが印字可能でないかどうか
not s.isprintable()	sが印字できないか
not s.isprintable()	文字列sが印字できないか否か
if s.isprintable() :	もしsが印字可能場合
if s.isprintable() :	もし文字列sが印字可能とき
if s.isprintable() :	sが印字できた場合
if s.isprintable() :	文字列sが印字できる場合
if s.isprintable() :	文字列sが印字できたとき
if not s.isprintable() :	sが印字可能でない場合
if not s.isprintable() :	もし文字列sが印字可能でないならば
if not s.isprintable() :	もしsが印字できない場合
if not s.isprintable() :	もしsが印字できなければ
if not s.isprintable() :	もしsが印字できなかったら
if not s.isprintable() :	もし文字列sが印字できな場合
if not s.isprintable() :	もし文字列sが印字できれば
if not s.isprintable() :	文字列sが印字できたならば
s.isspace()	sが空白か
if s.isspace():	sが空白の場合
s.isspace()	文字列sが空白か
if s.isspace():	文字列sが空白のとき
not s.isspace()	sが空白でないか否か
not s.isspace()	文字列sが空白でないか
if s.isspace() :	もしsが空白とき
if s.isspace() :	もし文字列sが空白ならば
if not s.isspace() :	もしsが空白でなとき
if not s.isspace() :	もし文字列sが空白でないならば
s.istitle()	文字列sがタイトルケース文字列か
if s.istitle():	もし文字列sがタイトルケース文字列ならば
s.istitle()	sがタイトルケース文字列か
if s.istitle():	sがタイトルケース文字列ならば
not s.istitle()	文字列sがタイトルケース文字列でないかどうか
not s.istitle()	sがタイトルケース文字列でないかどうか
if s.istitle() :	もし文字列sがタイトルケース文字列場合
if s.istitle() :	もしsがタイトルケース文字列とき
if not s.istitle() :	文字列sがタイトルケース文字列でないならば
if not s.istitle() :	もしsがタイトルケース文字列でないとき
s.isupper()	sが英大文字か
if s.isupper():	sが英大文字のとき
s.isupper()	sが大文字か
if s.isupper():	sが大文字のとき
s.isupper()	文字列sが英大文字かどうか
if s.isupper():	文字列sが英大文字のとき
not s.isupper()	sが英大文字でないか
not s.isupper()	sが大文字でないか否か
not s.isupper()	文字列sが英大文字でないか否か
if s.isupper() :	もしsが英大文字場合
if s.isupper() :	sが大文字ならば
if s.isupper() :	もし文字列sが英大文字ならば
if not s.isupper() :	sが英大文字でないとき
if not s.isupper() :	sが大文字でなならば
if not s.isupper() :	文字列sが英大文字でなならば
s.join(a)	文字列sでaリストの各要素を連結する
s.join(a)	aの各要素を文字列sで結合する
s.join(a)	リストaのそれぞれをsで連結する
s.join(a)	sでリストaのそれぞれを連結する
s.join(a)	sでaリストのそれぞれを結合する
s.join(a)	sでaリストの各要素を結合する
s.join(a)	リストaの各要素をsでジョインする
s.join(a)	リストaの各要素をsで連結する
s.join(a)	aのそれぞれをs文字列で連結する
s.join(a)	sでaの各要素を連結する
s.join(a)	文字列sでaの各要素をジョインする
s.join(a)	sでaの各要素を結合する
s.join(a)	sでaのそれぞれを結合する
s.join(a)	リストaのそれぞれを文字列sで連結する
s.join(a)	aの各要素をs文字列で結合する
s.join(a)	文字列sでリストaのそれぞれをジョインする
s.join(a)	aのそれぞれをsで結合する
s.join(str(x) for x in a)	aのそれぞれを文字列に変換し、文字列sで連結する
s.join(str(x) for x in a)	aのそれぞれを文字列に変換し、s文字列で結合する
s.join(str(x) for x in a)	aのそれぞれを文字列に変換し、文字列sで結合する
s.join(str(x) for x in a)	リストaのそれぞれを文字列に変換し、sで結合する
s.join(str(x) for x in a)	リストaのそれぞれを文字列に変換し、文字列sで結合する
s.join(str(x) for x in a)	リストaの各要素を文字列に変換し、sで連結する
s.join(str(x) for x in a)	aの各要素を文字列に変換し、文字列sで連結する
s.join(str(x) for x in a)	aのそれぞれを文字列に変換し、sで連結する
s.join(str(x) for x in a)	リストaのそれぞれを文字列に変換し、s文字列で結合する
s.join(str(x) for x in a)	リストaのそれぞれを文字列に変換し、文字列sでジョインする
s.join(str(x) for x in a)	aのそれぞれを文字列に変換し、sでジョインする
s.join(str(x) for x in a)	リストaの各要素を文字列に変換し、文字列sで結合する
s.join(str(x) for x in a)	リストaの各要素を文字列に変換し、sでジョインする
s.join(str(x) for x in a)	aのそれぞれを文字列に変換し、sで結合する
s.join(str(x) for x in a)	リストaの各要素を文字列に変換し、s文字列で結合する
s.join(str(x) for x in a)	aのそれぞれを文字列に変換し、s文字列でジョインする
''.join(x)	リストaのそれぞれを文字列に変換し、結合する
''.join(x)	aの各要素を文字列に変換し、結合する
''.join(x)	リストaの各要素を文字列に変換し、連結する
''.join(x)	リストaの各要素を文字列に変換し、ジョインする
''.join(x)	aの各要素を文字列に変換し、連結する
''.join(x)	aのそれぞれを文字列に変換し、連結する
''.join(x)	リストaのそれぞれを文字列に変換し、ジョインする
''.join(x)	aのそれぞれを文字列に変換し、結合する
s.lower()	文字列sを小文字化する
s.lower()	sを英小文字化する
s.lower()	文字列sを英小文字化する
s.lower()	sを小文字化する
s.upper()	sを英大文字化する
s.upper()	文字列sを英大文字化する
s.upper()	sを大文字化する
s.upper()	文字列sを大文字化する
s.lstrip()	文字列sの空白を前から削除する
s.lstrip()	文字列sの不要な空白を最初から取り除く
s.lstrip()	文字列sの先頭から余分な空白を消す
s.lstrip()	文字列sの余分な空白を最初から取り除く
s.lstrip()	文字列sの空白を前から取り除く
s.lstrip()	文字列sの空白を先頭から消す
s.lstrip()	sの不要な空白を前から取り除く
s.lstrip()	文字列sの余分な空白を前から除去する
s.lstrip()	sの前から空白を除去する
s.lstrip()	sの空白を先頭から取り除く
s.lstrip()	文字列sの最初から空白を取り除く
s.lstrip()	文字列sの先頭から不要な空白を除去する
s.lstrip()	sの不要な空白を最初から消す
s.lstrip()	文字列sの空白を先頭から除去する
s.lstrip()	sの空白を最初から消す
s.lstrip()	文字列sの不要な空白を先頭から取り除く
s.lstrip()	sの前から空白を取り除く
s.lstrip()	sの不要な空白を先頭から取り除く
s.lstrip()	sの先頭から余分な空白を除去する
s.lstrip()	文字列sの先頭から空白を削除する
s.lstrip()	文字列sの空白を先頭から取り除く
s.lstrip()	文字列sの空白を最初から消す
s.lstrip()	文字列sの最初から空白を削除する
s.lstrip()	sの前から空白を削除する
s.lstrip()	文字列sの空白を最初から削除する
s.lstrip(chars)	文字列sのcharsを先頭から消す
s.lstrip(chars)	sの前からcharsを削除する
s.lstrip(chars)	sの先頭からcharsを除去する
s.lstrip(chars)	sのcharsを前から消す
s.lstrip(chars)	文字列sのcharsを最初から取り除く
s.lstrip(chars)	文字列sのcharsを前から除去する
s.lstrip(chars)	文字列sの最初からcharsを削除する
s.lstrip(chars)	文字列sの最初からcharsを除去する
s.lstrip(chars)	文字列sの最初からcharsを消す
s.lstrip(chars)	文字列sの前からcharsを取り除く
s.lstrip(chars)	文字列sの先頭からcharsを取り除く
s.lstrip(chars)	文字列sのcharsを前から消す
s.lstrip(chars)	sのcharsを最初から取り除く
s.lstrip(chars)	sの前からcharsを取り除く
s.lstrip(chars)	sの先頭からcharsを削除する
s.lstrip(chars)	文字列sのcharsを最初から削除する
s.lstrip(chars)	sの前からcharsを消す
s.lstrip(chars)	文字列sの最初からcharsを取り除く
s.lstrip(chars)	sの先頭からcharsを取り除く
s.rstrip()	文字列sの後ろから空白を取り除く
s.rstrip()	文字列sの空白を最後から取り除く
s.rstrip()	sの空白を後ろから取り除く
s.rstrip()	文字列sの末尾から空白を除去する
s.rstrip()	文字列sの後ろから空白を除去する
s.rstrip()	文字列sの最後から空白を除去する
s.rstrip()	文字列sの最後から空白を取り除く
s.rstrip()	文字列sの空白を末尾から取り除く
s.rstrip()	sの後ろから空白を削除する
s.rstrip()	sの末尾から空白を削除する
s.rstrip()	文字列sの空白を後ろから削除する
s.rstrip()	文字列sの空白を後ろから取り除く
s.rstrip()	sの最後から空白を除去する
s.rstrip()	sの末尾から空白を取り除く
s.rstrip(chars)	sのcharsを最後から除去する
s.rstrip(chars)	sのcharsを後ろから取り除く
s.rstrip(chars)	文字列sの末尾からcharsを取り除く
s.rstrip(chars)	文字列sの後ろからcharsを取り除く
s.rstrip(chars)	文字列sのcharsを後ろから取り除く
s.rstrip(chars)	sの最後からcharsを取り除く
s.rstrip(chars)	文字列sのcharsを最後から取り除く
s.rstrip(chars)	sの最後からcharsを削除する
s.rstrip(chars)	文字列sの最後からcharsを取り除く
s.rstrip(chars)	sの後ろからcharsを除去する
s.rstrip(chars)	文字列sの後ろからcharsを消す
s.rstrip(chars)	文字列sの末尾からcharsを消す
s.rstrip(chars)	文字列sのcharsを末尾から削除する
s.rstrip(chars)	sの末尾からcharsを消す
s.strip()	sの前と空白を後ろから除去する
s.strip()	文字列sの最初と末尾から空白を消す
s.strip()	文字列sの前と後ろから空白を除去する
s.strip()	sの前と最後から空白を削除する
s.strip()	sの最初と後ろから空白を取り除く
s.strip()	sの最初と空白を最後から取り除く
s.strip()	文字列sの最初と末尾から空白を取り除く
s.strip()	文字列sの最初と後ろから余分な空白を削除する
s.strip()	文字列sの前と空白を末尾から削除する
s.strip()	sの前と末尾から空白を取り除く
s.strip()	sの先頭と不要な空白を後ろから取り除く
s.strip()	sの前と空白を末尾から取り除く
s.strip()	sの先頭と最後から空白を消す
s.strip()	sの最初と最後から空白を消す
s.strip()	文字列sの先頭と後ろから余分な空白を取り除く
s.strip()	文字列sの前と空白を後ろから消す
s.strip()	文字列sの前と末尾から空白を削除する
s.strip()	sの最初と空白を最後から除去する
s.strip()	sの先頭と空白を最後から除去する
s.strip()	sの先頭と最後から空白を除去する
s.strip()	文字列sの先頭と末尾から空白を削除する
s.strip()	文字列sの先頭と後ろから空白を取り除く
s.strip()	sの前と末尾から空白を削除する
s.strip()	sの最初と余分な空白を最後から消す
s.strip()	sの先頭と空白を末尾から取り除く
s.strip()	文字列sの前と最後から空白を取り除く
s.strip()	文字列sの前と空白を後ろから取り除く
s.strip()	sの先頭と空白を後ろから消す
s.strip()	文字列sの先頭と空白を最後から取り除く
s.strip()	文字列sの先頭と不要な空白を最後から取り除く
s.strip()	sの先頭と空白を最後から消す
s.strip()	sの最初と空白を後ろから削除する
s.strip()	文字列sの前と後ろから空白を取り除く
s.strip()	文字列sの最初と最後から空白を消す
s.strip()	文字列sの前と空白を後ろから削除する
s.strip()	sの先頭と末尾から不要な空白を消す
s.strip()	sの前と最後から空白を除去する
s.strip()	sの前と末尾から空白を除去する
s.strip()	sの最初と空白を末尾から取り除く
s.strip()	文字列sの最初と空白を末尾から取り除く
s.strip()	sの先頭と末尾から不要な空白を取り除く
s.strip()	文字列sの最初と不要な空白を末尾から消す
s.strip()	文字列sの最初と不要な空白を最後から削除する
s.strip()	文字列sの先頭と末尾から空白を取り除く
s.strip()	文字列sの先頭と余分な空白を末尾から消す
s.strip()	文字列sの先頭と末尾から余分な空白を消す
s.strip()	文字列sの最初と不要な空白を末尾から取り除く
s.strip()	sの先頭と末尾から空白を取り除く
s.strip()	文字列sの先頭と後ろから空白を削除する
s.strip()	sの最初と空白を後ろから除去する
s.strip()	文字列sの前と空白を最後から取り除く
s.strip()	文字列sの先頭と空白を末尾から削除する
s.strip()	sから空白を取り除く
s.strip()	空白を文字列sから削除する
s.strip()	不要な空白をsから除去する
s.strip()	文字列sから不要な空白を消す
s.strip()	空白をs文字列から除去する
s.strip()	余分な空白をs文字列から消す
s.strip()	空白をsから取り除く
s.strip()	sから不要な空白を削除する
s.strip()	文字列sから余分な空白を消す
s.strip()	余分な空白をs文字列から除去する
s.strip()	文字列sから不要な空白を除去する
s.strip()	空白をs文字列から削除する
s.strip()	不要な空白をs文字列から取り除く
s.strip()	sから空白を除去する
s.strip()	文字列sから空白を削除する
s.strip()	文字列sから空白を取り除く
s.strip()	文字列sから空白を除去する
s.strip()	sから空白を消す
s.strip(chars)	文字列sの先頭と最後からcharsを取り除く
s.strip(chars)	sの先頭とcharsを最後から取り除く
s.strip(chars)	文字列sの先頭とcharsを末尾から取り除く
s.strip(chars)	文字列sの前と末尾からcharsを消す
s.strip(chars)	文字列sの前とcharsを後ろから取り除く
s.strip(chars)	sの先頭とcharsを最後から削除する
s.strip(chars)	sの先頭と末尾からcharsを消す
s.strip(chars)	sの最初と末尾からcharsを取り除く
s.strip(chars)	文字列sの最初とcharsを末尾から削除する
s.strip(chars)	sの前と末尾からcharsを取り除く
s.strip(chars)	sの前とcharsを末尾から除去する
s.strip(chars)	文字列sの前とcharsを最後から取り除く
s.strip(chars)	sの最初とcharsを最後から除去する
s.strip(chars)	文字列sの前とcharsを後ろから削除する
s.strip(chars)	sの最初と末尾からcharsを除去する
s.strip(chars)	文字列sの最初と後ろからcharsを除去する
s.strip(chars)	文字列sの先頭とcharsを末尾から除去する
s.strip(chars)	文字列sの先頭とcharsを後ろから取り除く
s.strip(chars)	文字列sの最初とcharsを末尾から取り除く
s.strip(chars)	文字列sの最初と末尾からcharsを消す
s.strip(chars)	sの前とcharsを後ろから除去する
s.strip(chars)	sの前と最後からcharsを消す
s.strip(chars)	文字列sの先頭とcharsを最後から削除する
s.strip(chars)	文字列sの前と最後からcharsを取り除く
s.strip(chars)	sの前とcharsを最後から削除する
s.strip(chars)	文字列sの先頭と末尾からcharsを除去する
s.strip(chars)	sの最初とcharsを末尾から取り除く
s.strip(chars)	sの先頭とcharsを後ろから削除する
s.strip(chars)	文字列sの最初と末尾からcharsを取り除く
s.strip(chars)	sの先頭と最後からcharsを消す
s.strip(chars)	文字列sの最初とcharsを最後から消す
s.strip(chars)	sの先頭と後ろからcharsを消す
s.strip(chars)	sの前と末尾からcharsを消す
s.strip(chars)	文字列sの最初とcharsを後ろから削除する
s.partition(sep)	sepで文字列sを区切る
s.partition(sep)	sepでsを区切る
s.partition(sep)	文字列sをsepで分割する
s.partition(sep)	sをsepで区切る
s.partition(sep)	sepで文字列sを分割する
s.partition(sep)	文字列sをsepで区切る
s.partition(sep)	文字列sをsepでパーティションする
s.removeprefix(prefix)	文字列sから接頭辞prefixを除去する
s.removeprefix(prefix)	文字列sから接頭辞prefixを消す
s.removeprefix(prefix)	sから接頭辞prefixを取り除く
s.removeprefix(prefix)	文字列sから接頭辞prefixを削除する
s.removeprefix(prefix)	文字列sから接頭辞prefixを取り除く
s.removeprefix(prefix)	sから接頭辞prefixを削除する
s.removeprefix(prefix)	sの先頭からprefix文字列を取り除く
s.removeprefix(prefix)	文字列sの前から文字列prefixを消す
s.removeprefix(prefix)	文字列sの最初からprefix文字列を取り除く
s.removeprefix(prefix)	文字列sの先頭からprefix文字列を除去する
s.removeprefix(prefix)	文字列sの先頭から文字列prefixを除去する
s.removeprefix(prefix)	sの先頭からprefix文字列を除去する
s.removeprefix(prefix)	sの最初からprefix文字列を消す
s.removeprefix(prefix)	sの先頭から文字列prefixを削除する
s.removeprefix(prefix)	文字列sの最初から文字列prefixを取り除く
s.removeprefix(prefix)	sの最初からprefixを消す
s.removeprefix(prefix)	文字列sの最初からprefixを取り除く
s.removeprefix(prefix)	文字列sの先頭からprefix文字列を取り除く
s.removeprefix(prefix)	文字列sの最初から文字列prefixを除去する
s.removeprefix(prefix)	sの先頭からprefixを取り除く
s.removeprefix(prefix)	sの先頭から文字列prefixを取り除く
s.removeprefix(prefix)	文字列sの前からprefixを取り除く
s.removeprefix(prefix)	sの前から文字列prefixを取り除く
s.removeprefix(prefix)	sの最初から文字列prefixを取り除く
s.removeprefix(prefix)	文字列sの前から文字列prefixを削除する
s.removeprefix(prefix)	文字列sの最初から文字列prefixを削除する
s.removeprefix(prefix)	sの前からprefixを取り除く
s.removeprefix(prefix)	文字列sの最初から文字列prefixを消す
s.removeprefix(prefix)	文字列sの前から文字列prefixを除去する
s.removeprefix(prefix)	文字列sの先頭から文字列prefixを消す
s.removesuffix(suffix)	文字列sから接尾辞suffixを取り除く
s.removesuffix(suffix)	sから接尾辞suffixを除去する
s.removesuffix(suffix)	sから接尾辞suffixを削除する
s.removesuffix(suffix)	文字列sから接尾辞suffixを削除する
s.removesuffix(suffix)	文字列sから接尾辞suffixを消す
s.removesuffix(suffix)	sから接尾辞suffixを取り除く
s.removesuffix(suffix)	sから接尾辞suffixを消す
s.removesuffix(suffix)	文字列sから接尾辞suffixを除去する
s.removesuffix(suffix)	sの最後からsuffixを消す
s.removesuffix(suffix)	文字列sの後ろからsuffixを取り除く
s.removesuffix(suffix)	sの後ろからsuffixを除去する
s.removesuffix(suffix)	文字列sの末尾からsuffixを取り除く
s.removesuffix(suffix)	文字列sの最後からsuffixを取り除く
s.removesuffix(suffix)	sの末尾からsuffixを取り除く
s.removesuffix(suffix)	sの末尾からsuffixを消す
s.removesuffix(suffix)	文字列sの後ろからsuffixを削除する
s.removesuffix(suffix)	sの最後からsuffixを取り除く
s.removesuffix(suffix)	文字列sの末尾からsuffixを除去する
s.replace(sub, s2)	s中のsubを全て
s.replace(sub, s2)	s中のsubを
s.replace(sub, s2)	s内のsubを
s.replace(sub, s2)	文字列s内のsubを全て
s.replace(sub, s2)	sのsubを全て
s.replace(sub, s2)	文字列s内のsubを
s.replace(sub, s2)	文字列s中のsubを
s.replace(sub, s2)	文字列sのsubを
s.replace(sub, '')	文字列s中のsubを
s.replace(sub, '')	s内のsubを
s.replace(sub, '')	sのsubを
s.replace(sub, '')	文字列s内のsubを
s.replace(sub, '')	文字列sのsubを
s.replace(sub, '')	s中のsubを
s.split()	空白で文字列sを分割する
s.split()	空白でsをスプリットする
s.split()	sを空白でスプリットする
s.split()	文字列sを空白で区切る
s.split()	空白でs文字列を区切る
s.split()	空白でs文字列をスプリットする
s.split()	空白で文字列sを分ける
s.split()	空白で文字列sをスプリットする
s.split()	sを空白で分ける
s.split()	空白でsを分割する
s.split()	sを空白で分割する
s.split()	空白で区切って文字列sをリストにする
s.split()	空白で区切ってs文字列をリストにする
s.split()	sを空白で区切ってリストにする
s.split()	文字列sを空白で区切ってリストにする
s.split(sep)	区切り文字sepでs文字列をスプリットする
s.split(sep)	セパレータsepでsを分ける
s.split(sep)	sepで文字列sを分ける
s.split(sep)	sepでs文字列を分ける
s.split(sep)	sをsep区切り文字でスプリットする
s.split(sep)	sepでs文字列をスプリットする
s.split(sep)	sepでsを分ける
s.split(sep)	区切り文字sepでs文字列を分割する
s.split(sep)	sをsep区切り文字で分割する
s.split(sep)	文字列sをセパレータsepで分ける
s.split(sep)	区切り記号sepで文字列sを区切る
s.split(sep)	区切り文字sepでsをスプリットする
s.split(sep)	区切り文字sepで文字列sを分割する
s.split(sep)	sepで文字列sを分割する
s.split(sep)	文字列sを区切り記号sepで区切る
s.split(sep)	sをセパレータsepで区切る
s.split(sep)	区切り記号sepでsを区切る
s.split(sep)	セパレータsepでsを分割する
s.split(sep)	文字列sをセパレータsepで分割する
s.split(sep)	文字列sをsepで分割する
s.split(sep)	区切り文字sepでsを分割する
s.split(sep)	文字列sをsep区切り文字で分ける
s.split(sep)	文字列sをsepで区切る
s.split(sep)	sを区切り文字sepで分ける
s.split(sep)	区切り文字sepで文字列sを区切る
s.split(sep)	文字列sをsepセパレータで区切る
s.split(sep)	文字列sをsepセパレータでスプリットする
s.split(sep)	sをセパレータsepで分割する
s.split(sep)	sをsepで分割する
s.split(sep)	文字列sをsepで区切ってリストにする
s.split(sep)	sepで区切ってs文字列をリストにする
s.split(sep)	sをsepで区切ってリストにする
s.split(sep)	sepで区切って文字列sをリストにする
s.rsplit(sep)	区切り文字sepでs文字列を右スプリットする
s.rsplit(sep)	文字列sをsepで右分割する
s.rsplit(sep)	セパレータsepでs文字列を右スプリットする
s.rsplit(sep)	sをセパレータsepで右分割する
s.rsplit(sep)	文字列sを区切り文字sepで右スプリットする
s.rsplit(sep)	sを区切り文字sepで右から分ける
s.rsplit(sep)	セパレータsepでsを右から分ける
s.rsplit(sep)	文字列sを区切り記号sepで右分割する
s.rsplit(sep)	文字列sをsep区切り文字で右から区切る
s.rsplit(sep)	区切り文字sepでs文字列を右から区切る
s.rsplit(sep)	区切り文字sepでs文字列を右分割する
s.rsplit(sep)	sepでsを右分割する
s.rsplit(sep)	sをsepで右から区切る
s.rsplit(sep)	区切り文字sepでsを右スプリットする
s.rsplit(sep)	文字列sをセパレータsepで右スプリットする
s.rsplit(sep)	文字列sを区切り記号sepで右から分ける
s.rsplit(sep)	区切り文字sepでs文字列を右から分ける
s.rsplit(sep)	セパレータsepでsを右分割する
s.rsplit(sep)	区切り文字sepでsを右から分ける
s.rsplit(sep)	セパレータsepでs文字列を右から区切る
s.rsplit(sep)	文字列sをsepで右から分ける
s.rsplit(sep)	sepでs文字列を右から区切る
s.rsplit(sep)	セパレータsepでs文字列を右分割する
s.rsplit(sep)	sepでsを右スプリットする
s.rsplit(sep)	文字列sをsep区切り記号で右分割する
s.rsplit(sep)	文字列sを区切り文字sepで右から分ける
s.rsplit(sep)	文字列sをsepセパレータで右から分ける
s.rsplit(sep)	区切り記号sepでsを右から分ける
s.rsplit(sep)	区切り文字sepで文字列sを右から区切る
s.rsplit(sep)	文字列sをsep区切り文字で右スプリットする
s.rsplit(sep)	区切り記号sepでsを右から区切る
s.rsplit(sep)	sをsep区切り文字で右から分ける
s.rsplit(sep)	sをsep区切り文字で右分割する
s.rsplit(sep)	sを区切り記号sepで右分割する
s.split()[0]	文字列sを空白で区切った最初の部分
s.split()[0]	sを空白で区切った最初の文字列
s.split()[0]	文字列sを空白で区切った最初の文字列
s.split()[0]	sを空白で区切った最初の部分
s.split()[-1]	sを空白で区切った最後の文字列
s.split()[-1]	sを空白で区切った最後の部分
s.split()[-1]	文字列sを空白で区切った最後の部分
s.split()[-1]	文字列sを空白で区切った最後の文字列
s.split(sep)[0]	文字列sをsepで区切った最初の部分
s.split(sep)[0]	文字列sを区切り文字sepで区切った最初の部分
s.split(sep)[0]	sをセパレータsepで区切った最初の部分
s.split(sep)[0]	文字列sをsep区切り記号で区切った最初の文字列
s.split(sep)[0]	sをsep区切り文字で区切った最初の文字列
s.split(sep)[0]	文字列sをsepで区切った最初の文字列
s.split(sep)[0]	sをsepで区切った最初の部分
s.split(sep)[0]	sをsepセパレータで区切った最初の文字列
s.split(sep)[0]	sを区切り記号sepで区切った最初の文字列
s.split(sep)[0]	sをsepで区切った最初の文字列
s.split(sep)[0]	sをセパレータsepで区切った最初の文字列
s.split(sep)[-1]	sをsepで区切った最後の部分
s.split(sep)[-1]	sをsep区切り文字で区切った最後の文字列
s.split(sep)[-1]	sをsepセパレータで区切った最後の文字列
s.split(sep)[-1]	sをsepで区切った最後の文字列
s.split(sep)[-1]	文字列sをセパレータsepで区切った最後の部分
s.split(sep)[-1]	文字列sをsepで区切った最後の部分
s.split(sep)[-1]	sをsep区切り記号で区切った最後の部分
@option maxsplit = x	さらに、最大分割回数はxとする
s.translate(ct)	変換表ctでsを変換する
s.translate(ct)	変換表ctでsの文字を変換する
s.translate(ct)	変換表ctで文字列sの文字を変換する
s.translate(ct)	sをctで変換する
s.translate(ct)	ctでsの文字を変換する
s.translate(ct)	ctでsを変換する
s.translate(ct)	ctで文字列sの文字を変換する
s.translate(ct)	sを変換表ctで変換する
s.translate(ct)	ctでs文字列の文字を翻訳する
s.translate(ct)	文字列sをct変換表で変換する
s.translate(ct)	ctでs文字列の文字を変換する
s.translate(ct)	sをctで翻訳する
s.translate(ct)	ctでs文字列を翻訳する
s.zfill(x)	文字列sの大きさをxにする
s.zfill(x)	文字列sの長さをxにする
s.zfill(x)	sの長さをxにする
s.zfill(x)	文字列sのサイズをxにする
s.zfill(x)	sのサイズをxにする
s.zfill(x)	文字列sを長さxになるように'0'文字で埋める
s.zfill(x)	文字列sを幅xになるように'0'文字で埋める
s.zfill(x)	長さxになるようにsを'0'文字で埋める
s.zfill(x)	幅xになるように文字列sを'0'文字で埋める
s.zfill(x)	長さxになるように文字列sを'0'文字で埋める
s.zfill(x)	sを幅xになるように'0'文字で埋める
s.zfill(x)	幅xになるようにsを'0'文字で埋める
random.random()	乱数を生成する
random.choice(list)	リストlistからひとつランダムに選ぶ
random.choice(list)	listからひとつランダムに選ぶ
random.shuffle(list)	リストlistをランダムにシャッフルする
random.shuffle(list)	リストlistをシャッフルする
random.shuffle(list)	listリストをシャッフルする
random.shuffle(list)	listをランダムにシャッフルする
random.shuffle(list)	listをシャッフルする
random.shuffle(list)	ランダムにリストlistをシャッフルする
random.sample(list)	リストlistからサンプルを選ぶ
random.sample(list)	listからサンプルを選ぶ
random.sample(list, n)	リストlistからn個、サンプルを選ぶ
random.sample(list, n)	listからn個、サンプリングする
random.sample(list, n)	リストlistからn個、サンプリングする
random.sample(list, n)	listからn個、サンプルを選ぶ
random.sample(list, n)	listからn個、ランダムに選ぶ
random.sample(list, n)	リストlistからn個、ランダムに選ぶ
random.randrange(x)	0からx未満までのランダムな整数
random.randrange(x)	0からx未満までのランダム整数
random.randrange(x, y)	xからyまでのランダムな整数
random.randrange(x, y)	xからyまでの整数乱数
random.randrange(x, y)	xからy未満までのランダム整数
random.randrange(x, y)	xからyまでのランダム整数
random.randrange(x, y)	xからy未満までのランダムな整数
random.randrange(x, y)	xからy未満までの整数乱数
random.randint(x, y)	xからyまでの整数乱数
random.randint(x, y)	xからyまでのランダムな整数
random.randint(x, y)	xからyまでのランダム整数
random.seed()	乱数シードを初期化する
random.seed(x)	乱数シードをxで初期化する
random.seed(x)	乱数生成をxで初期化する
math.ceil(x)	xの切り上げ整数値
math.comb(x)	xのコンビネーション
math.copysign(x, y)	xの符号をyと同じにする
math.fabs(x)	浮動小数点数xの絶対値
math.factorial(x)	xの階乗
math.floor(x)	xの切り捨て整数値
math.frexp(x)[0]	xの仮数部
math.frexp(x)[1]	xの指数部
math.gcd(x, y)	xとyの最大公約数
math.lcm(x, y)	xとyの最小公倍数
math.isclose(x, y)	xとyが近いか否か
if math.isclose(x, y):	xとyが近いとき
math.isclose(x, y)	xとyがほぼ等しいか
if math.isclose(x, y):	xとyがほぼ等しい場合
math.isclose(x, y)	xとyが等しいとみなせるか
if math.isclose(x, y):	もしxとyが等しいとみなせるならば
math.isclose(x, y)	xとyが十分に近いかどうか
if math.isclose(x, y):	xとyが十分に近いとき
math.isclose(x, y)	xとyが近似できるかどうか
if math.isclose(x, y):	xとyが近似できる場合
not math.isclose(x, y)	xとyが近くないか
not math.isclose(x, y)	xとyがほぼ等しくないか
not math.isclose(x, y)	xとyが等しいとみなせないか
not math.isclose(x, y)	xとyが十分に近くないかどうか
not math.isclose(x, y)	xとyが近似できないかどうか
if math.isclose(x, y) :	もしxとyが近いとき
if math.isclose(x, y) :	もしxとyが近ければ
if math.isclose(x, y) :	xとyが近かったとき
if math.isclose(x, y) :	もしxとyがほぼ等しい場合
if math.isclose(x, y) :	xとyがほぼ等しければ
if math.isclose(x, y) :	もしxとyがほぼ等しかったら
if math.isclose(x, y) :	もしxとyが等しいとみなせれば
if math.isclose(x, y) :	もしxとyが十分に近ければ
if math.isclose(x, y) :	xとyが十分に近かったなら
if math.isclose(x, y) :	もしxとyが近似できれば
if math.isclose(x, y) :	xとyが近似できたなら
if not math.isclose(x, y) :	xとyが近くないとき
if not math.isclose(x, y) :	xとyが近くなければ
if not math.isclose(x, y) :	もしxとyがほぼ等しくない場合
if not math.isclose(x, y) :	もしxとyがほぼ等しくなければ
if not math.isclose(x, y) :	xとyがほぼ等しくなかった場合
if not math.isclose(x, y) :	もしxとyが等しいとみなせない場合
if not math.isclose(x, y) :	xとyが等しいとみなせなければ
if not math.isclose(x, y) :	もしxとyが近似できないならば
if not math.isclose(x, y) :	もしxとyが近似できなければ
if not math.isclose(x, y) :	xとyが近似できなかったとき
while math.isclose(x, y) :	xとyが近い間
while math.isclose(x, y) :	xとyが等しいとみなせる間
while math.isclose(x, y) :	xとyが近似できる間
while not math.isclose(x, y) :	xとyがほぼ等しくない間
while not math.isclose(x, y) :	xとyが等しいとみなせない間
while not math.isclose(x, y) :	xとyが近似できない間
math.isclose(x, y)	xがyに近いか否か
if math.isclose(x, y):	xがyに近い場合
math.isclose(x, y)	xがyに近似できるか
if math.isclose(x, y):	もしxがyに近似できるならば
math.isclose(x, y)	xがyにほぼ等しいか否か
if math.isclose(x, y):	xがyにほぼ等しいとき
math.isclose(x, y)	xがyに等しいとみなせるか否か
if math.isclose(x, y):	xがyに等しいとみなせる場合
math.isclose(x, y)	xがyに十分に近いか否か
if math.isclose(x, y):	xがyに十分に近いとき
not math.isclose(x, y)	xがyに近くないか
not math.isclose(x, y)	xがyに近似できないか
not math.isclose(x, y)	xがyにほぼ等しくないかどうか
not math.isclose(x, y)	xがyに等しいとみなせないか
not math.isclose(x, y)	xがyに十分に近くないかどうか
if math.isclose(x, y) :	xがyに近似できるとき
if math.isclose(x, y) :	xがyに近似できた場合
if math.isclose(x, y) :	xがyにほぼ等しいとき
if math.isclose(x, y) :	xがyにほぼ等しければ
if math.isclose(x, y) :	もしxがyにほぼ等しかったら
if math.isclose(x, y) :	もしxがyに等しいとみなせれば
if math.isclose(x, y) :	もしxがyに十分に近かった場合
if not math.isclose(x, y) :	もしxがyに近くない場合
if not math.isclose(x, y) :	xがyに近くなければ
if not math.isclose(x, y) :	xがyに近くなかった場合
if not math.isclose(x, y) :	xがyに近似できないならば
if not math.isclose(x, y) :	xがyに近似できなければ
if not math.isclose(x, y) :	xがyに近似できなかったら
if not math.isclose(x, y) :	もしxがyにほぼ等しくない場合
if not math.isclose(x, y) :	xがyにほぼ等しくなければ
if not math.isclose(x, y) :	xがyにほぼ等しくなかったならば
if not math.isclose(x, y) :	xがyに等しいとみなせなければ
if not math.isclose(x, y) :	もしxがyに等しいとみなせなかったならば
if not math.isclose(x, y) :	xがyに十分に近くなかったならば
while math.isclose(x, y) :	xがyに近い間
while math.isclose(x, y) :	xがyにほぼ等しい間
while not math.isclose(x, y) :	xがyに近くない間
while not math.isclose(x, y) :	xがyにほぼ等しくない間
while not math.isclose(x, y) :	xがyに等しいとみなせない間
math.isfinite(x)	xが有限か否か
if math.isfinite(x):	xが有限のとき
not math.isfinite(x)	xが有限でないかどうか
if math.isfinite(x) :	もしxが有限とき
if not math.isfinite(x) :	xが有限でないとき
while math.isfinite(x) :	xが有限間
while not math.isfinite(x) :	xが有限でない間
math.isinf(x)	xが無限大か
if math.isinf(x):	xが無限大ならば
not math.isinf(x)	xが無限大でないか
if math.isinf(x) :	もしxが無限大とき
if not math.isinf(x) :	もしxが無限大でないとき
while math.isinf(x) :	xが無限大間
math.isnan(x)	xがNaNかどうか
if math.isnan(x):	xがNaNの場合
math.isnan(x)	xが非数か否か
if math.isnan(x):	xが非数の場合
not math.isnan(x)	xがNaNでないか
not math.isnan(x)	xが非数でないか
if math.isnan(x) :	もしxがNaN場合
if math.isnan(x) :	もしxが非数場合
if not math.isnan(x) :	もしxがNaNでないならば
if not math.isnan(x) :	もしxが非数でないならば
while math.isnan(x) :	xがNaN間
while math.isnan(x) :	xが非数間
while not math.isnan(x) :	xがNaNでない間
math.modf(x)	xの小数部と整数部
math.modf(x)[0]	xの小数部
math.modf(x)[1]	xの整数部
math.remainder(x, y)	xをyで割った余り
math.remainder(x, y)	xをyで割った剰余
math.remainder(x, y)	xをyで割った余りを表示する
math.remainder(x, y)	xをyで割った剰余を表示する
math.exp(x)	eのx乗
math.exp(x)	eのx乗を見る
math.log(x)	xの自然対数
math.log(x)	xの自然対数を見る
math.log(x, y)	yを底とするxの対数
math.log(x, y)	yを底とするxの対数を確認する
math.log2(x)	2を底とするxの対数
math.log2(x)	2を底とするxの対数を表示する
math.log10(x)	xの常用対数
math.log10(x)	xの常用対数を調べる
math.sqrt(x)	xの平方根
math.sqrt(x)	xの平方根を表示する
math.cos(x)	xのコサイン
math.cos(x)	xの余弦
math.cos(x)	xのコサインを確認する
math.cos(x)	xの余弦を見る
math.dist(x)	xのユークリッド距離
math.dist(x)	xのユークリッド距離を見る
math.hypot(x, y)	xとyのノルム
math.hypot(x, y)	xとyのノルムを見る
math.sin(x)	xのサイン
math.sin(x)	xの正弦
math.sin(x)	xのサインを表示する
math.sin(x)	xの正弦を表示する
math.tan(x)	xの正接
math.tan(x)	xのタンジェント
math.tan(x)	xの正接を調べる
math.tan(x)	xのタンジェントを表示する
math.degrees(x)	xの角度
math.degrees(x)	xの角度を調べる
math.radians(x)	xのラジアン
math.radians(x)	xのラジアンを見る
math.acosh(x)	xの逆双曲線余弦
math.acosh(x)	xの逆双曲線余弦を調べる
math.asinh(x)	xの逆双曲線正弦
math.asinh(x)	xの逆双曲線正弦を調べる
math.atanh(x)	xの逆双曲線正接
math.atanh(x)	xの逆双曲線正接を調べる
math.cosh(x)	xの双曲線余弦
math.cosh(x)	xの双曲線余弦を確認する
math.sinh(x)	xの双曲線正弦
math.sinh(x)	xの双曲線正弦を見る
math.tanh(x)	xの双曲線正接
math.tanh(x)	xの双曲線正接を表示する
math.gamma(x)	xのガンマ関数
math.gamma(x)	xのガンマ関数を確認する
math.lgamma(x)	xのガンマ関数の絶対値の自然対数
math.lgamma(x)	xのガンマ関数の絶対値の自然対数を見る
math.pi	円周率
math.pi	π
math.e	ネイピア数
math.e	自然対数の底
math.inf	無限大
math.inf	∞
math.inf	無限大を調べる
math.inf	∞を確認する
math.nan	NaN
math.nan	数でない
math.nan	非数
re.search(x, y)	文字列yにx正規表現がマッチする最初の位置
re.search(x, y)	yに正規表現xがマッチする最初の位置
re.search(x, y)	yにxがマッチする最初の位置
re.search(x, y)	yにx正規表現がマッチする最初の位置
re.search(x, y)	文字列yに正規表現xがマッチする最初の位置
re.match(x, y)	yにx正規表現がマッチするかどうか
if re.match(x, y):	yにx正規表現がマッチする場合
re.match(x, y)	正規表現xがy文字列にマッチするかどうか
if re.match(x, y):	もし正規表現xがy文字列にマッチするならば
re.match(x, y)	文字列yに正規表現xがマッチするか
if re.match(x, y):	文字列yに正規表現xがマッチする場合
re.match(x, y)	xがyにマッチするか
if re.match(x, y):	xがyにマッチするならば
re.match(x, y)	yに正規表現xがマッチするか
if re.match(x, y):	yに正規表現xがマッチするとき
re.match(x, y)	yにxがマッチするか
if re.match(x, y):	yにxがマッチする場合
re.match(x, y)	文字列yにx正規表現がマッチするか否か
if re.match(x, y):	もし文字列yにx正規表現がマッチするならば
re.match(x, y)	正規表現xが文字列yにマッチするか
if re.match(x, y):	正規表現xが文字列yにマッチする場合
not re.match(x, y)	yにx正規表現がマッチしないかどうか
not re.match(x, y)	正規表現xがy文字列にマッチしないか
not re.match(x, y)	文字列yに正規表現xがマッチしないか
not re.match(x, y)	xがyにマッチしないか
not re.match(x, y)	yに正規表現xがマッチしないか
not re.match(x, y)	yにxがマッチしないか
not re.match(x, y)	文字列yにx正規表現がマッチしないかどうか
not re.match(x, y)	正規表現xが文字列yにマッチしないか
if re.match(x, y) :	yにx正規表現がマッチするならば
if re.match(x, y) :	yにx正規表現がマッチしたら
if re.match(x, y) :	もし正規表現xがy文字列にマッチするならば
if re.match(x, y) :	正規表現xがy文字列にマッチしたとき
if re.match(x, y) :	もし文字列yに正規表現xがマッチするならば
if re.match(x, y) :	文字列yに正規表現xがマッチすれば
if re.match(x, y) :	xがyにマッチした場合
if re.match(x, y) :	もしyに正規表現xがマッチすれば
if re.match(x, y) :	yに正規表現xがマッチしたなら
if re.match(x, y) :	もしyにxがマッチするならば
if re.match(x, y) :	yにxがマッチすれば
if re.match(x, y) :	yにxがマッチしたら
if re.match(x, y) :	文字列yにx正規表現がマッチする場合
if re.match(x, y) :	もし文字列yにx正規表現がマッチすれば
if re.match(x, y) :	もし文字列yにx正規表現がマッチしたとき
if re.match(x, y) :	もし正規表現xが文字列yにマッチする場合
if re.match(x, y) :	正規表現xが文字列yにマッチすれば
if not re.match(x, y) :	yにx正規表現がマッチしなければ
if not re.match(x, y) :	もしyにx正規表現がマッチしなかったとき
if not re.match(x, y) :	正規表現xがy文字列にマッチしないとき
if not re.match(x, y) :	正規表現xがy文字列にマッチしなければ
if not re.match(x, y) :	正規表現xがy文字列にマッチしなかったなら
if not re.match(x, y) :	もし文字列yに正規表現xがマッチしない場合
if not re.match(x, y) :	もしxがyにマッチしなかった場合
if not re.match(x, y) :	yに正規表現xがマッチしない場合
if not re.match(x, y) :	yに正規表現xがマッチしなかったならば
if not re.match(x, y) :	もしyにxがマッチしないならば
if not re.match(x, y) :	文字列yにx正規表現がマッチしないとき
if not re.match(x, y) :	もし文字列yにx正規表現がマッチしなければ
if not re.match(x, y) :	もし文字列yにx正規表現がマッチしなかった場合
if not re.match(x, y) :	もし正規表現xが文字列yにマッチしなければ
if not re.match(x, y) :	正規表現xが文字列yにマッチしなかったならば
re.fullmatch(x, y)	xがy全体にマッチするか
if re.fullmatch(x, y):	もしxがy全体にマッチするならば
re.fullmatch(x, y)	文字列y全体に正規表現xがマッチするかどうか
if re.fullmatch(x, y):	文字列y全体に正規表現xがマッチするとき
re.fullmatch(x, y)	y全体に正規表現xがマッチするか
if re.fullmatch(x, y):	もしy全体に正規表現xがマッチするならば
re.fullmatch(x, y)	正規表現xがy文字列全体にマッチするかどうか
if re.fullmatch(x, y):	正規表現xがy文字列全体にマッチするとき
re.fullmatch(x, y)	正規表現xがy全体にマッチするか
if re.fullmatch(x, y):	正規表現xがy全体にマッチするならば
re.fullmatch(x, y)	y全体にx正規表現がマッチするかどうか
if re.fullmatch(x, y):	y全体にx正規表現がマッチする場合
re.fullmatch(x, y)	xがy文字列全体にマッチするか否か
if re.fullmatch(x, y):	もしxがy文字列全体にマッチするならば
re.fullmatch(x, y)	文字列y全体にxがマッチするか
if re.fullmatch(x, y):	文字列y全体にxがマッチするならば
re.fullmatch(x, y)	文字列y全体にx正規表現がマッチするか
if re.fullmatch(x, y):	文字列y全体にx正規表現がマッチするならば
not re.fullmatch(x, y)	xがy全体にマッチしないか
not re.fullmatch(x, y)	文字列y全体に正規表現xがマッチしないか
not re.fullmatch(x, y)	y全体に正規表現xがマッチしないかどうか
not re.fullmatch(x, y)	正規表現xがy文字列全体にマッチしないか否か
not re.fullmatch(x, y)	正規表現xがy全体にマッチしないかどうか
not re.fullmatch(x, y)	y全体にx正規表現がマッチしないか
not re.fullmatch(x, y)	xがy文字列全体にマッチしないかどうか
not re.fullmatch(x, y)	文字列y全体にxがマッチしないかどうか
not re.fullmatch(x, y)	文字列y全体にx正規表現がマッチしないか
if re.fullmatch(x, y) :	もしxがy全体にマッチする場合
if re.fullmatch(x, y) :	xがy全体にマッチすれば
if re.fullmatch(x, y) :	もし文字列y全体に正規表現xがマッチしたならば
if re.fullmatch(x, y) :	もしy全体に正規表現xがマッチするならば
if re.fullmatch(x, y) :	もしy全体に正規表現xがマッチしたら
if re.fullmatch(x, y) :	正規表現xがy文字列全体にマッチする場合
if re.fullmatch(x, y) :	もし正規表現xがy文字列全体にマッチすれば
if re.fullmatch(x, y) :	正規表現xがy文字列全体にマッチしたとき
if re.fullmatch(x, y) :	もし正規表現xがy全体にマッチするとき
if re.fullmatch(x, y) :	もし正規表現xがy全体にマッチすれば
if re.fullmatch(x, y) :	もし正規表現xがy全体にマッチしたなら
if re.fullmatch(x, y) :	もしy全体にx正規表現がマッチする場合
if re.fullmatch(x, y) :	y全体にx正規表現がマッチすれば
if re.fullmatch(x, y) :	もしxがy文字列全体にマッチすれば
if re.fullmatch(x, y) :	もし文字列y全体にxがマッチすれば
if re.fullmatch(x, y) :	文字列y全体にxがマッチしたならば
if re.fullmatch(x, y) :	もし文字列y全体にx正規表現がマッチする場合
if re.fullmatch(x, y) :	もし文字列y全体にx正規表現がマッチすれば
if re.fullmatch(x, y) :	もし文字列y全体にx正規表現がマッチしたら
if not re.fullmatch(x, y) :	もしxがy全体にマッチしなければ
if not re.fullmatch(x, y) :	もし文字列y全体に正規表現xがマッチしなかったとき
if not re.fullmatch(x, y) :	y全体に正規表現xがマッチしなかったならば
if not re.fullmatch(x, y) :	もし正規表現xがy文字列全体にマッチすれば
if not re.fullmatch(x, y) :	正規表現xがy全体にマッチしない場合
if not re.fullmatch(x, y) :	もし正規表現xがy全体にマッチしなければ
if not re.fullmatch(x, y) :	もし正規表現xがy全体にマッチしなかったら
if not re.fullmatch(x, y) :	もしy全体にx正規表現がマッチしなかった場合
if not re.fullmatch(x, y) :	xがy文字列全体にマッチしなければ
if not re.fullmatch(x, y) :	もしxがy文字列全体にマッチしなかったら
if not re.fullmatch(x, y) :	もし文字列y全体にxがマッチしなければ
if not re.fullmatch(x, y) :	もし文字列y全体にxがマッチしなかった場合
if not re.fullmatch(x, y) :	文字列y全体にx正規表現がマッチしなければ
re.split(x, y)	yにおいて、正規表現xで分ける
re.split(x, y)	文字列yについて、正規表現xで分ける
re.split(x, y)	yについて、xで分割する
re.split(x, y)	yに対し、正規表現xで分ける
re.split(x, y)	yにおいて、x正規表現で区切る
re.split(x, y)	yに対し、正規表現xで区切る
re.split(x, y)	yについて、正規表現xでスプリットする
re.split(x, y)	yにおいて、正規表現xでスプリットする
re.split(x, y)	yにおいて、x正規表現でスプリットする
re.split(x, y)	yについて、xで区切る
re.split(x, y)	yについて、正規表現xで区切る
re.split(x, y)	文字列yについて、x正規表現で分ける
re.split(x, y)	文字列yについて、xで分割する
re.split(x, y)	文字列yに対し、xで分ける
re.split(x, y)	文字列yに対し、x正規表現でスプリットする
re.split(x, y)	文字列yに対し、xでスプリットする
re.split(x, y)	文字列yにおいて、x正規表現で分ける
re.split(x, y)	文字列yにおいて、xで分ける
re.split(x, y)	yに対し、xで分割する
re.split(x, y)	文字列yに対し、正規表現xで区切る
re.split(x, y)	文字列yにおいて、xでスプリットする
re.split(x, y)	文字列yにおいて、xで分割する
re.split(x, y)	yに対し、正規表現xで分割する
re.split(x, y)	文字列yにおいて、正規表現xで分ける
re.split(x, y)	文字列yにおいて、正規表現xで分割する
re.split(x, y)	yに対し、x正規表現で分ける
re.split(x, y)	yにおいて、xで分ける
re.split(x, y)	文字列yについて、x正規表現でスプリットする
re.split(x, y)	正規表現xで文字列yをスプリットする
re.split(x, y)	正規表現xでy文字列を区切る
re.split(x, y)	正規表現xでy文字列をスプリットする
re.split(x, y)	xでy文字列をスプリットする
re.split(x, y)	xで文字列yを分割する
re.split(x, y)	正規表現xでyをスプリットする
re.split(x, y)	正規表現xで文字列yを区切る
re.split(x, y)	xでyを分ける
re.split(x, y)	正規表現xでy文字列を分ける
re.split(x, y)	xでyを分割する
re.split(x, y)	正規表現xでyを分割する
re.split(x, y)	xでy文字列を分割する
re.sub(x, y, z)	文字列yにおいて、正規表現xでマッチした部分をzに置き換える
re.sub(x, y, z)	文字列yにおいて、正規表現xでマッチした箇所をzにリプレースする
re.sub(x, y, z)	yにおいて、x正規表現でマッチした部分文字列をzにリプレースする
re.sub(x, y, z)	yに対し、正規表現xでマッチした箇所をzに置き換える
re.sub(x, y, z)	yに対し、正規表現xでマッチした部分をzに置換する
re.sub(x, y, z)	yにおいて、xでマッチした箇所をzに置換する
re.sub(x, y, z)	文字列yについて、xでマッチした部分をzに置き換える
re.sub(x, y, z)	yにおいて、x正規表現でマッチした部分をzにリプレースする
re.sub(x, y, z)	yに対し、正規表現xでマッチした箇所をzに置換する
re.sub(x, y, z)	yについて、正規表現xでマッチした部分文字列をzに置き換える
re.sub(x, y, z)	yに対し、正規表現xでマッチした部分文字列をzに置き換える
re.sub(x, y, z)	文字列yに対し、xでマッチした部分をzにリプレースする
re.sub(x, y, z)	文字列yに対し、xでマッチした部分をzに置き換える
re.sub(x, y, z)	文字列yについて、x正規表現でマッチした箇所をzに置き換える
re.sub(x, y, z)	文字列yに対し、x正規表現でマッチした部分をzにリプレースする
re.sub(x, y, z)	yについて、x正規表現でマッチした箇所をzにリプレースする
re.sub(x, y, z)	yにおいて、xでマッチした部分をzにリプレースする
re.sub(x, y, z)	文字列yに対し、x正規表現でマッチした箇所をzに置換する
re.sub(x, y, z)	文字列yにおいて、xでマッチした部分をzにリプレースする
re.sub(x, y, z)	yにおいて、正規表現xでマッチした部分文字列をzに置換する
re.sub(x, y, z)	yにおいて、x正規表現でマッチした部分をzに置き換える
re.sub(x, y, z)	文字列yにおいて、正規表現xでマッチした部分文字列をzに置き換える
re.sub(x, y, z)	yにおいて、正規表現xでマッチした箇所をzにリプレースする
re.sub(x, y, z)	yについて、xでマッチした部分をzに置換する
re.sub(x, y, z)	yにおいて、xでマッチした箇所をzに置き換える
re.sub(x, y, z)	yに対し、xでマッチした部分文字列をzに置き換える
re.sub(x, y, z)	yにおいて、x正規表現でマッチした箇所をzに置き換える
re.sub(x, y, z)	yについて、xでマッチした部分文字列をzにリプレースする
re.sub(x, y, z)	文字列yにおいて、x正規表現でマッチした箇所をzに置き換える
re.sub(x, y, z)	yにおいて、xでマッチした箇所をzにリプレースする
re.sub(x, y, z)	文字列yについて、正規表現xでマッチした部分をzにリプレースする
re.sub(x, y, z)	yについて、xでマッチした部分文字列をzに置換する
re.sub(x, y, z)	文字列yについて、xでマッチした部分文字列をzに置換する
re.sub(x, y, z)	xで文字列yのマッチした箇所をzに置換する
re.sub(x, y, z)	xで文字列yのマッチした箇所をzに置き換える
re.sub(x, y, z)	正規表現xでy文字列のマッチした箇所をzに置き換える
re.sub(x, y, z)	xでyのマッチした部分文字列をzに置換する
re.sub(x, y, z)	正規表現xで文字列yのマッチした箇所をzにリプレースする
re.sub(x, y, z)	xでyのマッチした部分文字列をzにリプレースする
re.sub(x, y, z)	xでyのマッチした部分をzに置換する
re.sub(x, y, z)	xでyのマッチした箇所をzにリプレースする
re.sub(x, y, z)	xでy文字列のマッチした箇所をzに置換する
re.sub(x, y, z)	正規表現xで文字列yのマッチした部分をzに置換する
re.sub(x, y, z)	xで文字列yのマッチした部分文字列をzに置き換える
re.sub(x, y, z)	正規表現xで文字列yのマッチした部分文字列をzにリプレースする
re.sub(x, y, z)	xでy文字列のマッチした部分文字列をzに置き換える
re.sub(x, y, z)	正規表現xでyのマッチした部分をzに置き換える
re.sub(x, y, z)	xで文字列yのマッチした箇所をzにリプレースする
re.sub(x, y, z)	正規表現xで文字列yのマッチした部分文字列をzに置換する
re.sub(x, y, z)	xでyのマッチした部分文字列をzに置き換える
re.sub(x, y, z)	正規表現xでy文字列のマッチした部分をzに置換する
re.sub(x, y, z)	xでy文字列のマッチした部分をzにリプレースする
re.sub(x, y, z)	xで文字列yのマッチした部分をzに置き換える
re.sub(x, y, z)	xにマッチしたyの部分文字列をzに置き換える
re.sub(x, y, z)	正規表現xにマッチしたyの部分をzにリプレースする
re.sub(x, y, z)	正規表現xにマッチしたyの部分をzに置き換える
re.sub(x, y, z)	xにマッチしたyの部分文字列をzにリプレースする
re.sub(x, y, z)	xにマッチしたyの箇所をzに置換する
re.sub(x, y, z)	正規表現xにマッチしたyの箇所をzにリプレースする
re.sub(x, y, z)	xにマッチしたyの部分をzに置換する
re.sub(x, y, z)	xにマッチしたyの部分をzに置き換える
re.subn(x, y, z)	yにおいて、x正規表現にマッチした部分文字列をzにリプレースする
re.subn(x, y, z)	文字列yについて、x正規表現にマッチした箇所をzに置換する
re.subn(x, y, z)	yについて、xにマッチした部分文字列をzに置換する
re.subn(x, y, z)	文字列yにおいて、x正規表現にマッチした部分文字列をzに置換する
re.subn(x, y, z)	文字列yにおいて、正規表現xにマッチした箇所をzに置き換える
re.subn(x, y, z)	文字列yについて、xにマッチした部分をzにリプレースする
re.subn(x, y, z)	yにおいて、正規表現xにマッチした箇所をzに置換する
re.subn(x, y, z)	文字列yについて、正規表現xにマッチした部分文字列をzに置換する
re.subn(x, y, z)	文字列yに対し、xにマッチした部分文字列をzに置換する
re.subn(x, y, z)	文字列yにおいて、x正規表現にマッチした部分文字列をzにリプレースする
re.subn(x, y, z)	文字列yにおいて、xにマッチした箇所をzに置き換える
re.subn(x, y, z)	yについて、x正規表現にマッチした部分文字列をzにリプレースする
re.subn(x, y, z)	文字列yについて、xにマッチした部分文字列をzに置換する
re.subn(x, y, z)	yについて、xにマッチした部分文字列をzにリプレースする
re.subn(x, y, z)	yについて、x正規表現にマッチした部分をzにリプレースする
re.subn(x, y, z)	文字列yにおいて、正規表現xにマッチした部分をzに置換する
re.subn(x, y, z)	yにおいて、xにマッチした部分をzに置き換える
re.subn(x, y, z)	yに対し、x正規表現にマッチした部分をzに置換する
re.subn(x, y, z)	yについて、xにマッチした箇所をzに置換する
re.subn(x, y, z)	文字列yに対し、x正規表現にマッチした部分をzに置き換える
re.subn(x, y, z)	yにおいて、xにマッチした部分文字列をzに置き換える
re.subn(x, y, z)	文字列yにおいて、x正規表現にマッチした部分をzにリプレースする
re.subn(x, y, z)	yにおいて、xにマッチした部分文字列をzにリプレースする
re.subn(x, y, z)	yに対し、正規表現xにマッチした箇所をzに置き換える
re.subn(x, y, z)	yについて、x正規表現にマッチした箇所をzに置換する
re.subn(x, y, z)	yに対し、xにマッチした部分をzに置換する
re.subn(x, y, z)	yにおいて、正規表現xにマッチした部分をzにリプレースする
re.subn(x, y, z)	文字列yについて、xにマッチした部分をzに置換する
re.subn(x, y, z)	文字列yにおいて、xにマッチした箇所をzに置換する
re.subn(x, y, z)	正規表現xでマッチしたyの部分をzに置換する
re.subn(x, y, z)	正規表現xでマッチしたyの部分をzにリプレースする
re.subn(x, y, z)	xでマッチしたyの部分文字列をzに置換する
re.subn(x, y, z)	xでマッチしたyの部分をzにリプレースする
re.subn(x, y, z)	正規表現xでマッチしたyの部分文字列をzに置き換える
re.subn(x, y, z)	正規表現xでマッチしたyの箇所をzに置換する
re.subn(x, y, z)	xでマッチしたyの箇所をzにリプレースする
re.subn(x, y, z)	xでマッチしたyの箇所をzに置き換える
re.subn(x, y, z)	xでマッチしたyの部分をzに置換する
re.subn(x, y, z)	xでマッチしたyの部分をzに置き換える
re.subn(x, y, z)	正規表現xでマッチしたyの箇所をzに置き換える
re.findall(x, y)	yに対し、xでマッチした部分を抽出する
re.findall(x, y)	yに対し、正規表現xでマッチした箇所を抽出する
re.findall(x, y)	yにおいて、xでマッチした箇所を抽出する
re.findall(x, y)	文字列yに対し、正規表現xでマッチした部分を抽出する
re.findall(x, y)	yに対し、xでマッチした部分文字列をリストにする
re.findall(x, y)	yにおいて、正規表現xでマッチした部分文字列をリストにする
re.findall(x, y)	文字列yにおいて、x正規表現でマッチした部分文字列をリストにする
re.findall(x, y)	yに対し、xでマッチした部分をリストにする
re.findall(x, y)	yに対し、正規表現xでマッチした部分文字列を抽出する
re.findall(x, y)	yについて、x正規表現でマッチした部分文字列を抽出する
re.findall(x, y)	yについて、xでマッチした部分を抽出する
re.findall(x, y)	文字列yに対し、xでマッチした箇所を抽出する
re.findall(x, y)	yにおいて、x正規表現でマッチした箇所を抽出する
re.findall(x, y)	文字列yについて、正規表現xでマッチした部分をリストにする
re.findall(x, y)	文字列yに対し、xでマッチした部分文字列を抽出する
re.findall(x, y)	yに対し、xでマッチした箇所をリストにする
re.findall(x, y)	文字列yについて、x正規表現でマッチした箇所を抽出する
re.findall(x, y)	yについて、正規表現xでマッチした部分をリストにする
re.findall(x, y)	文字列yについて、x正規表現でマッチした部分文字列を抽出する
re.findall(x, y)	yについて、xでマッチした部分をリストにする
re.findall(x, y)	文字列yに対し、xでマッチした部分を抽出する
re.findall(x, y)	文字列yにおいて、x正規表現でマッチした箇所を抽出する
re.findall(x, y)	yにおいて、xでマッチした箇所をリストにする
re.findall(x, y)	yに対し、x正規表現でマッチした箇所を抽出する
re.findall(x, y)	yにおいて、x正規表現でマッチした部分をリストにする
re.findall(x, y)	yについて、正規表現xでマッチした部分を抽出する
re.findall(x, y)	文字列yに対し、xでマッチした部分をリストにする
re.findall(x, y)	yについて、x正規表現でマッチした部分を抽出する
re.findall(x, y)	文字列yに対し、正規表現xでマッチした部分文字列をリストにする
re.findall(x, y)	yにおいて、x正規表現でマッチした箇所をリストにする
re.findall(x, y)	文字列yにおいて、x正規表現でマッチした部分をリストにする
re.findall(x, y)	yにおいて、x正規表現でマッチした部分文字列を抽出する
re.findall(x, y)	文字列yに対し、正規表現xでマッチした部分文字列を抽出する
re.findall(x, y)	文字列yにおいて、x正規表現でマッチした部分文字列を抽出する
re.findall(x, y)	文字列yに対し、正規表現xでマッチした部分をリストにする
re.findall(x, y)	正規表現xにマッチしたyの部分文字列をリストにする
re.findall(x, y)	xにマッチしたyの部分文字列を抽出する
re.findall(x, y)	xにマッチしたyの部分をリストにする
re.findall(x, y)	正規表現xにマッチしたyの部分をリストにする
re.findall(x, y)	正規表現xにマッチしたyの箇所を抽出する
re.findall(x, y)	xにマッチしたyの部分を抽出する
re.compile(x)	正規表現xをコンパイルする
re.compile(x)	xをコンパイルする
sys.exit()	正常にPythonを終了する
sys.exit()	Pythonを適切に終了する
sys.exit()	適切にプログラムを終了する
sys.exit()	正しくプログラムを終了する
sys.exit()	適切にPythonを終了する
sys.exit()	正しくPythonを終了する
sys.exit()	正常にプログラムを終了する
sys.exit(0)	プログラムを正常終了する
sys.exit(0)	Pythonを正常終了する
sys.exit(1)	Pythonを異常終了する
sys.exit(1)	プログラムを異常終了する
sys.setrecursionlimit(1000000)	再帰の上限を1000000にする
sys.setrecursionlimit(1000000)	再帰エラーを防ぎたい
sys.setrecursionlimit(1000000)	再帰の上限を上げる
sys.argv[0]	スクリプト名
sys.argv[1]	コマンドの第一引数
sys.argv[1:]	コマンド引数のリスト
sys.path.append('/path/to/whatever')	Pythonパスに'/path/to/whatever'を追加する
sys.stdin.read(1)	標準入力から1文字だけ読む
sys.stdin.read(1)	標準入力から1文字読む
sys.stdout	標準出力
sys.stdout.flush()	標準出力をフラッシュする
sys.version	Pythonのバージョン
sys.version	Pythonのバージョンを表示する
sys.float_info.max	数の最大値
sys.float_info.max	浮動小数点数の最大値
sys.float_info.max	小数点数の最大値
sys.float_info.max	実数の最大値
sys.float_info.min	浮動小数点数の最小値
sys.float_info.min	数の最小値
sys.float_info.min	小数点数の最小値
sys.float_info.min	実数の最小値
sys.float_info.epsilon	計算機イプシロン
os.mkdir('dir/')	'dir/'のフォルダを新たに作る
os.mkdir('dir/')	新しく'dir/'のディレクトリを作る
os.mkdir('dir/')	新規に'dir/'のディレクトリを作る
os.mkdir('dir/')	新たに'dir/'のディレクトリを作る
os.mkdir('dir/')	'dir/'のフォルダを新規に作る
os.mkdir('dir/')	新たに'dir/'のフォルダを作る
os.makedirs('dir/', exist_ok=True)	'dir/'のフォルダを再帰的に作る
os.makedirs('dir/', exist_ok=True)	'dir/'のフォルダを階層的に作る
os.makedirs('dir/', exist_ok=True)	'dir/'のディレクトリを階層的に作る
os.listdir('dir/')	'dir/'のファイル一覧
os.listdir('dir/')	パス'dir/'のファイル一覧
os.path.exists(p)	pがあるか
if os.path.exists(p):	pがある場合
os.path.exists(p)	パスpがあるか
if os.path.exists(p):	もしパスpがあるならば
os.path.exists(p)	ファイルパスpが存在するか
if os.path.exists(p):	ファイルパスpが存在するとき
os.path.exists(p)	pが存在するか
if os.path.exists(p):	pが存在するとき
not os.path.exists(p)	pがあらないか
not os.path.exists(p)	パスpがあらないかどうか
not os.path.exists(p)	ファイルパスpが存在しないか
not os.path.exists(p)	pが存在しないか
if os.path.exists(p) :	もしpがある場合
if os.path.exists(p) :	もしpがあったならば
if os.path.exists(p) :	パスpがあれば
if os.path.exists(p) :	パスpがあったならば
if os.path.exists(p) :	もしファイルパスpが存在すれば
if os.path.exists(p) :	もしpが存在するとき
if not os.path.exists(p) :	もしpがあらなければ
if not os.path.exists(p) :	ファイルパスpが存在しないとき
if not os.path.exists(p) :	もしファイルパスpが存在しなければ
if not os.path.exists(p) :	ファイルパスpが存在しなかったならば
if not os.path.exists(p) :	pが存在しなかったならば
os.path.isdir(p)	パスpがディレクトリか
if os.path.isdir(p):	パスpがディレクトリのとき
os.path.isdir(p)	pがディレクトリか
if os.path.isdir(p):	pがディレクトリのとき
os.path.isdir(p)	ファイルパスpがディレクトリかどうか
if os.path.isdir(p):	もしファイルパスpがディレクトリならば
os.path.isdir(p)	パスpがフォルダか否か
if os.path.isdir(p):	パスpがフォルダならば
not os.path.isdir(p)	パスpがディレクトリでないかどうか
not os.path.isdir(p)	pがディレクトリでないか
not os.path.isdir(p)	ファイルパスpがディレクトリでないか
not os.path.isdir(p)	パスpがフォルダでないか
if os.path.isdir(p) :	パスpがディレクトリ場合
if os.path.isdir(p) :	もしpがディレクトリ場合
if os.path.isdir(p) :	もしファイルパスpがディレクトリとき
if os.path.isdir(p) :	もしパスpがフォルダならば
if not os.path.isdir(p) :	もしパスpがディレクトリでないならば
if not os.path.isdir(p) :	もしpがディレクトリでないならば
if not os.path.isdir(p) :	ファイルパスpがディレクトリでない場合
if not os.path.isdir(p) :	パスpがフォルダでないならば
os.path.isfile(p)	パスpがファイルか
if os.path.isfile(p):	もしパスpがファイルならば
os.path.isfile(p)	ファイルパスpがファイルか
if os.path.isfile(p):	ファイルパスpがファイルのとき
os.path.isfile(p)	pがファイルか否か
if os.path.isfile(p):	pがファイルのとき
not os.path.isfile(p)	パスpがファイルでないかどうか
not os.path.isfile(p)	ファイルパスpがファイルでないかどうか
not os.path.isfile(p)	pがファイルでないかどうか
if os.path.isfile(p) :	パスpがファイルならば
if os.path.isfile(p) :	ファイルパスpがファイル場合
if os.path.isfile(p) :	もしpがファイル場合
if not os.path.isfile(p) :	もしパスpがファイルでない場合
if not os.path.isfile(p) :	もしファイルパスpがファイルでないならば
if not os.path.isfile(p) :	もしpがファイルでないならば
os.path.getsize('file.txt')	'file.txt'ファイル名のファイルサイズ
os.path.getsize('file.txt')	ファイル名'file.txt'の大きさ
os.path.getsize('file.txt')	'file.txt'ファイル名の大きさ
os.path.getsize('file.txt')	'file.txt'の大きさ
os.path.getsize('file.txt')	ファイル名'file.txt'のバイト数
os.path.getsize('file.txt')	'file.txt'のファイルサイズ
os.path.join(p, p2)	pファイルパスとp2を結合する
os.path.join(p, p2)	安全にpとp2を結合する
os.path.join(p, p2)	パスpとp2を結合する
os.path.join(p, p2)	パスpとp2をプラットホーム依存せずに結合する
os.path.join(p, p2)	安全にpパスとp2を結合する
os.path.join(p, p2)	パスpとp2を安全に結合する
os.path.join(p, p2)	ファイルパスpとp2を結合する
os.path.join(p, p2)	ファイルパスpとp2をプラットホーム依存なしに結合する
os.path.join(p, p2)	プラットホーム依存せずにpパスとp2を結合する
print("Hello World")	"Hello World"と表示する
print("Hello World")	"Hello World"と出力する
print("Hello World")	「こんにちは世界」と出力する
print("Hello World")	「こんにちは世界」とプリントする
print("Hello World")	「ハローワールド」と出力する
print("Hello World")	「こんにちは世界」と表示する
print("Hello World")	「ハローワールド」とプリントする
print("Hello World")	何か動かす
print("Hello World")	試しに何か動かす
print("Hello World")	最初のプログラム
print("Hello World")	最初のPython
3+8	3足す8
3+8	3に8を加算する
3+8	3と8の和
1+2+3	1足す2足す3
1+2+3	1,2,3の和
100-70	100から70を引く
5 * 12	5かける12
10 / 5	10を5で割る
10 // 5	10を5で割った商
10 % 5	10を5で割った余り
10 ** 5	10の5乗
"abc" + "ABC"	文字列"abc"と"ABC"を繋ぐ
"abc" + "ABC"	文字列"abc"と"ABC"を連結する
"abc" + "ABC"	"abc"と"ABC"を連結する
"abc" + "ABC"	"abc"と"ABC"を繋ぐ
"abc" + "ABC"	"abc"と"ABC"を結合する
str(1)	1を文字列にする
str(1)	1を文字列に変換する
str(1)	1を変換した文字列
"X" * 3	"X"を3回繰り返す
"X" * 3	文字列"X"を3回繰り返す
x = input()	ユーザから入力を得る
x = input()	ユーザが入力した文字列をxとする
x = input()	利用者が入力した文字列をxとする
x = input()	ユーザから入力された文字列
x = input()	入力された文字列
x = input("X")	"X"というプロンプトを表示し、文字列をユーザに入力させる
x = input("X")	"X"というプロンプトを表示し、ユーザに文字列を入力させる
x = input("X")	"X"というプロンプトを表示し、利用者に文字列を入力させる
x = input("X")	"X"というプロンプトを表示し、文字列を利用者に入力させる
x = input("X")	"X"という問い合わせに対し、入力をユーザから得る
x = input("X")	"X"という問い合わせに対し、入力を利用者から得る
x = input("X")	"X"という問い合わせに対し、ユーザから入力を得る
float(x)	xを数に変換する
float(x)	実数にxを変換する
float(x)	浮動小数点数にxを変換する
float(x)	小数点数にxを変換する
float(x)	xを浮動小数点数にする
float(x)	数にxを変換する
float(x)	浮動小数点数にxをする
float(x)	数にxをする
float(x)	xを実数にする
float(x)	xを浮動小数点数に変換する
float(x)	xを実数に変換する
float(x)	xを変換した浮動小数点数
float(x)	xを変換した実数
float(x)	xを変換した小数点数
float(x)	xを変換した数
int(x)	整数にxをする
int(x)	xを整数に変換する
int(x)	自然数にxをする
int(x)	xを整数値にする
int(x)	xを整数にする
int(x)	xを自然数にする
int(x)	整数値にxをする
int(x)	整数値にxを変換する
int(x)	整数にxを変換する
int(x)	xを自然数に変換する
int(x)	xを変換した自然数
int(x)	xを変換した整数
int(x)	xを変換した整数値
x = int(input())	利用者が入力した整数をxとする
x = int(input())	入力された自然数をxとする
x = int(input())	入力された整数をxとする
x = int(input())	ユーザが入力した整数をxとする
x = int(input())	利用者が入力した自然数をxとする
x = int(input())	ユーザが入力した自然数をxとする
x = int(input())	利用者が入力した整数値をxとする
x = int(input())	入力された整数
x = int(input())	入力された整数値
x = float(input())	ユーザが入力した小数点数をxとする
x = float(input())	入力された小数点数をxとする
x = float(input())	入力された実数をxとする
x = float(input())	ユーザが入力した浮動小数点数をxとする
x = float(input())	入力された数をxとする
x = float(input())	入力された数
x = float(input())	入力された小数点数
x = float(input())	入力された浮動小数点数
type(x)	xのクラス
type(x)	xの型
type(x)	xのクラスを見る
type(x)	xの型を表示する
a == b	aとbが等しいか否か
if a == b:	aとbが等しいとき
a != b	aとbが等しくないか
if a == b :	もしaとbが等しい場合
if a == b :	もしaとbが等しければ
if a != b :	aとbが等しくないとき
if a != b :	aとbが等しくなければ
if a != b :	aとbが等しくなかったなら
while a == b :	aとbが等しい間
while a != b :	aとbが等しくない間
a == b	aがbと等しいか
if a == b:	aがbと等しい場合
a != b	aがbと等しくないか
if a == b :	もしaがbと等しければ
if a == b :	もしaがbと等しかったとき
if a != b :	もしaがbと等しくなければ
if a != b :	もしaがbと等しくなかったとき
while a != b :	aがbと等しくない間
a == b	aがbか
if a == b:	aがbの場合
a != b	aがbでないかどうか
if a == b :	aがb場合
if a != b :	aがbでないとき
while a != b :	aがbでない間
a > b	aがbより大きいかどうか
if a > b:	aがbより大きい場合
not a > b	aがbより大きくないかどうか
if a > b :	aがbより大きければ
if a > b :	もしaがbより大きかったら
if not a > b :	もしaがbより大きくなければ
if not a > b :	もしaがbより大きくなかったなら
while a > b :	aがbより大きい間
while not a > b :	aがbより大きくない間
a < b	aがbより小さいか
if a < b:	aがbより小さい場合
not a < b	aがbより小さくないか
if a < b :	aがbより小さければ
if a < b :	もしaがbより小さかったならば
if not a < b :	aがbより小さくないならば
if not a < b :	aがbより小さくなければ
while a < b :	aがbより小さい間
while not a < b :	aがbより小さくない間
a >= b	aがb以上か否か
if a >= b:	もしaがb以上ならば
not a >= b	aがb以上でないか
if a >= b :	aがb以上とき
if not a >= b :	aがb以上でない場合
while a >= b :	aがb以上間
a <= b	aがb以下かどうか
if a <= b:	aがb以下の場合
not a <= b	aがb以下でないかどうか
if a <= b :	aがb以下場合
if not a <= b :	aがb以下でないならば
while a <= b :	aがb以下間
a % 2 == 0	aが偶数か否か
if a % 2 == 0:	aが偶数のとき
a % 2 != 0	aが偶数でないかどうか
if a % 2 == 0 :	aが偶数とき
if a % 2 != 0 :	もしaが偶数でないならば
a % 2 == 1	aが奇数か否か
if a % 2 == 1:	aが奇数ならば
a % 2 != 1	aが奇数でないか
if a % 2 == 1 :	もしaが奇数ならば
if a % 2 != 1 :	もしaが奇数でない場合
while a % 2 == 1 :	aが奇数間
while a % 2 != 1 :	aが奇数でない間
a % n == 0	aがnの倍数か否か
if a % n == 0:	aがnの倍数のとき
a % n != 0	aがnの倍数でないかどうか
if a % n == 0 :	もしaがnの倍数ならば
if a % n != 0 :	もしaがnの倍数でない場合
while a % n == 0 :	aがnの倍数間
a % n == 0	aがnで割り切れるか否か
if a % n == 0:	aがnで割り切れる場合
a % n != 0	aがnで割り切れないかどうか
if a % n == 0 :	もしaがnで割り切れるとき
if a % n == 0 :	もしaがnで割り切れれば
if a % n == 0 :	もしaがnで割り切れたら
if a % n != 0 :	もしaがnで割り切れなければ
while a % n == 0 :	aがnで割り切れる間
while a % n != 0 :	aがnで割り切れない間
pass	何もしない
pass	パスする
quit()	Pythonの実行を途中で終了する
quit()	プログラムの実行を終了する
quit()	途中でPythonの実行を終了する
quit()	プログラムを終了する
quit()	Pythonを終了する
quit()	Pythonの実行を終了する
quit()	途中でPythonを終了する
quit()	Pythonを途中で終了する
quit()	Pythonを中断する
quit()	プログラムを中断する
quit()	プログラムの実行を中断する
quit()	Pythonの実行を中断する
True	真
False	偽
if age < 6 or age >= 60:	ageが6未満、また60以上であれば
if age < 6 or age >= 60:	ageが6未満、また60以上の場合
if age < 6 or age >= 60:	もしageが6未満、あるいは60以上であれば
if age < 6 or age >= 60:	ageが6未満、あるいは60以上であるならば
if age < 6 or age >= 60:	ageが6未満、または60以上であるならば
if age < 6 or age >= 60:	ageが6未満、あるいは60以上ならば
if age < 6 or age >= 60:	ageが6未満、あるいは60以上の場合
if age < 6 or age >= 60:	もしageが6未満、また60以上であるならば
if age < 6 or age >= 60:	もしageが6未満、または60以上の場合
if age < 6 or age >= 60:	ageが6未満、また60以上であったら
if age < 6 or age >= 60:	もしageが6未満、あるいは60以上のとき
if age < 6 or age >= 60:	ageが6未満、また60以上であるならば
if age < 6 or age >= 60:	ageが6未満、または60以上であれば
if age < 6 or age >= 60:	ageが6未満、または60以上ならば
if age < 6 or age >= 60:	もしageが6未満、あるいは60以上の場合
if age < 6 or age >= 60:	6才未満、または60才以上であるならば
if age < 6 or age >= 60:	6才未満、または60才以上であったら
if age < 6 or age >= 60:	6才未満、あるいは60才以上であったら
if age < 6 or age >= 60:	もし6才未満、また60才以上ならば
if age < 6 or age >= 60:	もし6才未満、また60才以上であれば
if age < 6 or age >= 60:	6才未満、または60才以上であれば
if age < 6 or age >= 60:	もし6才未満、あるいは60才以上ならば
if age < 6 or age >= 60:	もし6才未満、または60才以上ならば
if age < 6 or age >= 60:	6才未満、あるいは60才以上のとき
if age < 6 or age >= 60:	もし6才未満、あるいは60才以上であれば
if age < 6 or age >= 60:	もし6才未満、または60才以上の場合
if age < 6 or age >= 60:	もし6才未満、また60才以上のとき
if age < 6 or age >= 60:	6才未満、あるいは60才以上ならば
if age < 6 or age >= 60:	もし6才未満、または60才以上であったら
if age < 6 and age >= 60:	もしageが6未満、かつ@160以上であったら
if age < 6 and age >= 60:	ageが6未満、かつ@160以上のとき
if age < 6 and age >= 60:	ageが6未満、かつ@160以上であれば
if age < 6 and age >= 60:	ageが6未満、かつ@160以上であったら
if age < 6 and age >= 60:	ageが6未満、かつ@160以上ならば
if age < 6 and age >= 60:	もしageが6未満、かつ@160以上であれば
if age < 6 and age >= 60:	もしageが6未満、かつ@160以上ならば
weight / (height / 100) ** 2	BMIを求めたい
weight / (height / 100) ** 2	weightとheightからBMI
weight / (height / 100) ** 2	体重weightと身長heightからBMI
weight / (height / 100) ** 2	weightと身長heightからBMI
weight / (height / 100) ** 2	体重weightとheight身長からBMI
weight / (height / 100) ** 2	weightとheight身長からBMI
weight / (height / 100) ** 2	体重weightとheightからBMI
weight / (height / 100) ** 2	weightとheightからBMIを確認する
weight / (height / 100) ** 2	体重weightと身長heightからBMIを調べる
weight / (height / 100) ** 2	weightと身長heightからBMIを確認する
weight / (height / 100) ** 2	体重weightとheight身長からBMIを確認する
weight / (height / 100) ** 2	weightとheight身長からBMIを表示する
weight / (height / 100) ** 2	体重weightとheightからBMIを調べる
weight / (height / 100) ** 2	heightと体重weightからBMI
weight / (height / 100) ** 2	身長heightと体重weightからBMI
weight / (height / 100) ** 2	heightとweight体重からBMI
weight / (height / 100) ** 2	身長heightとweightからBMI
weight / (height / 100) ** 2	heightとweightからBMI
weight / (height / 100) ** 2	身長heightとweight体重からBMI
weight / (height / 100) ** 2	heightと体重weightからBMIを表示する
weight / (height / 100) ** 2	身長heightと体重weightからBMIを見る
weight / (height / 100) ** 2	heightとweight体重からBMIを確認する
weight / (height / 100) ** 2	身長heightとweightからBMIを確認する
weight / (height / 100) ** 2	heightとweightからBMIを確認する
weight / (height / 100) ** 2	身長heightとweight体重からBMIを見る
random.randint(1,6)	サイコロの目
random.randint(1,6)	サイコロの出目
random.randint(1,6)	サイコロを振った目
random.randint(1,6)	1から6までの乱数
time.sleep(3)	プログラムの実行を3秒間、停止する
time.sleep(3)	プログラムを3秒、停止する
time.sleep(3)	3秒、Pythonを停止する
time.sleep(3)	Pythonの実行を3秒、停止する
time.sleep(3)	3秒、Pythonの実行を停止する
time.sleep(3)	3秒間、プログラムの実行を停止する
time.sleep(3)	3秒間、Pythonを停止する
time.sleep(3)	3秒、待つ
time.sleep(3)	3秒間、待つ
time.sleep(3)	3秒間、止める
time.sleep(3)	3秒、止める
while True: pass	無限ループ
while True: pass	とりあえず、繰り返す
for i in range(5):	５回、繰り返す
break	繰り返しを中断する
break	繰り返しから抜け出す
break	繰り返しから強制的に抜け出す
continue	繰り返しの先頭に戻る
continue	繰り返しの最初に戻る
continue	繰り返しの前に戻る
continue	もう一度、繰り返す
continue	もう一回、繰り返す
[0] * n	大きさnの配列
[0] * n	大きさnのリスト
for a in [1,2,3]:	リスト[1,2,3]の各要素を処理する
for a in [1,2,3]:	リスト[1,2,3]の要素を繰り返すたびにaに代入する
a.append(x)	リストaの最後にxを追加する
a.append(x)	aの後ろにxを追加する
a.append(x)	aの最後にxを追加する
a.append(x)	aの末尾にxを追加する
del(a[2])	リストaから2番目の値を削除する
del(a[2])	リストaから2番目の要素を削除する
del(a[2])	aから2番目の要素を削除する
del(a[2])	aから2番目の値を削除する
a[start:end]	aの一部分を取り出す
a[start:end]	リストaの一部分を取り出す
sum(a)	数列aの合計値
sum(a)	aの総和
sum(a)	aの合計
sum(a)	aの総和値
sum(a)	数列aの合計
sum(a)	aの合計値
sum(a)	数列aの総和
sum(a)	aの総和
sum(a)	数列aの総和
sum(a)/len(a)	数列aの平均値
sum(a)/len(a)	aの平均値値
sum(a)/len(a)	数列aの平均値値
sum(a)/len(a)	aの平均
sum(a)/len(a)	aの平均値
random.suffle(a)	aをシャッフルする
random.suffle(a)	リストaをシャッフルする
d.keys()	辞書dのキーの一覧を得る
d.keys()	ハッシュ表dの項目名の一覧を得る
d.keys()	辞書dのキーの一覧
d.keys()	辞書dの項目名の一覧を得る
d.keys()	ハッシュ表dの項目名の一覧
d[key]	辞書dのキーkeyのデータを参照する
d[key]	辞書dのキーkeyの値を参照する
d[key]	dのキーkeyのデータ
d[key]	マップdのキーkeyのデータを参照する
d[key]	辞書dのキーkeyの値
d[key]	辞書dのキーkeyのデータ
d[key]	dのキーkeyのデータを参照する
for key in d.keys(): value = d[key]	辞書dに入っている値を一つずつ処理する
for key in d.keys(): value = d[key]	辞書dに入っているデータを一つずつ処理する
for key in d.keys(): value = d[key]	dに入っているデータを一つずつ処理する
math.ceil(x)	実数xの小数点以下を切り上げる
math.ceil(x)	xの小数点以下を切り上げた整数
math.ceil(x)	xの小数点以下を切り上げた整数値
math.ceil(x)	xの小数点以下を切り上げた自然数
key in d	項目名keyがdに含まれているかどうか
if key in d:	項目名keyがdに含まれているならば
key in d	項目名keyが辞書dに含まれているか
if key in d:	もし項目名keyが辞書dに含まれているならば
key in d	keyがdに含まれているか
if key in d:	keyがdに含まれている場合
key in d	辞書dにkeyが含まれているか否か
if key in d:	辞書dにkeyが含まれている場合
key in d	キーkeyがdにあるかどうか
if key in d:	もしキーkeyがdにあるならば
key in d	ハッシュ表dにキーkeyが含まれているかどうか
if key in d:	ハッシュ表dにキーkeyが含まれている場合
key in d	辞書dにkeyが存在するか
if key in d:	もし辞書dにkeyが存在するならば
key in d	辞書dにキーkeyが含まれているか否か
if key in d:	もし辞書dにキーkeyが含まれているならば
key in d	辞書dに項目名keyが含まれているか
if key in d:	辞書dに項目名keyが含まれているとき
key in d	辞書dにkey項目名があるかどうか
if key in d:	辞書dにkey項目名があるならば
key in d	項目名keyがd辞書に存在するか
if key in d:	項目名keyがd辞書に存在する場合
key in d	keyがdマップに存在するか
if key in d:	keyがdマップに存在するとき
key in d	keyがd辞書に含まれているか否か
if key in d:	keyがd辞書に含まれているならば
key in d	keyが辞書dに含まれているかどうか
if key in d:	もしkeyが辞書dに含まれているならば
key in d	キーkeyが辞書dに存在するかどうか
if key in d:	もしキーkeyが辞書dに存在するならば
key not in date	ハッシュ表dにキーkeyが存在しないか
if key not in date:	ハッシュ表dにキーkeyが存在しないとき
key not in date	辞書dにキーkeyが含まれていないか
if key not in date:	辞書dにキーkeyが含まれていないならば
key not in date	キーkeyがd辞書にないか
if key not in date:	キーkeyがd辞書にないとき
key not in date	キーkeyがdにないか否か
if key not in date:	もしキーkeyがdにないならば
key not in date	辞書dにキーkeyがないか否か
if key not in date:	もし辞書dにキーkeyがないならば
key not in date	キーkeyがd辞書に含まれていないか
if key not in date:	キーkeyがd辞書に含まれていないならば
key not in date	キーkeyが辞書dに存在しないか
if key not in date:	もしキーkeyが辞書dに存在しないならば
key not in date	マップdにキーkeyが含まれていないか
if key not in date:	もしマップdにキーkeyが含まれていないならば
key not in date	キーkeyが辞書dに含まれていないか
if key not in date:	キーkeyが辞書dに含まれていない場合
key not in date	dにキーkeyがないか
if key not in date:	もしdにキーkeyがないならば
s.strip()	sの前後の空白を取り除く
s.strip()	文字列sの前後の空白を除去する
s.strip()	文字列sの前後の空白を取り除く
s.strip()	sの前後の空白を削除する
s.strip()	文字列sの余分な改行を除去する
s.strip()	sの改行を取り除く
s.strip()	sの余分な改行を除去する
s.strip()	sの改行を消す
s.strip()	文字列sの改行を削除する
s.strip()	sの余分な改行を取り除く
s.strip()	sの余分な改行を削除する
s.strip()	sの余分な改行を消す
s.split(',')	sをカンマで区切る
s.split(',')	カンマで文字列sを区切る
s.split(',')	カンマでs文字列を区切る
s.split(',')	カンマでsを区切る
s.split(',')	文字列sをカンマで区切る
s.split(',')	s(文字列をカンマで分割した文字列のリスト
s.split(',')	カンマでs(文字列を分割した文字列のリスト
s.split(',')	','でsを区切る
s.split(',')	sを','で区切る
s.split(',')	文字列sを','で区切る
s.split(',')	','でs文字列を区切る
s.split(',')	','でsを分割した文字列のリスト
s.split(',')	','で文字列sを分割した文字列のリスト
s.split(',')	文字列sを','で分割した文字列のリスト
s.split(',')	sを','で分割した文字列のリスト
sorted(a)	小さい順にaを並べ直す
sorted(a)	昇順にaを並べ直す
sorted(a)	小さい順にaを並べる
sorted(a)	aを整列する
sorted(a)	aを並べ直す
sorted(a)	小さい順にaを整列する
sorted(a)	aを並べ変える
sorted(a)	aを小さい順に並べる
sorted(a)	aを小さい順に並べ変える
sorted(a)	aを昇順に並べる
sorted(a)	aを小さい順に整列する
sorted(a)	aを並べる
sorted(a)	aを並べ変えた列
sorted(a)	aを整列した列
sorted(a)	aを小さい順にソートした列
sorted(a)	aを並べ直した列
sorted(a)	aをソートした列
sorted(a)	昇順にaをソートした列
sorted(a, reverse=True)	aを逆順に並べ変える
sorted(a, reverse=True)	大きい順にaを並べ直す
sorted(a, reverse=True)	aを逆順に並べる
sorted(a, reverse=True)	aを大きい順に並べ変える
sorted(a, reverse=True)	aを大きい順にソートする
sorted(a, reverse=True)	aを降順に並べる
sorted(a, reverse=True)	aを降順に整列する
sorted(a, reverse=True)	aを大きい順に並べる
sorted(a, reverse=True)	大きい順にaを整列する
sorted(a, reverse=True)	大きい順にaをソートする
sorted(a, reverse=True)	降順にaを並べる
sorted(a, reverse=True)	逆順にaを並べ直す
sorted(a, reverse=True)	大きい順にaを並べ変える
sorted(a, reverse=True)	逆順にaを並べる
sorted(a, reverse=True)	aを降順に並べ変える
sorted(a, reverse=True)	aを降順に並べ直す
sorted(a, reverse=True)	大きい順にaを並べる
sorted(a, reverse=True)	逆順にaを並べ直した列
sorted(a, reverse=True)	aを大きい順に整列した列
sorted(a, reverse=True)	逆順にaをソートした列
sorted(a, reverse=True)	逆順にaを整列した列
sorted(a, reverse=True)	降順にaを整列した列
sorted(a, reverse=True)	aを逆順に並べ直した列
sorted(a, reverse=True)	aを降順に並べ変えた列
sorted(a, reverse=True)	大きい順にaをソートした列
sorted(a, reverse=True)	降順にaを並べた列
sorted(a, reverse=True)	降順にaを並べ変えた列
sorted(a, reverse=True)	aを大きい順にソートした列
sorted(a, reverse=True)	降順にaをソートした列
datetime.date.today()	Pythonを実行した日付
datetime.date.today()	プログラムを実行した日付
datetime.date.today()	今日の日付
datetime.date.today()	本日の日付
datetime.date.today().year	プログラムを実行した年
datetime.date.today().year	Pythonを実行した年
datetime.date.today().year	今日の年
datetime.date.today().year	本日の年
datetime.date.today().month	Pythonを実行した月
datetime.date.today().month	プログラムを実行した月
datetime.date.today().month	本日の月
datetime.date.today().month	今日の月
datetime.date.today().day	Pythonを実行した日
datetime.date.today().day	プログラムを実行した日
datetime.date.today().day	本日の日
datetime.date.today().day	今日の日
x.year	xの年
x.month	xの月
x.day	xの日
datetime.datetime.now()	Pythonを実行したタイムスタンプ
datetime.datetime.now()	Pythonを実行したエポックタイム
datetime.datetime.now()	プログラムを実行したエポックタイム
datetime.datetime.now()	Pythonを実行したエポック
datetime.datetime.now()	プログラムを実行したエポック
datetime.datetime.now()	プログラムを実行したタイムスタンプ
datetime.datetime.now()	本日のエポックタイム
datetime.datetime.now()	本日のエポック
datetime.datetime.now()	今日のタイムスタンプ
datetime.datetime.now()	今日のエポック
datetime.datetime.now()	今日のエポックタイム
